
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000059d4 memsz 0x000059d4 flags r-x
    LOAD off    0x000069f4 vaddr 0x000459f4 paddr 0x00047460 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008ecc vaddr 0x00048ecc paddr 0x00048ecc align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005778  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000459a8  000459a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000459f4  00047460  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00048ecc  00048ecc  00008ecc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00049020  00049020  00008460  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008488  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000164a6  00000000  00000000  00008ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006031  00000000  00000000  0001f37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a82  00000000  00000000  000253af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015c8  00000000  00000000  0002be34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027b9  00000000  00000000  0002d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  0002fbb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00034690  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000346d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003723e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00037241  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003724d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003724e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003724f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003725a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00037265  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00037278  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e87  00000000  00000000  000372ac  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000462f9  00000000  00000000  0003c133  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
000459a8 l    d  .rodata	00000000 .rodata
000459f4 l    d  .rwdata	00000000 .rwdata
00048ecc l    d  .bss	00000000 .bss
00049020 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00040268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000404ec l     F .text	00000008 __fp_unlock
00040500 l     F .text	0000019c __sinit.part.1
0004069c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000459f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0004318c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000432a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000432cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000433c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000434a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00047450 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043a14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043b50 l     F .text	00000034 alt_dev_reg
000463c8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043e28 l     F .text	0000020c altera_avalon_jtag_uart_irq
00044034 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044d70 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044ed0 l     F .text	0000003c alt_get_errno
00044f0c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00048ef4 g     O .bss	00000004 alt_instruction_exception_handler
00042f5c g     F .text	00000054 _isatty_r
000436ac g     F .text	0000007c alt_main
00040380 g     F .text	000000c0 _puts_r
00048f20 g     O .bss	00000100 alt_irq
00042c84 g     F .text	00000060 _lseek_r
00047460 g       *ABS*	00000000 __flash_rwdata_start
00049020 g       *ABS*	00000000 __alt_heap_start
00042238 g     F .text	0000005c __sseek
0004084c g     F .text	00000010 __sinit
000406a4 g     F .text	00000078 __sfmoreglue
0004374c g     F .text	00000024 __malloc_unlock
00041924 g     F .text	0000015c memmove
00040834 g     F .text	00000018 _cleanup
000452f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042f00 g     F .text	0000005c _fstat_r
00048ed8 g     O .bss	00000004 errno
000421b4 g     F .text	00000008 __seofread
00048ee0 g     O .bss	00000004 alt_argv
0004f428 g       *ABS*	00000000 _gp
000439e4 g     F .text	00000030 usleep
00046248 g     O .rwdata	00000180 alt_fd_list
0004531c g     F .text	00000090 alt_find_dev
000417dc g     F .text	00000148 memcpy
000404f4 g     F .text	0000000c _cleanup_r
00044e54 g     F .text	0000007c alt_io_redirect
000459a8 g       *ABS*	00000000 __DTOR_END__
00040440 g     F .text	00000014 puts
00045578 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0004422c g     F .text	0000021c altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000430a8 g     F .text	00000064 .hidden __udivsi3
000433fc g     F .text	000000ac isatty
00048ed4 g     O .bss	00000004 __malloc_top_pad
0004089c g     F .text	000004c8 __sfvwrite_r
0004210c g     F .text	00000054 _sbrk_r
00042ea0 g     F .text	00000060 _read_r
00047448 g     O .rwdata	00000004 alt_max_fd
000424a4 g     F .text	000000f0 _fclose_r
00042820 g     F .text	00000030 fflush
00048ed0 g     O .bss	00000004 __malloc_max_sbrked_mem
000435d0 g     F .text	000000dc lseek
00047428 g     O .rwdata	00000004 _global_impure_ptr
00041ba8 g     F .text	00000564 _realloc_r
00049020 g       *ABS*	00000000 __bss_end
00044c80 g     F .text	000000f0 alt_iic_isr_register
000451f0 g     F .text	00000108 alt_tick
0004086c g     F .text	00000018 __fp_lock_all
00044c34 g     F .text	0000004c alt_ic_irq_enabled
00045154 g     F .text	0000009c alt_alarm_stop
00048ee8 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046220 g     O .rwdata	00000028 alt_dev_null
000448f0 g     F .text	00000020 alt_dcache_flush_all
00047460 g       *ABS*	00000000 __ram_rwdata_end
00047440 g     O .rwdata	00000008 alt_dev_list
00043a50 g     F .text	00000100 write
000459f4 g       *ABS*	00000000 __ram_rodata_end
00043308 g     F .text	000000b8 fstat
0004310c g     F .text	00000058 .hidden __umodsi3
00049020 g       *ABS*	00000000 end
00043d68 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000459a8 g       *ABS*	00000000 __CTOR_LIST__
00078d40 g       *ABS*	00000000 __alt_stack_pointer
00044448 g     F .text	00000224 altera_avalon_jtag_uart_write
0004085c g     F .text	00000004 __sfp_lock_acquire
000416f8 g     F .text	000000e4 memchr
00042974 g     F .text	00000310 _free_r
000457f4 g     F .text	00000180 __call_exitprocs
00047430 g     O .rwdata	00000004 __malloc_sbrk_base
00040230 g     F .text	0000003c _start
00048eec g     O .bss	00000004 _alt_tick_rate
00048ef0 g     O .bss	00000004 _alt_nticks
000437ac g     F .text	00000104 read
00043bbc g     F .text	00000048 alt_sys_init
000456dc g     F .text	00000118 __register_exitproc
000440d4 g     F .text	00000068 altera_avalon_jtag_uart_close
00043164 g     F .text	00000028 .hidden __mulsi3
000459f4 g       *ABS*	00000000 __ram_rwdata_start
000459a8 g       *ABS*	00000000 __ram_rodata_start
00048ef8 g     O .bss	00000028 __malloc_current_mallinfo
00043c04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000454b4 g     F .text	000000c4 alt_get_fd
00044798 g     F .text	00000158 alt_busy_sleep
00042450 g     F .text	00000054 _close_r
00045660 g     F .text	0000007c memcmp
00043cc4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00049020 g       *ABS*	00000000 __alt_stack_base
00043d14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000422fc g     F .text	00000154 __swsetup_r
0004071c g     F .text	00000118 __sfp
00045e18 g     O .rwdata	00000408 __malloc_av_
00040868 g     F .text	00000004 __sinit_lock_release
00042160 g     F .text	00000054 __sread
000453ac g     F .text	00000108 alt_find_file
0004494c g     F .text	000000a4 alt_dev_llist_insert
00043728 g     F .text	00000024 __malloc_lock
00043934 g     F .text	000000b0 sbrk
000427c4 g     F .text	0000005c _fflush_r
00048ecc g       *ABS*	00000000 __bss_start
00041a80 g     F .text	00000128 memset
000402b0 g     F .text	000000d0 main
00048ee4 g     O .bss	00000004 alt_envp
00048ecc g     O .bss	00000004 __malloc_max_total_mem
00043c64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042294 g     F .text	00000008 __sclose
00078d40 g       *ABS*	00000000 __alt_heap_limit
00042594 g     F .text	00000014 fclose
00040eec g     F .text	0000080c _malloc_r
0004744c g     O .rwdata	00000004 alt_errno
00040d64 g     F .text	000000c4 _fwalk
00042fb0 g     F .text	00000084 .hidden __divsi3
00042850 g     F .text	00000124 _malloc_trim_r
000459a8 g       *ABS*	00000000 __CTOR_END__
000459a8 g       *ABS*	00000000 __flash_rodata_start
000459a8 g       *ABS*	00000000 __DTOR_LIST__
0004026c g     F .text	00000044 delay
00043b84 g     F .text	00000038 alt_irq_init
000438b0 g     F .text	00000084 alt_release_fd
00045614 g     F .text	00000014 atexit
0004229c g     F .text	00000060 _write_r
0004742c g     O .rwdata	00000004 _impure_ptr
00048edc g     O .bss	00000004 alt_argc
000425a8 g     F .text	0000021c __sflush_r
00044a50 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00040884 g     F .text	00000018 __fp_unlock_all
00047438 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044ad0 g     F .text	00000050 alt_ic_isr_register
00047460 g       *ABS*	00000000 _edata
00049020 g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
0004413c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00044ba8 g     F .text	0000008c alt_ic_irq_disable
000421bc g     F .text	0000007c __swrite
00047434 g     O .rwdata	00000004 __malloc_trim_threshold
00045628 g     F .text	00000038 exit
00040e28 g     F .text	000000c4 _fwalk_reent
00043034 g     F .text	00000074 .hidden __modsi3
00078d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040860 g     F .text	00000004 __sfp_lock_release
00045974 g     F .text	00000034 _exit
0004466c g     F .text	0000012c alt_alarm_start
00042ce4 g     F .text	000001bc __smakebuf_r
00040454 g     F .text	00000098 strlen
00044ff8 g     F .text	0000015c open
00044ab0 g     F .text	00000020 alt_icache_flush_all
00047454 g     O .rwdata	00000004 alt_priority_mask
00044b20 g     F .text	00000088 alt_ic_irq_enable
00047458 g     O .rwdata	00000008 alt_alarm_list
000449f0 g     F .text	00000060 _do_ctors
000431c8 g     F .text	000000d8 close
00043510 g     F .text	00000084 alt_load
00040864 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10a3c804 	addi	r2,r2,-28896
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10a3c804 	addi	r2,r2,-28896
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a6b317 	ldw	r2,-25908(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a6b317 	ldw	r2,-25908(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dee35014 	ori	sp,sp,36160
    movhi gp, %hi(_gp)
   40238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4023c:	d6bd0a14 	ori	gp,gp,62504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40244:	10a3b314 	ori	r2,r2,36556

    movhi r3, %hi(__bss_end)
   40248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4024c:	18e40814 	ori	r3,r3,36896

    beq r2, r3, 1f
   40250:	10c00326 	beq	r2,r3,40260 <_start+0x30>

0:
    stw zero, (r2)
   40254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4025c:	10fffd36 	bltu	r2,r3,40254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40260:	00435100 	call	43510 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40264:	00436ac0 	call	436ac <alt_main>

00040268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40268:	003fff06 	br	40268 <alt_after_alt_main>

0004026c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
   4026c:	defffd04 	addi	sp,sp,-12
   40270:	df000215 	stw	fp,8(sp)
   40274:	df000204 	addi	fp,sp,8
   40278:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
   4027c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
   40280:	00000306 	br	40290 <delay+0x24>
          delay++;
   40284:	e0bffe17 	ldw	r2,-8(fp)
   40288:	10800044 	addi	r2,r2,1
   4028c:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
   40290:	e0bfff17 	ldw	r2,-4(fp)
   40294:	e0fffe17 	ldw	r3,-8(fp)
   40298:	18bffa36 	bltu	r3,r2,40284 <delay+0x18>
          delay++;
      }
}
   4029c:	0001883a 	nop
   402a0:	e037883a 	mov	sp,fp
   402a4:	df000017 	ldw	fp,0(sp)
   402a8:	dec00104 	addi	sp,sp,4
   402ac:	f800283a 	ret

000402b0 <main>:
#define EN_BASE 0x81050
#define DIR_BASE 0x81060
#define PIO_1_BASE 0x81040


int main(void){
   402b0:	defffb04 	addi	sp,sp,-20
   402b4:	dfc00415 	stw	ra,16(sp)
   402b8:	df000315 	stw	fp,12(sp)
   402bc:	df000304 	addi	fp,sp,12
  unsigned int led = 0;
   402c0:	e03ffd15 	stw	zero,-12(fp)

  unsigned int direction, enabled;

  printf("Embarcados++ \n");
   402c4:	01000134 	movhi	r4,4
   402c8:	21166a04 	addi	r4,r4,22952
   402cc:	00404400 	call	40440 <puts>

  while(1){
	  enabled = IORD_32DIRECT(EN_BASE, 0);
   402d0:	00800234 	movhi	r2,8
   402d4:	10841404 	addi	r2,r2,4176
   402d8:	10800037 	ldwio	r2,0(r2)
   402dc:	e0bffe15 	stw	r2,-8(fp)

	  direction = IORD_32DIRECT(DIR_BASE, 0);
   402e0:	00800234 	movhi	r2,8
   402e4:	10841804 	addi	r2,r2,4192
   402e8:	10800037 	ldwio	r2,0(r2)
   402ec:	e0bfff15 	stw	r2,-4(fp)

	  if (enabled){
   402f0:	e0bffe17 	ldw	r2,-8(fp)
   402f4:	103ff626 	beq	r2,zero,402d0 <main+0x20>

		  if (direction){
   402f8:	e0bfff17 	ldw	r2,-4(fp)
   402fc:	10001026 	beq	r2,zero,40340 <main+0x90>

			  if (led <= 3){
   40300:	e0bffd17 	ldw	r2,-12(fp)
   40304:	10800128 	cmpgeui	r2,r2,4
   40308:	10000b1e 	bne	r2,zero,40338 <main+0x88>
				  //IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led);
				  IOWR_32DIRECT(PIO_1_BASE, 0, 0x01 << led++);
   4030c:	e0bffd17 	ldw	r2,-12(fp)
   40310:	10c00044 	addi	r3,r2,1
   40314:	e0fffd15 	stw	r3,-12(fp)
   40318:	00c00044 	movi	r3,1
   4031c:	1886983a 	sll	r3,r3,r2
   40320:	00800234 	movhi	r2,8
   40324:	10841004 	addi	r2,r2,4160
   40328:	10c00035 	stwio	r3,0(r2)
				  usleep(8000);
   4032c:	0107d004 	movi	r4,8000
   40330:	00439e40 	call	439e4 <usleep>
   40334:	003fe606 	br	402d0 <main+0x20>
			  }
			  else{
				  led = 0;
   40338:	e03ffd15 	stw	zero,-12(fp)
   4033c:	003fe406 	br	402d0 <main+0x20>
			  }
		  }

		  else{
			  if (led > 0){
   40340:	e0bffd17 	ldw	r2,-12(fp)
   40344:	10000b26 	beq	r2,zero,40374 <main+0xc4>
				  //IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led);
				  IOWR_32DIRECT(PIO_1_BASE, 0, 0x11 << led--);
   40348:	e0bffd17 	ldw	r2,-12(fp)
   4034c:	10ffffc4 	addi	r3,r2,-1
   40350:	e0fffd15 	stw	r3,-12(fp)
   40354:	00c00444 	movi	r3,17
   40358:	1886983a 	sll	r3,r3,r2
   4035c:	00800234 	movhi	r2,8
   40360:	10841004 	addi	r2,r2,4160
   40364:	10c00035 	stwio	r3,0(r2)
				  usleep(8000);
   40368:	0107d004 	movi	r4,8000
   4036c:	00439e40 	call	439e4 <usleep>
   40370:	003fd706 	br	402d0 <main+0x20>
			  }
			  else{
			  	led = 3;
   40374:	008000c4 	movi	r2,3
   40378:	e0bffd15 	stw	r2,-12(fp)
			  }
		  }
	  }

  };
   4037c:	003fd406 	br	402d0 <main+0x20>

00040380 <_puts_r>:
   40380:	defff604 	addi	sp,sp,-40
   40384:	dc000715 	stw	r16,28(sp)
   40388:	2021883a 	mov	r16,r4
   4038c:	2809883a 	mov	r4,r5
   40390:	dc400815 	stw	r17,32(sp)
   40394:	dfc00915 	stw	ra,36(sp)
   40398:	2823883a 	mov	r17,r5
   4039c:	00404540 	call	40454 <strlen>
   403a0:	10c00044 	addi	r3,r2,1
   403a4:	d8800115 	stw	r2,4(sp)
   403a8:	00800134 	movhi	r2,4
   403ac:	10966e04 	addi	r2,r2,22968
   403b0:	d8800215 	stw	r2,8(sp)
   403b4:	00800044 	movi	r2,1
   403b8:	d8800315 	stw	r2,12(sp)
   403bc:	00800084 	movi	r2,2
   403c0:	dc400015 	stw	r17,0(sp)
   403c4:	d8c00615 	stw	r3,24(sp)
   403c8:	dec00415 	stw	sp,16(sp)
   403cc:	d8800515 	stw	r2,20(sp)
   403d0:	80000226 	beq	r16,zero,403dc <_puts_r+0x5c>
   403d4:	80800e17 	ldw	r2,56(r16)
   403d8:	10001426 	beq	r2,zero,4042c <_puts_r+0xac>
   403dc:	81400217 	ldw	r5,8(r16)
   403e0:	2880030b 	ldhu	r2,12(r5)
   403e4:	10c8000c 	andi	r3,r2,8192
   403e8:	1800061e 	bne	r3,zero,40404 <_puts_r+0x84>
   403ec:	29001917 	ldw	r4,100(r5)
   403f0:	00f7ffc4 	movi	r3,-8193
   403f4:	10880014 	ori	r2,r2,8192
   403f8:	20c6703a 	and	r3,r4,r3
   403fc:	2880030d 	sth	r2,12(r5)
   40400:	28c01915 	stw	r3,100(r5)
   40404:	d9800404 	addi	r6,sp,16
   40408:	8009883a 	mov	r4,r16
   4040c:	004089c0 	call	4089c <__sfvwrite_r>
   40410:	1000091e 	bne	r2,zero,40438 <_puts_r+0xb8>
   40414:	00800284 	movi	r2,10
   40418:	dfc00917 	ldw	ra,36(sp)
   4041c:	dc400817 	ldw	r17,32(sp)
   40420:	dc000717 	ldw	r16,28(sp)
   40424:	dec00a04 	addi	sp,sp,40
   40428:	f800283a 	ret
   4042c:	8009883a 	mov	r4,r16
   40430:	004084c0 	call	4084c <__sinit>
   40434:	003fe906 	br	403dc <_puts_r+0x5c>
   40438:	00bfffc4 	movi	r2,-1
   4043c:	003ff606 	br	40418 <_puts_r+0x98>

00040440 <puts>:
   40440:	00800134 	movhi	r2,4
   40444:	109d0b04 	addi	r2,r2,29740
   40448:	200b883a 	mov	r5,r4
   4044c:	11000017 	ldw	r4,0(r2)
   40450:	00403801 	jmpi	40380 <_puts_r>

00040454 <strlen>:
   40454:	208000cc 	andi	r2,r4,3
   40458:	10002026 	beq	r2,zero,404dc <strlen+0x88>
   4045c:	20800007 	ldb	r2,0(r4)
   40460:	10002026 	beq	r2,zero,404e4 <strlen+0x90>
   40464:	2005883a 	mov	r2,r4
   40468:	00000206 	br	40474 <strlen+0x20>
   4046c:	10c00007 	ldb	r3,0(r2)
   40470:	18001826 	beq	r3,zero,404d4 <strlen+0x80>
   40474:	10800044 	addi	r2,r2,1
   40478:	10c000cc 	andi	r3,r2,3
   4047c:	183ffb1e 	bne	r3,zero,4046c <strlen+0x18>
   40480:	10c00017 	ldw	r3,0(r2)
   40484:	01ffbff4 	movhi	r7,65279
   40488:	39ffbfc4 	addi	r7,r7,-257
   4048c:	00ca303a 	nor	r5,zero,r3
   40490:	01a02074 	movhi	r6,32897
   40494:	19c7883a 	add	r3,r3,r7
   40498:	31a02004 	addi	r6,r6,-32640
   4049c:	1946703a 	and	r3,r3,r5
   404a0:	1986703a 	and	r3,r3,r6
   404a4:	1800091e 	bne	r3,zero,404cc <strlen+0x78>
   404a8:	10800104 	addi	r2,r2,4
   404ac:	10c00017 	ldw	r3,0(r2)
   404b0:	19cb883a 	add	r5,r3,r7
   404b4:	00c6303a 	nor	r3,zero,r3
   404b8:	28c6703a 	and	r3,r5,r3
   404bc:	1986703a 	and	r3,r3,r6
   404c0:	183ff926 	beq	r3,zero,404a8 <strlen+0x54>
   404c4:	00000106 	br	404cc <strlen+0x78>
   404c8:	10800044 	addi	r2,r2,1
   404cc:	10c00007 	ldb	r3,0(r2)
   404d0:	183ffd1e 	bne	r3,zero,404c8 <strlen+0x74>
   404d4:	1105c83a 	sub	r2,r2,r4
   404d8:	f800283a 	ret
   404dc:	2005883a 	mov	r2,r4
   404e0:	003fe706 	br	40480 <strlen+0x2c>
   404e4:	0005883a 	mov	r2,zero
   404e8:	f800283a 	ret

000404ec <__fp_unlock>:
   404ec:	0005883a 	mov	r2,zero
   404f0:	f800283a 	ret

000404f4 <_cleanup_r>:
   404f4:	01400134 	movhi	r5,4
   404f8:	29492904 	addi	r5,r5,9380
   404fc:	0040e281 	jmpi	40e28 <_fwalk_reent>

00040500 <__sinit.part.1>:
   40500:	defff704 	addi	sp,sp,-36
   40504:	00c00134 	movhi	r3,4
   40508:	dfc00815 	stw	ra,32(sp)
   4050c:	ddc00715 	stw	r23,28(sp)
   40510:	dd800615 	stw	r22,24(sp)
   40514:	dd400515 	stw	r21,20(sp)
   40518:	dd000415 	stw	r20,16(sp)
   4051c:	dcc00315 	stw	r19,12(sp)
   40520:	dc800215 	stw	r18,8(sp)
   40524:	dc400115 	stw	r17,4(sp)
   40528:	dc000015 	stw	r16,0(sp)
   4052c:	18c13d04 	addi	r3,r3,1268
   40530:	24000117 	ldw	r16,4(r4)
   40534:	20c00f15 	stw	r3,60(r4)
   40538:	2080bb04 	addi	r2,r4,748
   4053c:	00c000c4 	movi	r3,3
   40540:	20c0b915 	stw	r3,740(r4)
   40544:	2080ba15 	stw	r2,744(r4)
   40548:	2000b815 	stw	zero,736(r4)
   4054c:	05c00204 	movi	r23,8
   40550:	00800104 	movi	r2,4
   40554:	2025883a 	mov	r18,r4
   40558:	b80d883a 	mov	r6,r23
   4055c:	81001704 	addi	r4,r16,92
   40560:	000b883a 	mov	r5,zero
   40564:	80000015 	stw	zero,0(r16)
   40568:	80000115 	stw	zero,4(r16)
   4056c:	80000215 	stw	zero,8(r16)
   40570:	8080030d 	sth	r2,12(r16)
   40574:	80001915 	stw	zero,100(r16)
   40578:	8000038d 	sth	zero,14(r16)
   4057c:	80000415 	stw	zero,16(r16)
   40580:	80000515 	stw	zero,20(r16)
   40584:	80000615 	stw	zero,24(r16)
   40588:	0041a800 	call	41a80 <memset>
   4058c:	05800134 	movhi	r22,4
   40590:	94400217 	ldw	r17,8(r18)
   40594:	05400134 	movhi	r21,4
   40598:	05000134 	movhi	r20,4
   4059c:	04c00134 	movhi	r19,4
   405a0:	b5885804 	addi	r22,r22,8544
   405a4:	ad486f04 	addi	r21,r21,8636
   405a8:	a5088e04 	addi	r20,r20,8760
   405ac:	9cc8a504 	addi	r19,r19,8852
   405b0:	85800815 	stw	r22,32(r16)
   405b4:	85400915 	stw	r21,36(r16)
   405b8:	85000a15 	stw	r20,40(r16)
   405bc:	84c00b15 	stw	r19,44(r16)
   405c0:	84000715 	stw	r16,28(r16)
   405c4:	00800284 	movi	r2,10
   405c8:	8880030d 	sth	r2,12(r17)
   405cc:	00800044 	movi	r2,1
   405d0:	b80d883a 	mov	r6,r23
   405d4:	89001704 	addi	r4,r17,92
   405d8:	000b883a 	mov	r5,zero
   405dc:	88000015 	stw	zero,0(r17)
   405e0:	88000115 	stw	zero,4(r17)
   405e4:	88000215 	stw	zero,8(r17)
   405e8:	88001915 	stw	zero,100(r17)
   405ec:	8880038d 	sth	r2,14(r17)
   405f0:	88000415 	stw	zero,16(r17)
   405f4:	88000515 	stw	zero,20(r17)
   405f8:	88000615 	stw	zero,24(r17)
   405fc:	0041a800 	call	41a80 <memset>
   40600:	94000317 	ldw	r16,12(r18)
   40604:	00800484 	movi	r2,18
   40608:	8c400715 	stw	r17,28(r17)
   4060c:	8d800815 	stw	r22,32(r17)
   40610:	8d400915 	stw	r21,36(r17)
   40614:	8d000a15 	stw	r20,40(r17)
   40618:	8cc00b15 	stw	r19,44(r17)
   4061c:	8080030d 	sth	r2,12(r16)
   40620:	00800084 	movi	r2,2
   40624:	80000015 	stw	zero,0(r16)
   40628:	80000115 	stw	zero,4(r16)
   4062c:	80000215 	stw	zero,8(r16)
   40630:	80001915 	stw	zero,100(r16)
   40634:	8080038d 	sth	r2,14(r16)
   40638:	80000415 	stw	zero,16(r16)
   4063c:	80000515 	stw	zero,20(r16)
   40640:	80000615 	stw	zero,24(r16)
   40644:	b80d883a 	mov	r6,r23
   40648:	000b883a 	mov	r5,zero
   4064c:	81001704 	addi	r4,r16,92
   40650:	0041a800 	call	41a80 <memset>
   40654:	00800044 	movi	r2,1
   40658:	84000715 	stw	r16,28(r16)
   4065c:	85800815 	stw	r22,32(r16)
   40660:	85400915 	stw	r21,36(r16)
   40664:	85000a15 	stw	r20,40(r16)
   40668:	84c00b15 	stw	r19,44(r16)
   4066c:	90800e15 	stw	r2,56(r18)
   40670:	dfc00817 	ldw	ra,32(sp)
   40674:	ddc00717 	ldw	r23,28(sp)
   40678:	dd800617 	ldw	r22,24(sp)
   4067c:	dd400517 	ldw	r21,20(sp)
   40680:	dd000417 	ldw	r20,16(sp)
   40684:	dcc00317 	ldw	r19,12(sp)
   40688:	dc800217 	ldw	r18,8(sp)
   4068c:	dc400117 	ldw	r17,4(sp)
   40690:	dc000017 	ldw	r16,0(sp)
   40694:	dec00904 	addi	sp,sp,36
   40698:	f800283a 	ret

0004069c <__fp_lock>:
   4069c:	0005883a 	mov	r2,zero
   406a0:	f800283a 	ret

000406a4 <__sfmoreglue>:
   406a4:	defffc04 	addi	sp,sp,-16
   406a8:	dc800215 	stw	r18,8(sp)
   406ac:	2825883a 	mov	r18,r5
   406b0:	dc000015 	stw	r16,0(sp)
   406b4:	01401a04 	movi	r5,104
   406b8:	2021883a 	mov	r16,r4
   406bc:	913fffc4 	addi	r4,r18,-1
   406c0:	dfc00315 	stw	ra,12(sp)
   406c4:	dc400115 	stw	r17,4(sp)
   406c8:	00431640 	call	43164 <__mulsi3>
   406cc:	8009883a 	mov	r4,r16
   406d0:	11401d04 	addi	r5,r2,116
   406d4:	1023883a 	mov	r17,r2
   406d8:	0040eec0 	call	40eec <_malloc_r>
   406dc:	1021883a 	mov	r16,r2
   406e0:	10000726 	beq	r2,zero,40700 <__sfmoreglue+0x5c>
   406e4:	11000304 	addi	r4,r2,12
   406e8:	10000015 	stw	zero,0(r2)
   406ec:	14800115 	stw	r18,4(r2)
   406f0:	11000215 	stw	r4,8(r2)
   406f4:	89801a04 	addi	r6,r17,104
   406f8:	000b883a 	mov	r5,zero
   406fc:	0041a800 	call	41a80 <memset>
   40700:	8005883a 	mov	r2,r16
   40704:	dfc00317 	ldw	ra,12(sp)
   40708:	dc800217 	ldw	r18,8(sp)
   4070c:	dc400117 	ldw	r17,4(sp)
   40710:	dc000017 	ldw	r16,0(sp)
   40714:	dec00404 	addi	sp,sp,16
   40718:	f800283a 	ret

0004071c <__sfp>:
   4071c:	defffb04 	addi	sp,sp,-20
   40720:	dc000015 	stw	r16,0(sp)
   40724:	04000134 	movhi	r16,4
   40728:	841d0a04 	addi	r16,r16,29736
   4072c:	dcc00315 	stw	r19,12(sp)
   40730:	2027883a 	mov	r19,r4
   40734:	81000017 	ldw	r4,0(r16)
   40738:	dfc00415 	stw	ra,16(sp)
   4073c:	dc800215 	stw	r18,8(sp)
   40740:	20800e17 	ldw	r2,56(r4)
   40744:	dc400115 	stw	r17,4(sp)
   40748:	1000021e 	bne	r2,zero,40754 <__sfp+0x38>
   4074c:	00405000 	call	40500 <__sinit.part.1>
   40750:	81000017 	ldw	r4,0(r16)
   40754:	2480b804 	addi	r18,r4,736
   40758:	047fffc4 	movi	r17,-1
   4075c:	91000117 	ldw	r4,4(r18)
   40760:	94000217 	ldw	r16,8(r18)
   40764:	213fffc4 	addi	r4,r4,-1
   40768:	20000a16 	blt	r4,zero,40794 <__sfp+0x78>
   4076c:	8080030f 	ldh	r2,12(r16)
   40770:	10000c26 	beq	r2,zero,407a4 <__sfp+0x88>
   40774:	80c01d04 	addi	r3,r16,116
   40778:	00000206 	br	40784 <__sfp+0x68>
   4077c:	18bfe60f 	ldh	r2,-104(r3)
   40780:	10000826 	beq	r2,zero,407a4 <__sfp+0x88>
   40784:	213fffc4 	addi	r4,r4,-1
   40788:	1c3ffd04 	addi	r16,r3,-12
   4078c:	18c01a04 	addi	r3,r3,104
   40790:	247ffa1e 	bne	r4,r17,4077c <__sfp+0x60>
   40794:	90800017 	ldw	r2,0(r18)
   40798:	10001d26 	beq	r2,zero,40810 <__sfp+0xf4>
   4079c:	1025883a 	mov	r18,r2
   407a0:	003fee06 	br	4075c <__sfp+0x40>
   407a4:	00bfffc4 	movi	r2,-1
   407a8:	8080038d 	sth	r2,14(r16)
   407ac:	00800044 	movi	r2,1
   407b0:	8080030d 	sth	r2,12(r16)
   407b4:	80001915 	stw	zero,100(r16)
   407b8:	80000015 	stw	zero,0(r16)
   407bc:	80000215 	stw	zero,8(r16)
   407c0:	80000115 	stw	zero,4(r16)
   407c4:	80000415 	stw	zero,16(r16)
   407c8:	80000515 	stw	zero,20(r16)
   407cc:	80000615 	stw	zero,24(r16)
   407d0:	01800204 	movi	r6,8
   407d4:	000b883a 	mov	r5,zero
   407d8:	81001704 	addi	r4,r16,92
   407dc:	0041a800 	call	41a80 <memset>
   407e0:	8005883a 	mov	r2,r16
   407e4:	80000c15 	stw	zero,48(r16)
   407e8:	80000d15 	stw	zero,52(r16)
   407ec:	80001115 	stw	zero,68(r16)
   407f0:	80001215 	stw	zero,72(r16)
   407f4:	dfc00417 	ldw	ra,16(sp)
   407f8:	dcc00317 	ldw	r19,12(sp)
   407fc:	dc800217 	ldw	r18,8(sp)
   40800:	dc400117 	ldw	r17,4(sp)
   40804:	dc000017 	ldw	r16,0(sp)
   40808:	dec00504 	addi	sp,sp,20
   4080c:	f800283a 	ret
   40810:	01400104 	movi	r5,4
   40814:	9809883a 	mov	r4,r19
   40818:	00406a40 	call	406a4 <__sfmoreglue>
   4081c:	90800015 	stw	r2,0(r18)
   40820:	103fde1e 	bne	r2,zero,4079c <__sfp+0x80>
   40824:	00800304 	movi	r2,12
   40828:	98800015 	stw	r2,0(r19)
   4082c:	0005883a 	mov	r2,zero
   40830:	003ff006 	br	407f4 <__sfp+0xd8>

00040834 <_cleanup>:
   40834:	00800134 	movhi	r2,4
   40838:	109d0a04 	addi	r2,r2,29736
   4083c:	11000017 	ldw	r4,0(r2)
   40840:	01400134 	movhi	r5,4
   40844:	29492904 	addi	r5,r5,9380
   40848:	0040e281 	jmpi	40e28 <_fwalk_reent>

0004084c <__sinit>:
   4084c:	20800e17 	ldw	r2,56(r4)
   40850:	10000126 	beq	r2,zero,40858 <__sinit+0xc>
   40854:	f800283a 	ret
   40858:	00405001 	jmpi	40500 <__sinit.part.1>

0004085c <__sfp_lock_acquire>:
   4085c:	f800283a 	ret

00040860 <__sfp_lock_release>:
   40860:	f800283a 	ret

00040864 <__sinit_lock_acquire>:
   40864:	f800283a 	ret

00040868 <__sinit_lock_release>:
   40868:	f800283a 	ret

0004086c <__fp_lock_all>:
   4086c:	00800134 	movhi	r2,4
   40870:	109d0b04 	addi	r2,r2,29740
   40874:	11000017 	ldw	r4,0(r2)
   40878:	01400134 	movhi	r5,4
   4087c:	2941a704 	addi	r5,r5,1692
   40880:	0040d641 	jmpi	40d64 <_fwalk>

00040884 <__fp_unlock_all>:
   40884:	00800134 	movhi	r2,4
   40888:	109d0b04 	addi	r2,r2,29740
   4088c:	11000017 	ldw	r4,0(r2)
   40890:	01400134 	movhi	r5,4
   40894:	29413b04 	addi	r5,r5,1260
   40898:	0040d641 	jmpi	40d64 <_fwalk>

0004089c <__sfvwrite_r>:
   4089c:	30800217 	ldw	r2,8(r6)
   408a0:	10006726 	beq	r2,zero,40a40 <__sfvwrite_r+0x1a4>
   408a4:	28c0030b 	ldhu	r3,12(r5)
   408a8:	defff404 	addi	sp,sp,-48
   408ac:	dd400715 	stw	r21,28(sp)
   408b0:	dd000615 	stw	r20,24(sp)
   408b4:	dc000215 	stw	r16,8(sp)
   408b8:	dfc00b15 	stw	ra,44(sp)
   408bc:	df000a15 	stw	fp,40(sp)
   408c0:	ddc00915 	stw	r23,36(sp)
   408c4:	dd800815 	stw	r22,32(sp)
   408c8:	dcc00515 	stw	r19,20(sp)
   408cc:	dc800415 	stw	r18,16(sp)
   408d0:	dc400315 	stw	r17,12(sp)
   408d4:	1880020c 	andi	r2,r3,8
   408d8:	2821883a 	mov	r16,r5
   408dc:	202b883a 	mov	r21,r4
   408e0:	3029883a 	mov	r20,r6
   408e4:	10002726 	beq	r2,zero,40984 <__sfvwrite_r+0xe8>
   408e8:	28800417 	ldw	r2,16(r5)
   408ec:	10002526 	beq	r2,zero,40984 <__sfvwrite_r+0xe8>
   408f0:	1880008c 	andi	r2,r3,2
   408f4:	a4400017 	ldw	r17,0(r20)
   408f8:	10002a26 	beq	r2,zero,409a4 <__sfvwrite_r+0x108>
   408fc:	05a00034 	movhi	r22,32768
   40900:	0027883a 	mov	r19,zero
   40904:	0025883a 	mov	r18,zero
   40908:	b5bf0004 	addi	r22,r22,-1024
   4090c:	980d883a 	mov	r6,r19
   40910:	a809883a 	mov	r4,r21
   40914:	90004626 	beq	r18,zero,40a30 <__sfvwrite_r+0x194>
   40918:	900f883a 	mov	r7,r18
   4091c:	b480022e 	bgeu	r22,r18,40928 <__sfvwrite_r+0x8c>
   40920:	01e00034 	movhi	r7,32768
   40924:	39ff0004 	addi	r7,r7,-1024
   40928:	80800917 	ldw	r2,36(r16)
   4092c:	81400717 	ldw	r5,28(r16)
   40930:	103ee83a 	callr	r2
   40934:	00805a0e 	bge	zero,r2,40aa0 <__sfvwrite_r+0x204>
   40938:	a0c00217 	ldw	r3,8(r20)
   4093c:	98a7883a 	add	r19,r19,r2
   40940:	90a5c83a 	sub	r18,r18,r2
   40944:	1885c83a 	sub	r2,r3,r2
   40948:	a0800215 	stw	r2,8(r20)
   4094c:	103fef1e 	bne	r2,zero,4090c <__sfvwrite_r+0x70>
   40950:	0005883a 	mov	r2,zero
   40954:	dfc00b17 	ldw	ra,44(sp)
   40958:	df000a17 	ldw	fp,40(sp)
   4095c:	ddc00917 	ldw	r23,36(sp)
   40960:	dd800817 	ldw	r22,32(sp)
   40964:	dd400717 	ldw	r21,28(sp)
   40968:	dd000617 	ldw	r20,24(sp)
   4096c:	dcc00517 	ldw	r19,20(sp)
   40970:	dc800417 	ldw	r18,16(sp)
   40974:	dc400317 	ldw	r17,12(sp)
   40978:	dc000217 	ldw	r16,8(sp)
   4097c:	dec00c04 	addi	sp,sp,48
   40980:	f800283a 	ret
   40984:	800b883a 	mov	r5,r16
   40988:	a809883a 	mov	r4,r21
   4098c:	00422fc0 	call	422fc <__swsetup_r>
   40990:	1000ee1e 	bne	r2,zero,40d4c <__sfvwrite_r+0x4b0>
   40994:	80c0030b 	ldhu	r3,12(r16)
   40998:	a4400017 	ldw	r17,0(r20)
   4099c:	1880008c 	andi	r2,r3,2
   409a0:	103fd61e 	bne	r2,zero,408fc <__sfvwrite_r+0x60>
   409a4:	1880004c 	andi	r2,r3,1
   409a8:	1000421e 	bne	r2,zero,40ab4 <__sfvwrite_r+0x218>
   409ac:	0039883a 	mov	fp,zero
   409b0:	0025883a 	mov	r18,zero
   409b4:	90001a26 	beq	r18,zero,40a20 <__sfvwrite_r+0x184>
   409b8:	1880800c 	andi	r2,r3,512
   409bc:	84c00217 	ldw	r19,8(r16)
   409c0:	10002126 	beq	r2,zero,40a48 <__sfvwrite_r+0x1ac>
   409c4:	982f883a 	mov	r23,r19
   409c8:	94c09636 	bltu	r18,r19,40c24 <__sfvwrite_r+0x388>
   409cc:	1881200c 	andi	r2,r3,1152
   409d0:	1000a11e 	bne	r2,zero,40c58 <__sfvwrite_r+0x3bc>
   409d4:	81000017 	ldw	r4,0(r16)
   409d8:	b80d883a 	mov	r6,r23
   409dc:	e00b883a 	mov	r5,fp
   409e0:	00419240 	call	41924 <memmove>
   409e4:	80c00217 	ldw	r3,8(r16)
   409e8:	81000017 	ldw	r4,0(r16)
   409ec:	9005883a 	mov	r2,r18
   409f0:	1ce7c83a 	sub	r19,r3,r19
   409f4:	25cf883a 	add	r7,r4,r23
   409f8:	84c00215 	stw	r19,8(r16)
   409fc:	81c00015 	stw	r7,0(r16)
   40a00:	a0c00217 	ldw	r3,8(r20)
   40a04:	e0b9883a 	add	fp,fp,r2
   40a08:	90a5c83a 	sub	r18,r18,r2
   40a0c:	18a7c83a 	sub	r19,r3,r2
   40a10:	a4c00215 	stw	r19,8(r20)
   40a14:	983fce26 	beq	r19,zero,40950 <__sfvwrite_r+0xb4>
   40a18:	80c0030b 	ldhu	r3,12(r16)
   40a1c:	903fe61e 	bne	r18,zero,409b8 <__sfvwrite_r+0x11c>
   40a20:	8f000017 	ldw	fp,0(r17)
   40a24:	8c800117 	ldw	r18,4(r17)
   40a28:	8c400204 	addi	r17,r17,8
   40a2c:	003fe106 	br	409b4 <__sfvwrite_r+0x118>
   40a30:	8cc00017 	ldw	r19,0(r17)
   40a34:	8c800117 	ldw	r18,4(r17)
   40a38:	8c400204 	addi	r17,r17,8
   40a3c:	003fb306 	br	4090c <__sfvwrite_r+0x70>
   40a40:	0005883a 	mov	r2,zero
   40a44:	f800283a 	ret
   40a48:	81000017 	ldw	r4,0(r16)
   40a4c:	80800417 	ldw	r2,16(r16)
   40a50:	11005a36 	bltu	r2,r4,40bbc <__sfvwrite_r+0x320>
   40a54:	85c00517 	ldw	r23,20(r16)
   40a58:	95c05836 	bltu	r18,r23,40bbc <__sfvwrite_r+0x320>
   40a5c:	00a00034 	movhi	r2,32768
   40a60:	10bfffc4 	addi	r2,r2,-1
   40a64:	9009883a 	mov	r4,r18
   40a68:	1480012e 	bgeu	r2,r18,40a70 <__sfvwrite_r+0x1d4>
   40a6c:	1009883a 	mov	r4,r2
   40a70:	b80b883a 	mov	r5,r23
   40a74:	0042fb00 	call	42fb0 <__divsi3>
   40a78:	b80b883a 	mov	r5,r23
   40a7c:	1009883a 	mov	r4,r2
   40a80:	00431640 	call	43164 <__mulsi3>
   40a84:	81400717 	ldw	r5,28(r16)
   40a88:	80c00917 	ldw	r3,36(r16)
   40a8c:	100f883a 	mov	r7,r2
   40a90:	e00d883a 	mov	r6,fp
   40a94:	a809883a 	mov	r4,r21
   40a98:	183ee83a 	callr	r3
   40a9c:	00bfd816 	blt	zero,r2,40a00 <__sfvwrite_r+0x164>
   40aa0:	8080030b 	ldhu	r2,12(r16)
   40aa4:	10801014 	ori	r2,r2,64
   40aa8:	8080030d 	sth	r2,12(r16)
   40aac:	00bfffc4 	movi	r2,-1
   40ab0:	003fa806 	br	40954 <__sfvwrite_r+0xb8>
   40ab4:	0027883a 	mov	r19,zero
   40ab8:	0011883a 	mov	r8,zero
   40abc:	0039883a 	mov	fp,zero
   40ac0:	0025883a 	mov	r18,zero
   40ac4:	90001f26 	beq	r18,zero,40b44 <__sfvwrite_r+0x2a8>
   40ac8:	40005a26 	beq	r8,zero,40c34 <__sfvwrite_r+0x398>
   40acc:	982d883a 	mov	r22,r19
   40ad0:	94c0012e 	bgeu	r18,r19,40ad8 <__sfvwrite_r+0x23c>
   40ad4:	902d883a 	mov	r22,r18
   40ad8:	81000017 	ldw	r4,0(r16)
   40adc:	80800417 	ldw	r2,16(r16)
   40ae0:	b02f883a 	mov	r23,r22
   40ae4:	81c00517 	ldw	r7,20(r16)
   40ae8:	1100032e 	bgeu	r2,r4,40af8 <__sfvwrite_r+0x25c>
   40aec:	80c00217 	ldw	r3,8(r16)
   40af0:	38c7883a 	add	r3,r7,r3
   40af4:	1d801816 	blt	r3,r22,40b58 <__sfvwrite_r+0x2bc>
   40af8:	b1c03e16 	blt	r22,r7,40bf4 <__sfvwrite_r+0x358>
   40afc:	80800917 	ldw	r2,36(r16)
   40b00:	81400717 	ldw	r5,28(r16)
   40b04:	e00d883a 	mov	r6,fp
   40b08:	da000115 	stw	r8,4(sp)
   40b0c:	a809883a 	mov	r4,r21
   40b10:	103ee83a 	callr	r2
   40b14:	102f883a 	mov	r23,r2
   40b18:	da000117 	ldw	r8,4(sp)
   40b1c:	00bfe00e 	bge	zero,r2,40aa0 <__sfvwrite_r+0x204>
   40b20:	9de7c83a 	sub	r19,r19,r23
   40b24:	98001f26 	beq	r19,zero,40ba4 <__sfvwrite_r+0x308>
   40b28:	a0800217 	ldw	r2,8(r20)
   40b2c:	e5f9883a 	add	fp,fp,r23
   40b30:	95e5c83a 	sub	r18,r18,r23
   40b34:	15efc83a 	sub	r23,r2,r23
   40b38:	a5c00215 	stw	r23,8(r20)
   40b3c:	b83f8426 	beq	r23,zero,40950 <__sfvwrite_r+0xb4>
   40b40:	903fe11e 	bne	r18,zero,40ac8 <__sfvwrite_r+0x22c>
   40b44:	8f000017 	ldw	fp,0(r17)
   40b48:	8c800117 	ldw	r18,4(r17)
   40b4c:	0011883a 	mov	r8,zero
   40b50:	8c400204 	addi	r17,r17,8
   40b54:	003fdb06 	br	40ac4 <__sfvwrite_r+0x228>
   40b58:	180d883a 	mov	r6,r3
   40b5c:	e00b883a 	mov	r5,fp
   40b60:	da000115 	stw	r8,4(sp)
   40b64:	d8c00015 	stw	r3,0(sp)
   40b68:	00419240 	call	41924 <memmove>
   40b6c:	d8c00017 	ldw	r3,0(sp)
   40b70:	80800017 	ldw	r2,0(r16)
   40b74:	800b883a 	mov	r5,r16
   40b78:	a809883a 	mov	r4,r21
   40b7c:	10c5883a 	add	r2,r2,r3
   40b80:	80800015 	stw	r2,0(r16)
   40b84:	d8c00015 	stw	r3,0(sp)
   40b88:	00427c40 	call	427c4 <_fflush_r>
   40b8c:	d8c00017 	ldw	r3,0(sp)
   40b90:	da000117 	ldw	r8,4(sp)
   40b94:	103fc21e 	bne	r2,zero,40aa0 <__sfvwrite_r+0x204>
   40b98:	182f883a 	mov	r23,r3
   40b9c:	9de7c83a 	sub	r19,r19,r23
   40ba0:	983fe11e 	bne	r19,zero,40b28 <__sfvwrite_r+0x28c>
   40ba4:	800b883a 	mov	r5,r16
   40ba8:	a809883a 	mov	r4,r21
   40bac:	00427c40 	call	427c4 <_fflush_r>
   40bb0:	103fbb1e 	bne	r2,zero,40aa0 <__sfvwrite_r+0x204>
   40bb4:	0011883a 	mov	r8,zero
   40bb8:	003fdb06 	br	40b28 <__sfvwrite_r+0x28c>
   40bbc:	94c0012e 	bgeu	r18,r19,40bc4 <__sfvwrite_r+0x328>
   40bc0:	9027883a 	mov	r19,r18
   40bc4:	980d883a 	mov	r6,r19
   40bc8:	e00b883a 	mov	r5,fp
   40bcc:	00419240 	call	41924 <memmove>
   40bd0:	80800217 	ldw	r2,8(r16)
   40bd4:	80c00017 	ldw	r3,0(r16)
   40bd8:	14c5c83a 	sub	r2,r2,r19
   40bdc:	1cc7883a 	add	r3,r3,r19
   40be0:	80800215 	stw	r2,8(r16)
   40be4:	80c00015 	stw	r3,0(r16)
   40be8:	10004326 	beq	r2,zero,40cf8 <__sfvwrite_r+0x45c>
   40bec:	9805883a 	mov	r2,r19
   40bf0:	003f8306 	br	40a00 <__sfvwrite_r+0x164>
   40bf4:	b00d883a 	mov	r6,r22
   40bf8:	e00b883a 	mov	r5,fp
   40bfc:	da000115 	stw	r8,4(sp)
   40c00:	00419240 	call	41924 <memmove>
   40c04:	80800217 	ldw	r2,8(r16)
   40c08:	80c00017 	ldw	r3,0(r16)
   40c0c:	da000117 	ldw	r8,4(sp)
   40c10:	1585c83a 	sub	r2,r2,r22
   40c14:	1dad883a 	add	r22,r3,r22
   40c18:	80800215 	stw	r2,8(r16)
   40c1c:	85800015 	stw	r22,0(r16)
   40c20:	003fbf06 	br	40b20 <__sfvwrite_r+0x284>
   40c24:	81000017 	ldw	r4,0(r16)
   40c28:	9027883a 	mov	r19,r18
   40c2c:	902f883a 	mov	r23,r18
   40c30:	003f6906 	br	409d8 <__sfvwrite_r+0x13c>
   40c34:	900d883a 	mov	r6,r18
   40c38:	01400284 	movi	r5,10
   40c3c:	e009883a 	mov	r4,fp
   40c40:	00416f80 	call	416f8 <memchr>
   40c44:	10003e26 	beq	r2,zero,40d40 <__sfvwrite_r+0x4a4>
   40c48:	10800044 	addi	r2,r2,1
   40c4c:	1727c83a 	sub	r19,r2,fp
   40c50:	02000044 	movi	r8,1
   40c54:	003f9d06 	br	40acc <__sfvwrite_r+0x230>
   40c58:	80800517 	ldw	r2,20(r16)
   40c5c:	81400417 	ldw	r5,16(r16)
   40c60:	81c00017 	ldw	r7,0(r16)
   40c64:	10a7883a 	add	r19,r2,r2
   40c68:	9885883a 	add	r2,r19,r2
   40c6c:	1026d7fa 	srli	r19,r2,31
   40c70:	396dc83a 	sub	r22,r7,r5
   40c74:	b1000044 	addi	r4,r22,1
   40c78:	9885883a 	add	r2,r19,r2
   40c7c:	1027d07a 	srai	r19,r2,1
   40c80:	2485883a 	add	r2,r4,r18
   40c84:	980d883a 	mov	r6,r19
   40c88:	9880022e 	bgeu	r19,r2,40c94 <__sfvwrite_r+0x3f8>
   40c8c:	1027883a 	mov	r19,r2
   40c90:	100d883a 	mov	r6,r2
   40c94:	18c1000c 	andi	r3,r3,1024
   40c98:	18001c26 	beq	r3,zero,40d0c <__sfvwrite_r+0x470>
   40c9c:	300b883a 	mov	r5,r6
   40ca0:	a809883a 	mov	r4,r21
   40ca4:	0040eec0 	call	40eec <_malloc_r>
   40ca8:	102f883a 	mov	r23,r2
   40cac:	10002926 	beq	r2,zero,40d54 <__sfvwrite_r+0x4b8>
   40cb0:	81400417 	ldw	r5,16(r16)
   40cb4:	b00d883a 	mov	r6,r22
   40cb8:	1009883a 	mov	r4,r2
   40cbc:	00417dc0 	call	417dc <memcpy>
   40cc0:	8080030b 	ldhu	r2,12(r16)
   40cc4:	00fedfc4 	movi	r3,-1153
   40cc8:	10c4703a 	and	r2,r2,r3
   40ccc:	10802014 	ori	r2,r2,128
   40cd0:	8080030d 	sth	r2,12(r16)
   40cd4:	bd89883a 	add	r4,r23,r22
   40cd8:	9d8fc83a 	sub	r7,r19,r22
   40cdc:	85c00415 	stw	r23,16(r16)
   40ce0:	84c00515 	stw	r19,20(r16)
   40ce4:	81000015 	stw	r4,0(r16)
   40ce8:	9027883a 	mov	r19,r18
   40cec:	81c00215 	stw	r7,8(r16)
   40cf0:	902f883a 	mov	r23,r18
   40cf4:	003f3806 	br	409d8 <__sfvwrite_r+0x13c>
   40cf8:	800b883a 	mov	r5,r16
   40cfc:	a809883a 	mov	r4,r21
   40d00:	00427c40 	call	427c4 <_fflush_r>
   40d04:	103fb926 	beq	r2,zero,40bec <__sfvwrite_r+0x350>
   40d08:	003f6506 	br	40aa0 <__sfvwrite_r+0x204>
   40d0c:	a809883a 	mov	r4,r21
   40d10:	0041ba80 	call	41ba8 <_realloc_r>
   40d14:	102f883a 	mov	r23,r2
   40d18:	103fee1e 	bne	r2,zero,40cd4 <__sfvwrite_r+0x438>
   40d1c:	81400417 	ldw	r5,16(r16)
   40d20:	a809883a 	mov	r4,r21
   40d24:	00429740 	call	42974 <_free_r>
   40d28:	8080030b 	ldhu	r2,12(r16)
   40d2c:	00ffdfc4 	movi	r3,-129
   40d30:	1884703a 	and	r2,r3,r2
   40d34:	00c00304 	movi	r3,12
   40d38:	a8c00015 	stw	r3,0(r21)
   40d3c:	003f5906 	br	40aa4 <__sfvwrite_r+0x208>
   40d40:	94c00044 	addi	r19,r18,1
   40d44:	02000044 	movi	r8,1
   40d48:	003f6006 	br	40acc <__sfvwrite_r+0x230>
   40d4c:	00bfffc4 	movi	r2,-1
   40d50:	003f0006 	br	40954 <__sfvwrite_r+0xb8>
   40d54:	00800304 	movi	r2,12
   40d58:	a8800015 	stw	r2,0(r21)
   40d5c:	8080030b 	ldhu	r2,12(r16)
   40d60:	003f5006 	br	40aa4 <__sfvwrite_r+0x208>

00040d64 <_fwalk>:
   40d64:	defff704 	addi	sp,sp,-36
   40d68:	dd000415 	stw	r20,16(sp)
   40d6c:	dfc00815 	stw	ra,32(sp)
   40d70:	ddc00715 	stw	r23,28(sp)
   40d74:	dd800615 	stw	r22,24(sp)
   40d78:	dd400515 	stw	r21,20(sp)
   40d7c:	dcc00315 	stw	r19,12(sp)
   40d80:	dc800215 	stw	r18,8(sp)
   40d84:	dc400115 	stw	r17,4(sp)
   40d88:	dc000015 	stw	r16,0(sp)
   40d8c:	2500b804 	addi	r20,r4,736
   40d90:	a0002326 	beq	r20,zero,40e20 <_fwalk+0xbc>
   40d94:	282b883a 	mov	r21,r5
   40d98:	002f883a 	mov	r23,zero
   40d9c:	05800044 	movi	r22,1
   40da0:	04ffffc4 	movi	r19,-1
   40da4:	a4400117 	ldw	r17,4(r20)
   40da8:	a4800217 	ldw	r18,8(r20)
   40dac:	8c7fffc4 	addi	r17,r17,-1
   40db0:	88000d16 	blt	r17,zero,40de8 <_fwalk+0x84>
   40db4:	94000304 	addi	r16,r18,12
   40db8:	94800384 	addi	r18,r18,14
   40dbc:	8080000b 	ldhu	r2,0(r16)
   40dc0:	8c7fffc4 	addi	r17,r17,-1
   40dc4:	813ffd04 	addi	r4,r16,-12
   40dc8:	b080042e 	bgeu	r22,r2,40ddc <_fwalk+0x78>
   40dcc:	9080000f 	ldh	r2,0(r18)
   40dd0:	14c00226 	beq	r2,r19,40ddc <_fwalk+0x78>
   40dd4:	a83ee83a 	callr	r21
   40dd8:	b8aeb03a 	or	r23,r23,r2
   40ddc:	84001a04 	addi	r16,r16,104
   40de0:	94801a04 	addi	r18,r18,104
   40de4:	8cfff51e 	bne	r17,r19,40dbc <_fwalk+0x58>
   40de8:	a5000017 	ldw	r20,0(r20)
   40dec:	a03fed1e 	bne	r20,zero,40da4 <_fwalk+0x40>
   40df0:	b805883a 	mov	r2,r23
   40df4:	dfc00817 	ldw	ra,32(sp)
   40df8:	ddc00717 	ldw	r23,28(sp)
   40dfc:	dd800617 	ldw	r22,24(sp)
   40e00:	dd400517 	ldw	r21,20(sp)
   40e04:	dd000417 	ldw	r20,16(sp)
   40e08:	dcc00317 	ldw	r19,12(sp)
   40e0c:	dc800217 	ldw	r18,8(sp)
   40e10:	dc400117 	ldw	r17,4(sp)
   40e14:	dc000017 	ldw	r16,0(sp)
   40e18:	dec00904 	addi	sp,sp,36
   40e1c:	f800283a 	ret
   40e20:	002f883a 	mov	r23,zero
   40e24:	003ff206 	br	40df0 <_fwalk+0x8c>

00040e28 <_fwalk_reent>:
   40e28:	defff704 	addi	sp,sp,-36
   40e2c:	dd000415 	stw	r20,16(sp)
   40e30:	dfc00815 	stw	ra,32(sp)
   40e34:	ddc00715 	stw	r23,28(sp)
   40e38:	dd800615 	stw	r22,24(sp)
   40e3c:	dd400515 	stw	r21,20(sp)
   40e40:	dcc00315 	stw	r19,12(sp)
   40e44:	dc800215 	stw	r18,8(sp)
   40e48:	dc400115 	stw	r17,4(sp)
   40e4c:	dc000015 	stw	r16,0(sp)
   40e50:	2500b804 	addi	r20,r4,736
   40e54:	a0002326 	beq	r20,zero,40ee4 <_fwalk_reent+0xbc>
   40e58:	282b883a 	mov	r21,r5
   40e5c:	2027883a 	mov	r19,r4
   40e60:	002f883a 	mov	r23,zero
   40e64:	05800044 	movi	r22,1
   40e68:	04bfffc4 	movi	r18,-1
   40e6c:	a4400117 	ldw	r17,4(r20)
   40e70:	a4000217 	ldw	r16,8(r20)
   40e74:	8c7fffc4 	addi	r17,r17,-1
   40e78:	88000c16 	blt	r17,zero,40eac <_fwalk_reent+0x84>
   40e7c:	84000304 	addi	r16,r16,12
   40e80:	8080000b 	ldhu	r2,0(r16)
   40e84:	8c7fffc4 	addi	r17,r17,-1
   40e88:	817ffd04 	addi	r5,r16,-12
   40e8c:	b080052e 	bgeu	r22,r2,40ea4 <_fwalk_reent+0x7c>
   40e90:	8080008f 	ldh	r2,2(r16)
   40e94:	9809883a 	mov	r4,r19
   40e98:	14800226 	beq	r2,r18,40ea4 <_fwalk_reent+0x7c>
   40e9c:	a83ee83a 	callr	r21
   40ea0:	b8aeb03a 	or	r23,r23,r2
   40ea4:	84001a04 	addi	r16,r16,104
   40ea8:	8cbff51e 	bne	r17,r18,40e80 <_fwalk_reent+0x58>
   40eac:	a5000017 	ldw	r20,0(r20)
   40eb0:	a03fee1e 	bne	r20,zero,40e6c <_fwalk_reent+0x44>
   40eb4:	b805883a 	mov	r2,r23
   40eb8:	dfc00817 	ldw	ra,32(sp)
   40ebc:	ddc00717 	ldw	r23,28(sp)
   40ec0:	dd800617 	ldw	r22,24(sp)
   40ec4:	dd400517 	ldw	r21,20(sp)
   40ec8:	dd000417 	ldw	r20,16(sp)
   40ecc:	dcc00317 	ldw	r19,12(sp)
   40ed0:	dc800217 	ldw	r18,8(sp)
   40ed4:	dc400117 	ldw	r17,4(sp)
   40ed8:	dc000017 	ldw	r16,0(sp)
   40edc:	dec00904 	addi	sp,sp,36
   40ee0:	f800283a 	ret
   40ee4:	002f883a 	mov	r23,zero
   40ee8:	003ff206 	br	40eb4 <_fwalk_reent+0x8c>

00040eec <_malloc_r>:
   40eec:	defff504 	addi	sp,sp,-44
   40ef0:	dc800315 	stw	r18,12(sp)
   40ef4:	dfc00a15 	stw	ra,40(sp)
   40ef8:	df000915 	stw	fp,36(sp)
   40efc:	ddc00815 	stw	r23,32(sp)
   40f00:	dd800715 	stw	r22,28(sp)
   40f04:	dd400615 	stw	r21,24(sp)
   40f08:	dd000515 	stw	r20,20(sp)
   40f0c:	dcc00415 	stw	r19,16(sp)
   40f10:	dc400215 	stw	r17,8(sp)
   40f14:	dc000115 	stw	r16,4(sp)
   40f18:	288002c4 	addi	r2,r5,11
   40f1c:	00c00584 	movi	r3,22
   40f20:	2025883a 	mov	r18,r4
   40f24:	18807f2e 	bgeu	r3,r2,41124 <_malloc_r+0x238>
   40f28:	047ffe04 	movi	r17,-8
   40f2c:	1462703a 	and	r17,r2,r17
   40f30:	8800a316 	blt	r17,zero,411c0 <_malloc_r+0x2d4>
   40f34:	8940a236 	bltu	r17,r5,411c0 <_malloc_r+0x2d4>
   40f38:	00437280 	call	43728 <__malloc_lock>
   40f3c:	00807dc4 	movi	r2,503
   40f40:	1441e92e 	bgeu	r2,r17,416e8 <_malloc_r+0x7fc>
   40f44:	8804d27a 	srli	r2,r17,9
   40f48:	1000a126 	beq	r2,zero,411d0 <_malloc_r+0x2e4>
   40f4c:	00c00104 	movi	r3,4
   40f50:	18811e36 	bltu	r3,r2,413cc <_malloc_r+0x4e0>
   40f54:	8804d1ba 	srli	r2,r17,6
   40f58:	12000e44 	addi	r8,r2,57
   40f5c:	11c00e04 	addi	r7,r2,56
   40f60:	4209883a 	add	r4,r8,r8
   40f64:	04c00134 	movhi	r19,4
   40f68:	2109883a 	add	r4,r4,r4
   40f6c:	9cd78604 	addi	r19,r19,24088
   40f70:	2109883a 	add	r4,r4,r4
   40f74:	9909883a 	add	r4,r19,r4
   40f78:	24000117 	ldw	r16,4(r4)
   40f7c:	213ffe04 	addi	r4,r4,-8
   40f80:	24009726 	beq	r4,r16,411e0 <_malloc_r+0x2f4>
   40f84:	80800117 	ldw	r2,4(r16)
   40f88:	01bfff04 	movi	r6,-4
   40f8c:	014003c4 	movi	r5,15
   40f90:	1184703a 	and	r2,r2,r6
   40f94:	1447c83a 	sub	r3,r2,r17
   40f98:	28c00716 	blt	r5,r3,40fb8 <_malloc_r+0xcc>
   40f9c:	1800920e 	bge	r3,zero,411e8 <_malloc_r+0x2fc>
   40fa0:	84000317 	ldw	r16,12(r16)
   40fa4:	24008e26 	beq	r4,r16,411e0 <_malloc_r+0x2f4>
   40fa8:	80800117 	ldw	r2,4(r16)
   40fac:	1184703a 	and	r2,r2,r6
   40fb0:	1447c83a 	sub	r3,r2,r17
   40fb4:	28fff90e 	bge	r5,r3,40f9c <_malloc_r+0xb0>
   40fb8:	3809883a 	mov	r4,r7
   40fbc:	01800134 	movhi	r6,4
   40fc0:	9c000417 	ldw	r16,16(r19)
   40fc4:	31978604 	addi	r6,r6,24088
   40fc8:	32000204 	addi	r8,r6,8
   40fcc:	82013426 	beq	r16,r8,414a0 <_malloc_r+0x5b4>
   40fd0:	80c00117 	ldw	r3,4(r16)
   40fd4:	00bfff04 	movi	r2,-4
   40fd8:	188e703a 	and	r7,r3,r2
   40fdc:	3c45c83a 	sub	r2,r7,r17
   40fe0:	00c003c4 	movi	r3,15
   40fe4:	18811f16 	blt	r3,r2,41464 <_malloc_r+0x578>
   40fe8:	32000515 	stw	r8,20(r6)
   40fec:	32000415 	stw	r8,16(r6)
   40ff0:	10007f0e 	bge	r2,zero,411f0 <_malloc_r+0x304>
   40ff4:	00807fc4 	movi	r2,511
   40ff8:	11c0fd36 	bltu	r2,r7,413f0 <_malloc_r+0x504>
   40ffc:	3806d0fa 	srli	r3,r7,3
   41000:	01c00044 	movi	r7,1
   41004:	30800117 	ldw	r2,4(r6)
   41008:	19400044 	addi	r5,r3,1
   4100c:	294b883a 	add	r5,r5,r5
   41010:	1807d0ba 	srai	r3,r3,2
   41014:	294b883a 	add	r5,r5,r5
   41018:	294b883a 	add	r5,r5,r5
   4101c:	298b883a 	add	r5,r5,r6
   41020:	38c6983a 	sll	r3,r7,r3
   41024:	29c00017 	ldw	r7,0(r5)
   41028:	2a7ffe04 	addi	r9,r5,-8
   4102c:	1886b03a 	or	r3,r3,r2
   41030:	82400315 	stw	r9,12(r16)
   41034:	81c00215 	stw	r7,8(r16)
   41038:	30c00115 	stw	r3,4(r6)
   4103c:	2c000015 	stw	r16,0(r5)
   41040:	3c000315 	stw	r16,12(r7)
   41044:	2005d0ba 	srai	r2,r4,2
   41048:	01400044 	movi	r5,1
   4104c:	288a983a 	sll	r5,r5,r2
   41050:	19406f36 	bltu	r3,r5,41210 <_malloc_r+0x324>
   41054:	28c4703a 	and	r2,r5,r3
   41058:	10000a1e 	bne	r2,zero,41084 <_malloc_r+0x198>
   4105c:	00bfff04 	movi	r2,-4
   41060:	294b883a 	add	r5,r5,r5
   41064:	2088703a 	and	r4,r4,r2
   41068:	28c4703a 	and	r2,r5,r3
   4106c:	21000104 	addi	r4,r4,4
   41070:	1000041e 	bne	r2,zero,41084 <_malloc_r+0x198>
   41074:	294b883a 	add	r5,r5,r5
   41078:	28c4703a 	and	r2,r5,r3
   4107c:	21000104 	addi	r4,r4,4
   41080:	103ffc26 	beq	r2,zero,41074 <_malloc_r+0x188>
   41084:	02bfff04 	movi	r10,-4
   41088:	024003c4 	movi	r9,15
   4108c:	21800044 	addi	r6,r4,1
   41090:	318d883a 	add	r6,r6,r6
   41094:	318d883a 	add	r6,r6,r6
   41098:	318d883a 	add	r6,r6,r6
   4109c:	998d883a 	add	r6,r19,r6
   410a0:	333ffe04 	addi	r12,r6,-8
   410a4:	2017883a 	mov	r11,r4
   410a8:	31800104 	addi	r6,r6,4
   410ac:	34000017 	ldw	r16,0(r6)
   410b0:	31fffd04 	addi	r7,r6,-12
   410b4:	81c0041e 	bne	r16,r7,410c8 <_malloc_r+0x1dc>
   410b8:	0000fb06 	br	414a8 <_malloc_r+0x5bc>
   410bc:	1801030e 	bge	r3,zero,414cc <_malloc_r+0x5e0>
   410c0:	84000317 	ldw	r16,12(r16)
   410c4:	81c0f826 	beq	r16,r7,414a8 <_malloc_r+0x5bc>
   410c8:	80800117 	ldw	r2,4(r16)
   410cc:	1284703a 	and	r2,r2,r10
   410d0:	1447c83a 	sub	r3,r2,r17
   410d4:	48fff90e 	bge	r9,r3,410bc <_malloc_r+0x1d0>
   410d8:	80800317 	ldw	r2,12(r16)
   410dc:	81000217 	ldw	r4,8(r16)
   410e0:	89400054 	ori	r5,r17,1
   410e4:	81400115 	stw	r5,4(r16)
   410e8:	20800315 	stw	r2,12(r4)
   410ec:	11000215 	stw	r4,8(r2)
   410f0:	8463883a 	add	r17,r16,r17
   410f4:	9c400515 	stw	r17,20(r19)
   410f8:	9c400415 	stw	r17,16(r19)
   410fc:	18800054 	ori	r2,r3,1
   41100:	88800115 	stw	r2,4(r17)
   41104:	8a000315 	stw	r8,12(r17)
   41108:	8a000215 	stw	r8,8(r17)
   4110c:	88e3883a 	add	r17,r17,r3
   41110:	88c00015 	stw	r3,0(r17)
   41114:	9009883a 	mov	r4,r18
   41118:	004374c0 	call	4374c <__malloc_unlock>
   4111c:	80800204 	addi	r2,r16,8
   41120:	00001b06 	br	41190 <_malloc_r+0x2a4>
   41124:	04400404 	movi	r17,16
   41128:	89402536 	bltu	r17,r5,411c0 <_malloc_r+0x2d4>
   4112c:	00437280 	call	43728 <__malloc_lock>
   41130:	00800184 	movi	r2,6
   41134:	01000084 	movi	r4,2
   41138:	04c00134 	movhi	r19,4
   4113c:	1085883a 	add	r2,r2,r2
   41140:	9cd78604 	addi	r19,r19,24088
   41144:	1085883a 	add	r2,r2,r2
   41148:	9885883a 	add	r2,r19,r2
   4114c:	14000117 	ldw	r16,4(r2)
   41150:	10fffe04 	addi	r3,r2,-8
   41154:	80c0d926 	beq	r16,r3,414bc <_malloc_r+0x5d0>
   41158:	80c00117 	ldw	r3,4(r16)
   4115c:	81000317 	ldw	r4,12(r16)
   41160:	00bfff04 	movi	r2,-4
   41164:	1884703a 	and	r2,r3,r2
   41168:	81400217 	ldw	r5,8(r16)
   4116c:	8085883a 	add	r2,r16,r2
   41170:	10c00117 	ldw	r3,4(r2)
   41174:	29000315 	stw	r4,12(r5)
   41178:	21400215 	stw	r5,8(r4)
   4117c:	18c00054 	ori	r3,r3,1
   41180:	10c00115 	stw	r3,4(r2)
   41184:	9009883a 	mov	r4,r18
   41188:	004374c0 	call	4374c <__malloc_unlock>
   4118c:	80800204 	addi	r2,r16,8
   41190:	dfc00a17 	ldw	ra,40(sp)
   41194:	df000917 	ldw	fp,36(sp)
   41198:	ddc00817 	ldw	r23,32(sp)
   4119c:	dd800717 	ldw	r22,28(sp)
   411a0:	dd400617 	ldw	r21,24(sp)
   411a4:	dd000517 	ldw	r20,20(sp)
   411a8:	dcc00417 	ldw	r19,16(sp)
   411ac:	dc800317 	ldw	r18,12(sp)
   411b0:	dc400217 	ldw	r17,8(sp)
   411b4:	dc000117 	ldw	r16,4(sp)
   411b8:	dec00b04 	addi	sp,sp,44
   411bc:	f800283a 	ret
   411c0:	00800304 	movi	r2,12
   411c4:	90800015 	stw	r2,0(r18)
   411c8:	0005883a 	mov	r2,zero
   411cc:	003ff006 	br	41190 <_malloc_r+0x2a4>
   411d0:	01002004 	movi	r4,128
   411d4:	02001004 	movi	r8,64
   411d8:	01c00fc4 	movi	r7,63
   411dc:	003f6106 	br	40f64 <_malloc_r+0x78>
   411e0:	4009883a 	mov	r4,r8
   411e4:	003f7506 	br	40fbc <_malloc_r+0xd0>
   411e8:	81000317 	ldw	r4,12(r16)
   411ec:	003fde06 	br	41168 <_malloc_r+0x27c>
   411f0:	81c5883a 	add	r2,r16,r7
   411f4:	11400117 	ldw	r5,4(r2)
   411f8:	9009883a 	mov	r4,r18
   411fc:	29400054 	ori	r5,r5,1
   41200:	11400115 	stw	r5,4(r2)
   41204:	004374c0 	call	4374c <__malloc_unlock>
   41208:	80800204 	addi	r2,r16,8
   4120c:	003fe006 	br	41190 <_malloc_r+0x2a4>
   41210:	9c000217 	ldw	r16,8(r19)
   41214:	00bfff04 	movi	r2,-4
   41218:	85800117 	ldw	r22,4(r16)
   4121c:	b0ac703a 	and	r22,r22,r2
   41220:	b4400336 	bltu	r22,r17,41230 <_malloc_r+0x344>
   41224:	b445c83a 	sub	r2,r22,r17
   41228:	00c003c4 	movi	r3,15
   4122c:	18805d16 	blt	r3,r2,413a4 <_malloc_r+0x4b8>
   41230:	05c00134 	movhi	r23,4
   41234:	00800174 	movhi	r2,5
   41238:	10a3b504 	addi	r2,r2,-28972
   4123c:	bddd0c04 	addi	r23,r23,29744
   41240:	15400017 	ldw	r21,0(r2)
   41244:	b8c00017 	ldw	r3,0(r23)
   41248:	00bfffc4 	movi	r2,-1
   4124c:	858d883a 	add	r6,r16,r22
   41250:	8d6b883a 	add	r21,r17,r21
   41254:	1880ea26 	beq	r3,r2,41600 <_malloc_r+0x714>
   41258:	ad4403c4 	addi	r21,r21,4111
   4125c:	00bc0004 	movi	r2,-4096
   41260:	a8aa703a 	and	r21,r21,r2
   41264:	a80b883a 	mov	r5,r21
   41268:	9009883a 	mov	r4,r18
   4126c:	d9800015 	stw	r6,0(sp)
   41270:	004210c0 	call	4210c <_sbrk_r>
   41274:	1029883a 	mov	r20,r2
   41278:	00bfffc4 	movi	r2,-1
   4127c:	d9800017 	ldw	r6,0(sp)
   41280:	a080e826 	beq	r20,r2,41624 <_malloc_r+0x738>
   41284:	a180a636 	bltu	r20,r6,41520 <_malloc_r+0x634>
   41288:	07000174 	movhi	fp,5
   4128c:	e723be04 	addi	fp,fp,-28936
   41290:	e0800017 	ldw	r2,0(fp)
   41294:	a887883a 	add	r3,r21,r2
   41298:	e0c00015 	stw	r3,0(fp)
   4129c:	3500e626 	beq	r6,r20,41638 <_malloc_r+0x74c>
   412a0:	b9000017 	ldw	r4,0(r23)
   412a4:	00bfffc4 	movi	r2,-1
   412a8:	2080ee26 	beq	r4,r2,41664 <_malloc_r+0x778>
   412ac:	a185c83a 	sub	r2,r20,r6
   412b0:	10c5883a 	add	r2,r2,r3
   412b4:	e0800015 	stw	r2,0(fp)
   412b8:	a0c001cc 	andi	r3,r20,7
   412bc:	1800bc26 	beq	r3,zero,415b0 <_malloc_r+0x6c4>
   412c0:	a0e9c83a 	sub	r20,r20,r3
   412c4:	00840204 	movi	r2,4104
   412c8:	a5000204 	addi	r20,r20,8
   412cc:	10c7c83a 	sub	r3,r2,r3
   412d0:	a545883a 	add	r2,r20,r21
   412d4:	1083ffcc 	andi	r2,r2,4095
   412d8:	18abc83a 	sub	r21,r3,r2
   412dc:	a80b883a 	mov	r5,r21
   412e0:	9009883a 	mov	r4,r18
   412e4:	004210c0 	call	4210c <_sbrk_r>
   412e8:	00ffffc4 	movi	r3,-1
   412ec:	10c0e126 	beq	r2,r3,41674 <_malloc_r+0x788>
   412f0:	1505c83a 	sub	r2,r2,r20
   412f4:	1545883a 	add	r2,r2,r21
   412f8:	10800054 	ori	r2,r2,1
   412fc:	e0c00017 	ldw	r3,0(fp)
   41300:	9d000215 	stw	r20,8(r19)
   41304:	a0800115 	stw	r2,4(r20)
   41308:	a8c7883a 	add	r3,r21,r3
   4130c:	e0c00015 	stw	r3,0(fp)
   41310:	84c00e26 	beq	r16,r19,4134c <_malloc_r+0x460>
   41314:	018003c4 	movi	r6,15
   41318:	3580a72e 	bgeu	r6,r22,415b8 <_malloc_r+0x6cc>
   4131c:	81400117 	ldw	r5,4(r16)
   41320:	013ffe04 	movi	r4,-8
   41324:	b0bffd04 	addi	r2,r22,-12
   41328:	1104703a 	and	r2,r2,r4
   4132c:	2900004c 	andi	r4,r5,1
   41330:	2088b03a 	or	r4,r4,r2
   41334:	81000115 	stw	r4,4(r16)
   41338:	01400144 	movi	r5,5
   4133c:	8089883a 	add	r4,r16,r2
   41340:	21400115 	stw	r5,4(r4)
   41344:	21400215 	stw	r5,8(r4)
   41348:	3080cd36 	bltu	r6,r2,41680 <_malloc_r+0x794>
   4134c:	00800174 	movhi	r2,5
   41350:	10a3b404 	addi	r2,r2,-28976
   41354:	11000017 	ldw	r4,0(r2)
   41358:	20c0012e 	bgeu	r4,r3,41360 <_malloc_r+0x474>
   4135c:	10c00015 	stw	r3,0(r2)
   41360:	00800174 	movhi	r2,5
   41364:	10a3b304 	addi	r2,r2,-28980
   41368:	11000017 	ldw	r4,0(r2)
   4136c:	9c000217 	ldw	r16,8(r19)
   41370:	20c0012e 	bgeu	r4,r3,41378 <_malloc_r+0x48c>
   41374:	10c00015 	stw	r3,0(r2)
   41378:	80c00117 	ldw	r3,4(r16)
   4137c:	00bfff04 	movi	r2,-4
   41380:	1886703a 	and	r3,r3,r2
   41384:	1c45c83a 	sub	r2,r3,r17
   41388:	1c400236 	bltu	r3,r17,41394 <_malloc_r+0x4a8>
   4138c:	00c003c4 	movi	r3,15
   41390:	18800416 	blt	r3,r2,413a4 <_malloc_r+0x4b8>
   41394:	9009883a 	mov	r4,r18
   41398:	004374c0 	call	4374c <__malloc_unlock>
   4139c:	0005883a 	mov	r2,zero
   413a0:	003f7b06 	br	41190 <_malloc_r+0x2a4>
   413a4:	88c00054 	ori	r3,r17,1
   413a8:	80c00115 	stw	r3,4(r16)
   413ac:	8463883a 	add	r17,r16,r17
   413b0:	10800054 	ori	r2,r2,1
   413b4:	9c400215 	stw	r17,8(r19)
   413b8:	88800115 	stw	r2,4(r17)
   413bc:	9009883a 	mov	r4,r18
   413c0:	004374c0 	call	4374c <__malloc_unlock>
   413c4:	80800204 	addi	r2,r16,8
   413c8:	003f7106 	br	41190 <_malloc_r+0x2a4>
   413cc:	00c00504 	movi	r3,20
   413d0:	18804a2e 	bgeu	r3,r2,414fc <_malloc_r+0x610>
   413d4:	00c01504 	movi	r3,84
   413d8:	18806e36 	bltu	r3,r2,41594 <_malloc_r+0x6a8>
   413dc:	8804d33a 	srli	r2,r17,12
   413e0:	12001bc4 	addi	r8,r2,111
   413e4:	11c01b84 	addi	r7,r2,110
   413e8:	4209883a 	add	r4,r8,r8
   413ec:	003edd06 	br	40f64 <_malloc_r+0x78>
   413f0:	3804d27a 	srli	r2,r7,9
   413f4:	00c00104 	movi	r3,4
   413f8:	1880442e 	bgeu	r3,r2,4150c <_malloc_r+0x620>
   413fc:	00c00504 	movi	r3,20
   41400:	18808136 	bltu	r3,r2,41608 <_malloc_r+0x71c>
   41404:	11401704 	addi	r5,r2,92
   41408:	10c016c4 	addi	r3,r2,91
   4140c:	294b883a 	add	r5,r5,r5
   41410:	294b883a 	add	r5,r5,r5
   41414:	294b883a 	add	r5,r5,r5
   41418:	994b883a 	add	r5,r19,r5
   4141c:	28800017 	ldw	r2,0(r5)
   41420:	01800134 	movhi	r6,4
   41424:	297ffe04 	addi	r5,r5,-8
   41428:	31978604 	addi	r6,r6,24088
   4142c:	28806526 	beq	r5,r2,415c4 <_malloc_r+0x6d8>
   41430:	01bfff04 	movi	r6,-4
   41434:	10c00117 	ldw	r3,4(r2)
   41438:	1986703a 	and	r3,r3,r6
   4143c:	38c0022e 	bgeu	r7,r3,41448 <_malloc_r+0x55c>
   41440:	10800217 	ldw	r2,8(r2)
   41444:	28bffb1e 	bne	r5,r2,41434 <_malloc_r+0x548>
   41448:	11400317 	ldw	r5,12(r2)
   4144c:	98c00117 	ldw	r3,4(r19)
   41450:	81400315 	stw	r5,12(r16)
   41454:	80800215 	stw	r2,8(r16)
   41458:	2c000215 	stw	r16,8(r5)
   4145c:	14000315 	stw	r16,12(r2)
   41460:	003ef806 	br	41044 <_malloc_r+0x158>
   41464:	88c00054 	ori	r3,r17,1
   41468:	80c00115 	stw	r3,4(r16)
   4146c:	8463883a 	add	r17,r16,r17
   41470:	34400515 	stw	r17,20(r6)
   41474:	34400415 	stw	r17,16(r6)
   41478:	10c00054 	ori	r3,r2,1
   4147c:	8a000315 	stw	r8,12(r17)
   41480:	8a000215 	stw	r8,8(r17)
   41484:	88c00115 	stw	r3,4(r17)
   41488:	88a3883a 	add	r17,r17,r2
   4148c:	88800015 	stw	r2,0(r17)
   41490:	9009883a 	mov	r4,r18
   41494:	004374c0 	call	4374c <__malloc_unlock>
   41498:	80800204 	addi	r2,r16,8
   4149c:	003f3c06 	br	41190 <_malloc_r+0x2a4>
   414a0:	30c00117 	ldw	r3,4(r6)
   414a4:	003ee706 	br	41044 <_malloc_r+0x158>
   414a8:	5ac00044 	addi	r11,r11,1
   414ac:	588000cc 	andi	r2,r11,3
   414b0:	31800204 	addi	r6,r6,8
   414b4:	103efd1e 	bne	r2,zero,410ac <_malloc_r+0x1c0>
   414b8:	00002406 	br	4154c <_malloc_r+0x660>
   414bc:	14000317 	ldw	r16,12(r2)
   414c0:	143f251e 	bne	r2,r16,41158 <_malloc_r+0x26c>
   414c4:	21000084 	addi	r4,r4,2
   414c8:	003ebc06 	br	40fbc <_malloc_r+0xd0>
   414cc:	8085883a 	add	r2,r16,r2
   414d0:	10c00117 	ldw	r3,4(r2)
   414d4:	81000317 	ldw	r4,12(r16)
   414d8:	81400217 	ldw	r5,8(r16)
   414dc:	18c00054 	ori	r3,r3,1
   414e0:	10c00115 	stw	r3,4(r2)
   414e4:	29000315 	stw	r4,12(r5)
   414e8:	21400215 	stw	r5,8(r4)
   414ec:	9009883a 	mov	r4,r18
   414f0:	004374c0 	call	4374c <__malloc_unlock>
   414f4:	80800204 	addi	r2,r16,8
   414f8:	003f2506 	br	41190 <_malloc_r+0x2a4>
   414fc:	12001704 	addi	r8,r2,92
   41500:	11c016c4 	addi	r7,r2,91
   41504:	4209883a 	add	r4,r8,r8
   41508:	003e9606 	br	40f64 <_malloc_r+0x78>
   4150c:	3804d1ba 	srli	r2,r7,6
   41510:	11400e44 	addi	r5,r2,57
   41514:	10c00e04 	addi	r3,r2,56
   41518:	294b883a 	add	r5,r5,r5
   4151c:	003fbc06 	br	41410 <_malloc_r+0x524>
   41520:	84ff5926 	beq	r16,r19,41288 <_malloc_r+0x39c>
   41524:	00800134 	movhi	r2,4
   41528:	10978604 	addi	r2,r2,24088
   4152c:	14000217 	ldw	r16,8(r2)
   41530:	00bfff04 	movi	r2,-4
   41534:	80c00117 	ldw	r3,4(r16)
   41538:	1886703a 	and	r3,r3,r2
   4153c:	003f9106 	br	41384 <_malloc_r+0x498>
   41540:	60800217 	ldw	r2,8(r12)
   41544:	213fffc4 	addi	r4,r4,-1
   41548:	1300651e 	bne	r2,r12,416e0 <_malloc_r+0x7f4>
   4154c:	208000cc 	andi	r2,r4,3
   41550:	633ffe04 	addi	r12,r12,-8
   41554:	103ffa1e 	bne	r2,zero,41540 <_malloc_r+0x654>
   41558:	98800117 	ldw	r2,4(r19)
   4155c:	0146303a 	nor	r3,zero,r5
   41560:	1884703a 	and	r2,r3,r2
   41564:	98800115 	stw	r2,4(r19)
   41568:	294b883a 	add	r5,r5,r5
   4156c:	117f2836 	bltu	r2,r5,41210 <_malloc_r+0x324>
   41570:	283f2726 	beq	r5,zero,41210 <_malloc_r+0x324>
   41574:	2886703a 	and	r3,r5,r2
   41578:	5809883a 	mov	r4,r11
   4157c:	183ec31e 	bne	r3,zero,4108c <_malloc_r+0x1a0>
   41580:	294b883a 	add	r5,r5,r5
   41584:	2886703a 	and	r3,r5,r2
   41588:	21000104 	addi	r4,r4,4
   4158c:	183ffc26 	beq	r3,zero,41580 <_malloc_r+0x694>
   41590:	003ebe06 	br	4108c <_malloc_r+0x1a0>
   41594:	00c05504 	movi	r3,340
   41598:	18801236 	bltu	r3,r2,415e4 <_malloc_r+0x6f8>
   4159c:	8804d3fa 	srli	r2,r17,15
   415a0:	12001e04 	addi	r8,r2,120
   415a4:	11c01dc4 	addi	r7,r2,119
   415a8:	4209883a 	add	r4,r8,r8
   415ac:	003e6d06 	br	40f64 <_malloc_r+0x78>
   415b0:	00c40004 	movi	r3,4096
   415b4:	003f4606 	br	412d0 <_malloc_r+0x3e4>
   415b8:	00800044 	movi	r2,1
   415bc:	a0800115 	stw	r2,4(r20)
   415c0:	003f7406 	br	41394 <_malloc_r+0x4a8>
   415c4:	1805d0ba 	srai	r2,r3,2
   415c8:	01c00044 	movi	r7,1
   415cc:	30c00117 	ldw	r3,4(r6)
   415d0:	388e983a 	sll	r7,r7,r2
   415d4:	2805883a 	mov	r2,r5
   415d8:	38c6b03a 	or	r3,r7,r3
   415dc:	30c00115 	stw	r3,4(r6)
   415e0:	003f9b06 	br	41450 <_malloc_r+0x564>
   415e4:	00c15504 	movi	r3,1364
   415e8:	18801a36 	bltu	r3,r2,41654 <_malloc_r+0x768>
   415ec:	8804d4ba 	srli	r2,r17,18
   415f0:	12001f44 	addi	r8,r2,125
   415f4:	11c01f04 	addi	r7,r2,124
   415f8:	4209883a 	add	r4,r8,r8
   415fc:	003e5906 	br	40f64 <_malloc_r+0x78>
   41600:	ad400404 	addi	r21,r21,16
   41604:	003f1706 	br	41264 <_malloc_r+0x378>
   41608:	00c01504 	movi	r3,84
   4160c:	18802336 	bltu	r3,r2,4169c <_malloc_r+0x7b0>
   41610:	3804d33a 	srli	r2,r7,12
   41614:	11401bc4 	addi	r5,r2,111
   41618:	10c01b84 	addi	r3,r2,110
   4161c:	294b883a 	add	r5,r5,r5
   41620:	003f7b06 	br	41410 <_malloc_r+0x524>
   41624:	9c000217 	ldw	r16,8(r19)
   41628:	00bfff04 	movi	r2,-4
   4162c:	80c00117 	ldw	r3,4(r16)
   41630:	1886703a 	and	r3,r3,r2
   41634:	003f5306 	br	41384 <_malloc_r+0x498>
   41638:	3083ffcc 	andi	r2,r6,4095
   4163c:	103f181e 	bne	r2,zero,412a0 <_malloc_r+0x3b4>
   41640:	99000217 	ldw	r4,8(r19)
   41644:	b545883a 	add	r2,r22,r21
   41648:	10800054 	ori	r2,r2,1
   4164c:	20800115 	stw	r2,4(r4)
   41650:	003f3e06 	br	4134c <_malloc_r+0x460>
   41654:	01003f84 	movi	r4,254
   41658:	02001fc4 	movi	r8,127
   4165c:	01c01f84 	movi	r7,126
   41660:	003e4006 	br	40f64 <_malloc_r+0x78>
   41664:	00800134 	movhi	r2,4
   41668:	109d0c04 	addi	r2,r2,29744
   4166c:	15000015 	stw	r20,0(r2)
   41670:	003f1106 	br	412b8 <_malloc_r+0x3cc>
   41674:	00800044 	movi	r2,1
   41678:	002b883a 	mov	r21,zero
   4167c:	003f1f06 	br	412fc <_malloc_r+0x410>
   41680:	81400204 	addi	r5,r16,8
   41684:	9009883a 	mov	r4,r18
   41688:	00429740 	call	42974 <_free_r>
   4168c:	00800174 	movhi	r2,5
   41690:	10a3be04 	addi	r2,r2,-28936
   41694:	10c00017 	ldw	r3,0(r2)
   41698:	003f2c06 	br	4134c <_malloc_r+0x460>
   4169c:	00c05504 	movi	r3,340
   416a0:	18800536 	bltu	r3,r2,416b8 <_malloc_r+0x7cc>
   416a4:	3804d3fa 	srli	r2,r7,15
   416a8:	11401e04 	addi	r5,r2,120
   416ac:	10c01dc4 	addi	r3,r2,119
   416b0:	294b883a 	add	r5,r5,r5
   416b4:	003f5606 	br	41410 <_malloc_r+0x524>
   416b8:	00c15504 	movi	r3,1364
   416bc:	18800536 	bltu	r3,r2,416d4 <_malloc_r+0x7e8>
   416c0:	3804d4ba 	srli	r2,r7,18
   416c4:	11401f44 	addi	r5,r2,125
   416c8:	10c01f04 	addi	r3,r2,124
   416cc:	294b883a 	add	r5,r5,r5
   416d0:	003f4f06 	br	41410 <_malloc_r+0x524>
   416d4:	01403f84 	movi	r5,254
   416d8:	00c01f84 	movi	r3,126
   416dc:	003f4c06 	br	41410 <_malloc_r+0x524>
   416e0:	98800117 	ldw	r2,4(r19)
   416e4:	003fa006 	br	41568 <_malloc_r+0x67c>
   416e8:	8808d0fa 	srli	r4,r17,3
   416ec:	20800044 	addi	r2,r4,1
   416f0:	1085883a 	add	r2,r2,r2
   416f4:	003e9006 	br	41138 <_malloc_r+0x24c>

000416f8 <memchr>:
   416f8:	208000cc 	andi	r2,r4,3
   416fc:	280f883a 	mov	r7,r5
   41700:	10003426 	beq	r2,zero,417d4 <memchr+0xdc>
   41704:	30bfffc4 	addi	r2,r6,-1
   41708:	30001a26 	beq	r6,zero,41774 <memchr+0x7c>
   4170c:	20c00003 	ldbu	r3,0(r4)
   41710:	29803fcc 	andi	r6,r5,255
   41714:	30c0051e 	bne	r6,r3,4172c <memchr+0x34>
   41718:	00001806 	br	4177c <memchr+0x84>
   4171c:	10001526 	beq	r2,zero,41774 <memchr+0x7c>
   41720:	20c00003 	ldbu	r3,0(r4)
   41724:	10bfffc4 	addi	r2,r2,-1
   41728:	30c01426 	beq	r6,r3,4177c <memchr+0x84>
   4172c:	21000044 	addi	r4,r4,1
   41730:	20c000cc 	andi	r3,r4,3
   41734:	183ff91e 	bne	r3,zero,4171c <memchr+0x24>
   41738:	020000c4 	movi	r8,3
   4173c:	40801136 	bltu	r8,r2,41784 <memchr+0x8c>
   41740:	10000c26 	beq	r2,zero,41774 <memchr+0x7c>
   41744:	20c00003 	ldbu	r3,0(r4)
   41748:	29403fcc 	andi	r5,r5,255
   4174c:	28c00b26 	beq	r5,r3,4177c <memchr+0x84>
   41750:	20c00044 	addi	r3,r4,1
   41754:	39803fcc 	andi	r6,r7,255
   41758:	2089883a 	add	r4,r4,r2
   4175c:	00000306 	br	4176c <memchr+0x74>
   41760:	18c00044 	addi	r3,r3,1
   41764:	197fffc3 	ldbu	r5,-1(r3)
   41768:	31400526 	beq	r6,r5,41780 <memchr+0x88>
   4176c:	1805883a 	mov	r2,r3
   41770:	20fffb1e 	bne	r4,r3,41760 <memchr+0x68>
   41774:	0005883a 	mov	r2,zero
   41778:	f800283a 	ret
   4177c:	2005883a 	mov	r2,r4
   41780:	f800283a 	ret
   41784:	28c03fcc 	andi	r3,r5,255
   41788:	1812923a 	slli	r9,r3,8
   4178c:	02ffbff4 	movhi	r11,65279
   41790:	02a02074 	movhi	r10,32897
   41794:	48d2b03a 	or	r9,r9,r3
   41798:	4806943a 	slli	r3,r9,16
   4179c:	5affbfc4 	addi	r11,r11,-257
   417a0:	52a02004 	addi	r10,r10,-32640
   417a4:	48d2b03a 	or	r9,r9,r3
   417a8:	20c00017 	ldw	r3,0(r4)
   417ac:	48c6f03a 	xor	r3,r9,r3
   417b0:	1acd883a 	add	r6,r3,r11
   417b4:	00c6303a 	nor	r3,zero,r3
   417b8:	30c6703a 	and	r3,r6,r3
   417bc:	1a86703a 	and	r3,r3,r10
   417c0:	183fe01e 	bne	r3,zero,41744 <memchr+0x4c>
   417c4:	10bfff04 	addi	r2,r2,-4
   417c8:	21000104 	addi	r4,r4,4
   417cc:	40bff636 	bltu	r8,r2,417a8 <memchr+0xb0>
   417d0:	003fdb06 	br	41740 <memchr+0x48>
   417d4:	3005883a 	mov	r2,r6
   417d8:	003fd706 	br	41738 <memchr+0x40>

000417dc <memcpy>:
   417dc:	defffd04 	addi	sp,sp,-12
   417e0:	dfc00215 	stw	ra,8(sp)
   417e4:	dc400115 	stw	r17,4(sp)
   417e8:	dc000015 	stw	r16,0(sp)
   417ec:	00c003c4 	movi	r3,15
   417f0:	2005883a 	mov	r2,r4
   417f4:	1980452e 	bgeu	r3,r6,4190c <memcpy+0x130>
   417f8:	2906b03a 	or	r3,r5,r4
   417fc:	18c000cc 	andi	r3,r3,3
   41800:	1800441e 	bne	r3,zero,41914 <memcpy+0x138>
   41804:	347ffc04 	addi	r17,r6,-16
   41808:	8822d13a 	srli	r17,r17,4
   4180c:	28c00104 	addi	r3,r5,4
   41810:	23400104 	addi	r13,r4,4
   41814:	8820913a 	slli	r16,r17,4
   41818:	2b000204 	addi	r12,r5,8
   4181c:	22c00204 	addi	r11,r4,8
   41820:	84000504 	addi	r16,r16,20
   41824:	2a800304 	addi	r10,r5,12
   41828:	22400304 	addi	r9,r4,12
   4182c:	2c21883a 	add	r16,r5,r16
   41830:	2811883a 	mov	r8,r5
   41834:	200f883a 	mov	r7,r4
   41838:	41000017 	ldw	r4,0(r8)
   4183c:	1fc00017 	ldw	ra,0(r3)
   41840:	63c00017 	ldw	r15,0(r12)
   41844:	39000015 	stw	r4,0(r7)
   41848:	53800017 	ldw	r14,0(r10)
   4184c:	6fc00015 	stw	ra,0(r13)
   41850:	5bc00015 	stw	r15,0(r11)
   41854:	4b800015 	stw	r14,0(r9)
   41858:	18c00404 	addi	r3,r3,16
   4185c:	39c00404 	addi	r7,r7,16
   41860:	42000404 	addi	r8,r8,16
   41864:	6b400404 	addi	r13,r13,16
   41868:	63000404 	addi	r12,r12,16
   4186c:	5ac00404 	addi	r11,r11,16
   41870:	52800404 	addi	r10,r10,16
   41874:	4a400404 	addi	r9,r9,16
   41878:	1c3fef1e 	bne	r3,r16,41838 <memcpy+0x5c>
   4187c:	89c00044 	addi	r7,r17,1
   41880:	380e913a 	slli	r7,r7,4
   41884:	310003cc 	andi	r4,r6,15
   41888:	02c000c4 	movi	r11,3
   4188c:	11c7883a 	add	r3,r2,r7
   41890:	29cb883a 	add	r5,r5,r7
   41894:	5900212e 	bgeu	r11,r4,4191c <memcpy+0x140>
   41898:	1813883a 	mov	r9,r3
   4189c:	2811883a 	mov	r8,r5
   418a0:	200f883a 	mov	r7,r4
   418a4:	42800017 	ldw	r10,0(r8)
   418a8:	4a400104 	addi	r9,r9,4
   418ac:	39ffff04 	addi	r7,r7,-4
   418b0:	4abfff15 	stw	r10,-4(r9)
   418b4:	42000104 	addi	r8,r8,4
   418b8:	59fffa36 	bltu	r11,r7,418a4 <memcpy+0xc8>
   418bc:	213fff04 	addi	r4,r4,-4
   418c0:	2008d0ba 	srli	r4,r4,2
   418c4:	318000cc 	andi	r6,r6,3
   418c8:	21000044 	addi	r4,r4,1
   418cc:	2109883a 	add	r4,r4,r4
   418d0:	2109883a 	add	r4,r4,r4
   418d4:	1907883a 	add	r3,r3,r4
   418d8:	290b883a 	add	r5,r5,r4
   418dc:	30000626 	beq	r6,zero,418f8 <memcpy+0x11c>
   418e0:	198d883a 	add	r6,r3,r6
   418e4:	29c00003 	ldbu	r7,0(r5)
   418e8:	18c00044 	addi	r3,r3,1
   418ec:	29400044 	addi	r5,r5,1
   418f0:	19ffffc5 	stb	r7,-1(r3)
   418f4:	19bffb1e 	bne	r3,r6,418e4 <memcpy+0x108>
   418f8:	dfc00217 	ldw	ra,8(sp)
   418fc:	dc400117 	ldw	r17,4(sp)
   41900:	dc000017 	ldw	r16,0(sp)
   41904:	dec00304 	addi	sp,sp,12
   41908:	f800283a 	ret
   4190c:	2007883a 	mov	r3,r4
   41910:	003ff206 	br	418dc <memcpy+0x100>
   41914:	2007883a 	mov	r3,r4
   41918:	003ff106 	br	418e0 <memcpy+0x104>
   4191c:	200d883a 	mov	r6,r4
   41920:	003fee06 	br	418dc <memcpy+0x100>

00041924 <memmove>:
   41924:	2005883a 	mov	r2,r4
   41928:	29000b2e 	bgeu	r5,r4,41958 <memmove+0x34>
   4192c:	298f883a 	add	r7,r5,r6
   41930:	21c0092e 	bgeu	r4,r7,41958 <memmove+0x34>
   41934:	2187883a 	add	r3,r4,r6
   41938:	198bc83a 	sub	r5,r3,r6
   4193c:	30004826 	beq	r6,zero,41a60 <memmove+0x13c>
   41940:	39ffffc4 	addi	r7,r7,-1
   41944:	39000003 	ldbu	r4,0(r7)
   41948:	18ffffc4 	addi	r3,r3,-1
   4194c:	19000005 	stb	r4,0(r3)
   41950:	28fffb1e 	bne	r5,r3,41940 <memmove+0x1c>
   41954:	f800283a 	ret
   41958:	00c003c4 	movi	r3,15
   4195c:	1980412e 	bgeu	r3,r6,41a64 <memmove+0x140>
   41960:	2886b03a 	or	r3,r5,r2
   41964:	18c000cc 	andi	r3,r3,3
   41968:	1800401e 	bne	r3,zero,41a6c <memmove+0x148>
   4196c:	33fffc04 	addi	r15,r6,-16
   41970:	781ed13a 	srli	r15,r15,4
   41974:	28c00104 	addi	r3,r5,4
   41978:	13400104 	addi	r13,r2,4
   4197c:	781c913a 	slli	r14,r15,4
   41980:	2b000204 	addi	r12,r5,8
   41984:	12c00204 	addi	r11,r2,8
   41988:	73800504 	addi	r14,r14,20
   4198c:	2a800304 	addi	r10,r5,12
   41990:	12400304 	addi	r9,r2,12
   41994:	2b9d883a 	add	r14,r5,r14
   41998:	2811883a 	mov	r8,r5
   4199c:	100f883a 	mov	r7,r2
   419a0:	41000017 	ldw	r4,0(r8)
   419a4:	39c00404 	addi	r7,r7,16
   419a8:	18c00404 	addi	r3,r3,16
   419ac:	393ffc15 	stw	r4,-16(r7)
   419b0:	193ffc17 	ldw	r4,-16(r3)
   419b4:	6b400404 	addi	r13,r13,16
   419b8:	5ac00404 	addi	r11,r11,16
   419bc:	693ffc15 	stw	r4,-16(r13)
   419c0:	61000017 	ldw	r4,0(r12)
   419c4:	4a400404 	addi	r9,r9,16
   419c8:	42000404 	addi	r8,r8,16
   419cc:	593ffc15 	stw	r4,-16(r11)
   419d0:	51000017 	ldw	r4,0(r10)
   419d4:	63000404 	addi	r12,r12,16
   419d8:	52800404 	addi	r10,r10,16
   419dc:	493ffc15 	stw	r4,-16(r9)
   419e0:	1bbfef1e 	bne	r3,r14,419a0 <memmove+0x7c>
   419e4:	79000044 	addi	r4,r15,1
   419e8:	2008913a 	slli	r4,r4,4
   419ec:	328003cc 	andi	r10,r6,15
   419f0:	02c000c4 	movi	r11,3
   419f4:	1107883a 	add	r3,r2,r4
   419f8:	290b883a 	add	r5,r5,r4
   419fc:	5a801e2e 	bgeu	r11,r10,41a78 <memmove+0x154>
   41a00:	1813883a 	mov	r9,r3
   41a04:	2811883a 	mov	r8,r5
   41a08:	500f883a 	mov	r7,r10
   41a0c:	41000017 	ldw	r4,0(r8)
   41a10:	4a400104 	addi	r9,r9,4
   41a14:	39ffff04 	addi	r7,r7,-4
   41a18:	493fff15 	stw	r4,-4(r9)
   41a1c:	42000104 	addi	r8,r8,4
   41a20:	59fffa36 	bltu	r11,r7,41a0c <memmove+0xe8>
   41a24:	513fff04 	addi	r4,r10,-4
   41a28:	2008d0ba 	srli	r4,r4,2
   41a2c:	318000cc 	andi	r6,r6,3
   41a30:	21000044 	addi	r4,r4,1
   41a34:	2109883a 	add	r4,r4,r4
   41a38:	2109883a 	add	r4,r4,r4
   41a3c:	1907883a 	add	r3,r3,r4
   41a40:	290b883a 	add	r5,r5,r4
   41a44:	30000b26 	beq	r6,zero,41a74 <memmove+0x150>
   41a48:	198d883a 	add	r6,r3,r6
   41a4c:	29c00003 	ldbu	r7,0(r5)
   41a50:	18c00044 	addi	r3,r3,1
   41a54:	29400044 	addi	r5,r5,1
   41a58:	19ffffc5 	stb	r7,-1(r3)
   41a5c:	19bffb1e 	bne	r3,r6,41a4c <memmove+0x128>
   41a60:	f800283a 	ret
   41a64:	1007883a 	mov	r3,r2
   41a68:	003ff606 	br	41a44 <memmove+0x120>
   41a6c:	1007883a 	mov	r3,r2
   41a70:	003ff506 	br	41a48 <memmove+0x124>
   41a74:	f800283a 	ret
   41a78:	500d883a 	mov	r6,r10
   41a7c:	003ff106 	br	41a44 <memmove+0x120>

00041a80 <memset>:
   41a80:	20c000cc 	andi	r3,r4,3
   41a84:	2005883a 	mov	r2,r4
   41a88:	18004426 	beq	r3,zero,41b9c <memset+0x11c>
   41a8c:	31ffffc4 	addi	r7,r6,-1
   41a90:	30004026 	beq	r6,zero,41b94 <memset+0x114>
   41a94:	2813883a 	mov	r9,r5
   41a98:	200d883a 	mov	r6,r4
   41a9c:	2007883a 	mov	r3,r4
   41aa0:	00000406 	br	41ab4 <memset+0x34>
   41aa4:	3a3fffc4 	addi	r8,r7,-1
   41aa8:	31800044 	addi	r6,r6,1
   41aac:	38003926 	beq	r7,zero,41b94 <memset+0x114>
   41ab0:	400f883a 	mov	r7,r8
   41ab4:	18c00044 	addi	r3,r3,1
   41ab8:	32400005 	stb	r9,0(r6)
   41abc:	1a0000cc 	andi	r8,r3,3
   41ac0:	403ff81e 	bne	r8,zero,41aa4 <memset+0x24>
   41ac4:	010000c4 	movi	r4,3
   41ac8:	21c02d2e 	bgeu	r4,r7,41b80 <memset+0x100>
   41acc:	29003fcc 	andi	r4,r5,255
   41ad0:	200c923a 	slli	r6,r4,8
   41ad4:	3108b03a 	or	r4,r6,r4
   41ad8:	200c943a 	slli	r6,r4,16
   41adc:	218cb03a 	or	r6,r4,r6
   41ae0:	010003c4 	movi	r4,15
   41ae4:	21c0182e 	bgeu	r4,r7,41b48 <memset+0xc8>
   41ae8:	3b3ffc04 	addi	r12,r7,-16
   41aec:	6018d13a 	srli	r12,r12,4
   41af0:	1a000104 	addi	r8,r3,4
   41af4:	1ac00204 	addi	r11,r3,8
   41af8:	6008913a 	slli	r4,r12,4
   41afc:	1a800304 	addi	r10,r3,12
   41b00:	1813883a 	mov	r9,r3
   41b04:	21000504 	addi	r4,r4,20
   41b08:	1909883a 	add	r4,r3,r4
   41b0c:	49800015 	stw	r6,0(r9)
   41b10:	41800015 	stw	r6,0(r8)
   41b14:	59800015 	stw	r6,0(r11)
   41b18:	51800015 	stw	r6,0(r10)
   41b1c:	42000404 	addi	r8,r8,16
   41b20:	4a400404 	addi	r9,r9,16
   41b24:	5ac00404 	addi	r11,r11,16
   41b28:	52800404 	addi	r10,r10,16
   41b2c:	413ff71e 	bne	r8,r4,41b0c <memset+0x8c>
   41b30:	63000044 	addi	r12,r12,1
   41b34:	6018913a 	slli	r12,r12,4
   41b38:	39c003cc 	andi	r7,r7,15
   41b3c:	010000c4 	movi	r4,3
   41b40:	1b07883a 	add	r3,r3,r12
   41b44:	21c00e2e 	bgeu	r4,r7,41b80 <memset+0x100>
   41b48:	1813883a 	mov	r9,r3
   41b4c:	3811883a 	mov	r8,r7
   41b50:	010000c4 	movi	r4,3
   41b54:	49800015 	stw	r6,0(r9)
   41b58:	423fff04 	addi	r8,r8,-4
   41b5c:	4a400104 	addi	r9,r9,4
   41b60:	223ffc36 	bltu	r4,r8,41b54 <memset+0xd4>
   41b64:	393fff04 	addi	r4,r7,-4
   41b68:	2008d0ba 	srli	r4,r4,2
   41b6c:	39c000cc 	andi	r7,r7,3
   41b70:	21000044 	addi	r4,r4,1
   41b74:	2109883a 	add	r4,r4,r4
   41b78:	2109883a 	add	r4,r4,r4
   41b7c:	1907883a 	add	r3,r3,r4
   41b80:	38000526 	beq	r7,zero,41b98 <memset+0x118>
   41b84:	19cf883a 	add	r7,r3,r7
   41b88:	19400005 	stb	r5,0(r3)
   41b8c:	18c00044 	addi	r3,r3,1
   41b90:	38fffd1e 	bne	r7,r3,41b88 <memset+0x108>
   41b94:	f800283a 	ret
   41b98:	f800283a 	ret
   41b9c:	2007883a 	mov	r3,r4
   41ba0:	300f883a 	mov	r7,r6
   41ba4:	003fc706 	br	41ac4 <memset+0x44>

00041ba8 <_realloc_r>:
   41ba8:	defff604 	addi	sp,sp,-40
   41bac:	dc800215 	stw	r18,8(sp)
   41bb0:	dfc00915 	stw	ra,36(sp)
   41bb4:	df000815 	stw	fp,32(sp)
   41bb8:	ddc00715 	stw	r23,28(sp)
   41bbc:	dd800615 	stw	r22,24(sp)
   41bc0:	dd400515 	stw	r21,20(sp)
   41bc4:	dd000415 	stw	r20,16(sp)
   41bc8:	dcc00315 	stw	r19,12(sp)
   41bcc:	dc400115 	stw	r17,4(sp)
   41bd0:	dc000015 	stw	r16,0(sp)
   41bd4:	3025883a 	mov	r18,r6
   41bd8:	2800b726 	beq	r5,zero,41eb8 <_realloc_r+0x310>
   41bdc:	282b883a 	mov	r21,r5
   41be0:	2029883a 	mov	r20,r4
   41be4:	00437280 	call	43728 <__malloc_lock>
   41be8:	a8bfff17 	ldw	r2,-4(r21)
   41bec:	043fff04 	movi	r16,-4
   41bf0:	90c002c4 	addi	r3,r18,11
   41bf4:	01000584 	movi	r4,22
   41bf8:	acfffe04 	addi	r19,r21,-8
   41bfc:	1420703a 	and	r16,r2,r16
   41c00:	20c0332e 	bgeu	r4,r3,41cd0 <_realloc_r+0x128>
   41c04:	047ffe04 	movi	r17,-8
   41c08:	1c62703a 	and	r17,r3,r17
   41c0c:	8807883a 	mov	r3,r17
   41c10:	88005816 	blt	r17,zero,41d74 <_realloc_r+0x1cc>
   41c14:	8c805736 	bltu	r17,r18,41d74 <_realloc_r+0x1cc>
   41c18:	80c0300e 	bge	r16,r3,41cdc <_realloc_r+0x134>
   41c1c:	07000134 	movhi	fp,4
   41c20:	e7178604 	addi	fp,fp,24088
   41c24:	e1c00217 	ldw	r7,8(fp)
   41c28:	9c09883a 	add	r4,r19,r16
   41c2c:	22000117 	ldw	r8,4(r4)
   41c30:	21c06326 	beq	r4,r7,41dc0 <_realloc_r+0x218>
   41c34:	017fff84 	movi	r5,-2
   41c38:	414a703a 	and	r5,r8,r5
   41c3c:	214b883a 	add	r5,r4,r5
   41c40:	29800117 	ldw	r6,4(r5)
   41c44:	3180004c 	andi	r6,r6,1
   41c48:	30003f26 	beq	r6,zero,41d48 <_realloc_r+0x1a0>
   41c4c:	1080004c 	andi	r2,r2,1
   41c50:	10008326 	beq	r2,zero,41e60 <_realloc_r+0x2b8>
   41c54:	900b883a 	mov	r5,r18
   41c58:	a009883a 	mov	r4,r20
   41c5c:	0040eec0 	call	40eec <_malloc_r>
   41c60:	1025883a 	mov	r18,r2
   41c64:	10011e26 	beq	r2,zero,420e0 <_realloc_r+0x538>
   41c68:	a93fff17 	ldw	r4,-4(r21)
   41c6c:	10fffe04 	addi	r3,r2,-8
   41c70:	00bfff84 	movi	r2,-2
   41c74:	2084703a 	and	r2,r4,r2
   41c78:	9885883a 	add	r2,r19,r2
   41c7c:	1880ee26 	beq	r3,r2,42038 <_realloc_r+0x490>
   41c80:	81bfff04 	addi	r6,r16,-4
   41c84:	00800904 	movi	r2,36
   41c88:	1180b836 	bltu	r2,r6,41f6c <_realloc_r+0x3c4>
   41c8c:	00c004c4 	movi	r3,19
   41c90:	19809636 	bltu	r3,r6,41eec <_realloc_r+0x344>
   41c94:	9005883a 	mov	r2,r18
   41c98:	a807883a 	mov	r3,r21
   41c9c:	19000017 	ldw	r4,0(r3)
   41ca0:	11000015 	stw	r4,0(r2)
   41ca4:	19000117 	ldw	r4,4(r3)
   41ca8:	11000115 	stw	r4,4(r2)
   41cac:	18c00217 	ldw	r3,8(r3)
   41cb0:	10c00215 	stw	r3,8(r2)
   41cb4:	a80b883a 	mov	r5,r21
   41cb8:	a009883a 	mov	r4,r20
   41cbc:	00429740 	call	42974 <_free_r>
   41cc0:	a009883a 	mov	r4,r20
   41cc4:	004374c0 	call	4374c <__malloc_unlock>
   41cc8:	9005883a 	mov	r2,r18
   41ccc:	00001206 	br	41d18 <_realloc_r+0x170>
   41cd0:	00c00404 	movi	r3,16
   41cd4:	1823883a 	mov	r17,r3
   41cd8:	003fce06 	br	41c14 <_realloc_r+0x6c>
   41cdc:	a825883a 	mov	r18,r21
   41ce0:	8445c83a 	sub	r2,r16,r17
   41ce4:	00c003c4 	movi	r3,15
   41ce8:	18802636 	bltu	r3,r2,41d84 <_realloc_r+0x1dc>
   41cec:	99800117 	ldw	r6,4(r19)
   41cf0:	9c07883a 	add	r3,r19,r16
   41cf4:	3180004c 	andi	r6,r6,1
   41cf8:	3420b03a 	or	r16,r6,r16
   41cfc:	9c000115 	stw	r16,4(r19)
   41d00:	18800117 	ldw	r2,4(r3)
   41d04:	10800054 	ori	r2,r2,1
   41d08:	18800115 	stw	r2,4(r3)
   41d0c:	a009883a 	mov	r4,r20
   41d10:	004374c0 	call	4374c <__malloc_unlock>
   41d14:	9005883a 	mov	r2,r18
   41d18:	dfc00917 	ldw	ra,36(sp)
   41d1c:	df000817 	ldw	fp,32(sp)
   41d20:	ddc00717 	ldw	r23,28(sp)
   41d24:	dd800617 	ldw	r22,24(sp)
   41d28:	dd400517 	ldw	r21,20(sp)
   41d2c:	dd000417 	ldw	r20,16(sp)
   41d30:	dcc00317 	ldw	r19,12(sp)
   41d34:	dc800217 	ldw	r18,8(sp)
   41d38:	dc400117 	ldw	r17,4(sp)
   41d3c:	dc000017 	ldw	r16,0(sp)
   41d40:	dec00a04 	addi	sp,sp,40
   41d44:	f800283a 	ret
   41d48:	017fff04 	movi	r5,-4
   41d4c:	414a703a 	and	r5,r8,r5
   41d50:	814d883a 	add	r6,r16,r5
   41d54:	30c01f16 	blt	r6,r3,41dd4 <_realloc_r+0x22c>
   41d58:	20800317 	ldw	r2,12(r4)
   41d5c:	20c00217 	ldw	r3,8(r4)
   41d60:	a825883a 	mov	r18,r21
   41d64:	3021883a 	mov	r16,r6
   41d68:	18800315 	stw	r2,12(r3)
   41d6c:	10c00215 	stw	r3,8(r2)
   41d70:	003fdb06 	br	41ce0 <_realloc_r+0x138>
   41d74:	00800304 	movi	r2,12
   41d78:	a0800015 	stw	r2,0(r20)
   41d7c:	0005883a 	mov	r2,zero
   41d80:	003fe506 	br	41d18 <_realloc_r+0x170>
   41d84:	98c00117 	ldw	r3,4(r19)
   41d88:	9c4b883a 	add	r5,r19,r17
   41d8c:	11000054 	ori	r4,r2,1
   41d90:	18c0004c 	andi	r3,r3,1
   41d94:	1c62b03a 	or	r17,r3,r17
   41d98:	9c400115 	stw	r17,4(r19)
   41d9c:	29000115 	stw	r4,4(r5)
   41da0:	2885883a 	add	r2,r5,r2
   41da4:	10c00117 	ldw	r3,4(r2)
   41da8:	29400204 	addi	r5,r5,8
   41dac:	a009883a 	mov	r4,r20
   41db0:	18c00054 	ori	r3,r3,1
   41db4:	10c00115 	stw	r3,4(r2)
   41db8:	00429740 	call	42974 <_free_r>
   41dbc:	003fd306 	br	41d0c <_realloc_r+0x164>
   41dc0:	017fff04 	movi	r5,-4
   41dc4:	414a703a 	and	r5,r8,r5
   41dc8:	89800404 	addi	r6,r17,16
   41dcc:	8151883a 	add	r8,r16,r5
   41dd0:	4180590e 	bge	r8,r6,41f38 <_realloc_r+0x390>
   41dd4:	1080004c 	andi	r2,r2,1
   41dd8:	103f9e1e 	bne	r2,zero,41c54 <_realloc_r+0xac>
   41ddc:	adbffe17 	ldw	r22,-8(r21)
   41de0:	00bfff04 	movi	r2,-4
   41de4:	9dadc83a 	sub	r22,r19,r22
   41de8:	b1800117 	ldw	r6,4(r22)
   41dec:	3084703a 	and	r2,r6,r2
   41df0:	20002026 	beq	r4,zero,41e74 <_realloc_r+0x2cc>
   41df4:	80af883a 	add	r23,r16,r2
   41df8:	b96f883a 	add	r23,r23,r5
   41dfc:	21c05f26 	beq	r4,r7,41f7c <_realloc_r+0x3d4>
   41e00:	b8c01c16 	blt	r23,r3,41e74 <_realloc_r+0x2cc>
   41e04:	20800317 	ldw	r2,12(r4)
   41e08:	20c00217 	ldw	r3,8(r4)
   41e0c:	81bfff04 	addi	r6,r16,-4
   41e10:	01000904 	movi	r4,36
   41e14:	18800315 	stw	r2,12(r3)
   41e18:	10c00215 	stw	r3,8(r2)
   41e1c:	b0c00217 	ldw	r3,8(r22)
   41e20:	b0800317 	ldw	r2,12(r22)
   41e24:	b4800204 	addi	r18,r22,8
   41e28:	18800315 	stw	r2,12(r3)
   41e2c:	10c00215 	stw	r3,8(r2)
   41e30:	21801b36 	bltu	r4,r6,41ea0 <_realloc_r+0x2f8>
   41e34:	008004c4 	movi	r2,19
   41e38:	1180352e 	bgeu	r2,r6,41f10 <_realloc_r+0x368>
   41e3c:	a8800017 	ldw	r2,0(r21)
   41e40:	b0800215 	stw	r2,8(r22)
   41e44:	a8800117 	ldw	r2,4(r21)
   41e48:	b0800315 	stw	r2,12(r22)
   41e4c:	008006c4 	movi	r2,27
   41e50:	11807f36 	bltu	r2,r6,42050 <_realloc_r+0x4a8>
   41e54:	b0800404 	addi	r2,r22,16
   41e58:	ad400204 	addi	r21,r21,8
   41e5c:	00002d06 	br	41f14 <_realloc_r+0x36c>
   41e60:	adbffe17 	ldw	r22,-8(r21)
   41e64:	00bfff04 	movi	r2,-4
   41e68:	9dadc83a 	sub	r22,r19,r22
   41e6c:	b1000117 	ldw	r4,4(r22)
   41e70:	2084703a 	and	r2,r4,r2
   41e74:	b03f7726 	beq	r22,zero,41c54 <_realloc_r+0xac>
   41e78:	80af883a 	add	r23,r16,r2
   41e7c:	b8ff7516 	blt	r23,r3,41c54 <_realloc_r+0xac>
   41e80:	b0800317 	ldw	r2,12(r22)
   41e84:	b0c00217 	ldw	r3,8(r22)
   41e88:	81bfff04 	addi	r6,r16,-4
   41e8c:	01000904 	movi	r4,36
   41e90:	18800315 	stw	r2,12(r3)
   41e94:	10c00215 	stw	r3,8(r2)
   41e98:	b4800204 	addi	r18,r22,8
   41e9c:	21bfe52e 	bgeu	r4,r6,41e34 <_realloc_r+0x28c>
   41ea0:	a80b883a 	mov	r5,r21
   41ea4:	9009883a 	mov	r4,r18
   41ea8:	00419240 	call	41924 <memmove>
   41eac:	b821883a 	mov	r16,r23
   41eb0:	b027883a 	mov	r19,r22
   41eb4:	003f8a06 	br	41ce0 <_realloc_r+0x138>
   41eb8:	300b883a 	mov	r5,r6
   41ebc:	dfc00917 	ldw	ra,36(sp)
   41ec0:	df000817 	ldw	fp,32(sp)
   41ec4:	ddc00717 	ldw	r23,28(sp)
   41ec8:	dd800617 	ldw	r22,24(sp)
   41ecc:	dd400517 	ldw	r21,20(sp)
   41ed0:	dd000417 	ldw	r20,16(sp)
   41ed4:	dcc00317 	ldw	r19,12(sp)
   41ed8:	dc800217 	ldw	r18,8(sp)
   41edc:	dc400117 	ldw	r17,4(sp)
   41ee0:	dc000017 	ldw	r16,0(sp)
   41ee4:	dec00a04 	addi	sp,sp,40
   41ee8:	0040eec1 	jmpi	40eec <_malloc_r>
   41eec:	a8c00017 	ldw	r3,0(r21)
   41ef0:	90c00015 	stw	r3,0(r18)
   41ef4:	a8c00117 	ldw	r3,4(r21)
   41ef8:	90c00115 	stw	r3,4(r18)
   41efc:	00c006c4 	movi	r3,27
   41f00:	19804536 	bltu	r3,r6,42018 <_realloc_r+0x470>
   41f04:	90800204 	addi	r2,r18,8
   41f08:	a8c00204 	addi	r3,r21,8
   41f0c:	003f6306 	br	41c9c <_realloc_r+0xf4>
   41f10:	9005883a 	mov	r2,r18
   41f14:	a8c00017 	ldw	r3,0(r21)
   41f18:	b821883a 	mov	r16,r23
   41f1c:	b027883a 	mov	r19,r22
   41f20:	10c00015 	stw	r3,0(r2)
   41f24:	a8c00117 	ldw	r3,4(r21)
   41f28:	10c00115 	stw	r3,4(r2)
   41f2c:	a8c00217 	ldw	r3,8(r21)
   41f30:	10c00215 	stw	r3,8(r2)
   41f34:	003f6a06 	br	41ce0 <_realloc_r+0x138>
   41f38:	9c67883a 	add	r19,r19,r17
   41f3c:	4445c83a 	sub	r2,r8,r17
   41f40:	e4c00215 	stw	r19,8(fp)
   41f44:	10800054 	ori	r2,r2,1
   41f48:	98800115 	stw	r2,4(r19)
   41f4c:	a8bfff17 	ldw	r2,-4(r21)
   41f50:	a009883a 	mov	r4,r20
   41f54:	1080004c 	andi	r2,r2,1
   41f58:	1462b03a 	or	r17,r2,r17
   41f5c:	ac7fff15 	stw	r17,-4(r21)
   41f60:	004374c0 	call	4374c <__malloc_unlock>
   41f64:	a805883a 	mov	r2,r21
   41f68:	003f6b06 	br	41d18 <_realloc_r+0x170>
   41f6c:	a80b883a 	mov	r5,r21
   41f70:	9009883a 	mov	r4,r18
   41f74:	00419240 	call	41924 <memmove>
   41f78:	003f4e06 	br	41cb4 <_realloc_r+0x10c>
   41f7c:	89000404 	addi	r4,r17,16
   41f80:	b93fbc16 	blt	r23,r4,41e74 <_realloc_r+0x2cc>
   41f84:	b0800317 	ldw	r2,12(r22)
   41f88:	b0c00217 	ldw	r3,8(r22)
   41f8c:	81bfff04 	addi	r6,r16,-4
   41f90:	01000904 	movi	r4,36
   41f94:	18800315 	stw	r2,12(r3)
   41f98:	10c00215 	stw	r3,8(r2)
   41f9c:	b4800204 	addi	r18,r22,8
   41fa0:	21804336 	bltu	r4,r6,420b0 <_realloc_r+0x508>
   41fa4:	008004c4 	movi	r2,19
   41fa8:	11803f2e 	bgeu	r2,r6,420a8 <_realloc_r+0x500>
   41fac:	a8800017 	ldw	r2,0(r21)
   41fb0:	b0800215 	stw	r2,8(r22)
   41fb4:	a8800117 	ldw	r2,4(r21)
   41fb8:	b0800315 	stw	r2,12(r22)
   41fbc:	008006c4 	movi	r2,27
   41fc0:	11803f36 	bltu	r2,r6,420c0 <_realloc_r+0x518>
   41fc4:	b0800404 	addi	r2,r22,16
   41fc8:	ad400204 	addi	r21,r21,8
   41fcc:	a8c00017 	ldw	r3,0(r21)
   41fd0:	10c00015 	stw	r3,0(r2)
   41fd4:	a8c00117 	ldw	r3,4(r21)
   41fd8:	10c00115 	stw	r3,4(r2)
   41fdc:	a8c00217 	ldw	r3,8(r21)
   41fe0:	10c00215 	stw	r3,8(r2)
   41fe4:	b447883a 	add	r3,r22,r17
   41fe8:	bc45c83a 	sub	r2,r23,r17
   41fec:	e0c00215 	stw	r3,8(fp)
   41ff0:	10800054 	ori	r2,r2,1
   41ff4:	18800115 	stw	r2,4(r3)
   41ff8:	b0800117 	ldw	r2,4(r22)
   41ffc:	a009883a 	mov	r4,r20
   42000:	1080004c 	andi	r2,r2,1
   42004:	1462b03a 	or	r17,r2,r17
   42008:	b4400115 	stw	r17,4(r22)
   4200c:	004374c0 	call	4374c <__malloc_unlock>
   42010:	9005883a 	mov	r2,r18
   42014:	003f4006 	br	41d18 <_realloc_r+0x170>
   42018:	a8c00217 	ldw	r3,8(r21)
   4201c:	90c00215 	stw	r3,8(r18)
   42020:	a8c00317 	ldw	r3,12(r21)
   42024:	90c00315 	stw	r3,12(r18)
   42028:	30801126 	beq	r6,r2,42070 <_realloc_r+0x4c8>
   4202c:	90800404 	addi	r2,r18,16
   42030:	a8c00404 	addi	r3,r21,16
   42034:	003f1906 	br	41c9c <_realloc_r+0xf4>
   42038:	90ffff17 	ldw	r3,-4(r18)
   4203c:	00bfff04 	movi	r2,-4
   42040:	a825883a 	mov	r18,r21
   42044:	1884703a 	and	r2,r3,r2
   42048:	80a1883a 	add	r16,r16,r2
   4204c:	003f2406 	br	41ce0 <_realloc_r+0x138>
   42050:	a8800217 	ldw	r2,8(r21)
   42054:	b0800415 	stw	r2,16(r22)
   42058:	a8800317 	ldw	r2,12(r21)
   4205c:	b0800515 	stw	r2,20(r22)
   42060:	31000a26 	beq	r6,r4,4208c <_realloc_r+0x4e4>
   42064:	b0800604 	addi	r2,r22,24
   42068:	ad400404 	addi	r21,r21,16
   4206c:	003fa906 	br	41f14 <_realloc_r+0x36c>
   42070:	a9000417 	ldw	r4,16(r21)
   42074:	90800604 	addi	r2,r18,24
   42078:	a8c00604 	addi	r3,r21,24
   4207c:	91000415 	stw	r4,16(r18)
   42080:	a9000517 	ldw	r4,20(r21)
   42084:	91000515 	stw	r4,20(r18)
   42088:	003f0406 	br	41c9c <_realloc_r+0xf4>
   4208c:	a8c00417 	ldw	r3,16(r21)
   42090:	ad400604 	addi	r21,r21,24
   42094:	b0800804 	addi	r2,r22,32
   42098:	b0c00615 	stw	r3,24(r22)
   4209c:	a8ffff17 	ldw	r3,-4(r21)
   420a0:	b0c00715 	stw	r3,28(r22)
   420a4:	003f9b06 	br	41f14 <_realloc_r+0x36c>
   420a8:	9005883a 	mov	r2,r18
   420ac:	003fc706 	br	41fcc <_realloc_r+0x424>
   420b0:	a80b883a 	mov	r5,r21
   420b4:	9009883a 	mov	r4,r18
   420b8:	00419240 	call	41924 <memmove>
   420bc:	003fc906 	br	41fe4 <_realloc_r+0x43c>
   420c0:	a8800217 	ldw	r2,8(r21)
   420c4:	b0800415 	stw	r2,16(r22)
   420c8:	a8800317 	ldw	r2,12(r21)
   420cc:	b0800515 	stw	r2,20(r22)
   420d0:	31000726 	beq	r6,r4,420f0 <_realloc_r+0x548>
   420d4:	b0800604 	addi	r2,r22,24
   420d8:	ad400404 	addi	r21,r21,16
   420dc:	003fbb06 	br	41fcc <_realloc_r+0x424>
   420e0:	a009883a 	mov	r4,r20
   420e4:	004374c0 	call	4374c <__malloc_unlock>
   420e8:	0005883a 	mov	r2,zero
   420ec:	003f0a06 	br	41d18 <_realloc_r+0x170>
   420f0:	a8c00417 	ldw	r3,16(r21)
   420f4:	ad400604 	addi	r21,r21,24
   420f8:	b0800804 	addi	r2,r22,32
   420fc:	b0c00615 	stw	r3,24(r22)
   42100:	a8ffff17 	ldw	r3,-4(r21)
   42104:	b0c00715 	stw	r3,28(r22)
   42108:	003fb006 	br	41fcc <_realloc_r+0x424>

0004210c <_sbrk_r>:
   4210c:	defffd04 	addi	sp,sp,-12
   42110:	dc000015 	stw	r16,0(sp)
   42114:	04000174 	movhi	r16,5
   42118:	dc400115 	stw	r17,4(sp)
   4211c:	8423b604 	addi	r16,r16,-28968
   42120:	2023883a 	mov	r17,r4
   42124:	2809883a 	mov	r4,r5
   42128:	dfc00215 	stw	ra,8(sp)
   4212c:	80000015 	stw	zero,0(r16)
   42130:	00439340 	call	43934 <sbrk>
   42134:	00ffffc4 	movi	r3,-1
   42138:	10c00526 	beq	r2,r3,42150 <_sbrk_r+0x44>
   4213c:	dfc00217 	ldw	ra,8(sp)
   42140:	dc400117 	ldw	r17,4(sp)
   42144:	dc000017 	ldw	r16,0(sp)
   42148:	dec00304 	addi	sp,sp,12
   4214c:	f800283a 	ret
   42150:	80c00017 	ldw	r3,0(r16)
   42154:	183ff926 	beq	r3,zero,4213c <_sbrk_r+0x30>
   42158:	88c00015 	stw	r3,0(r17)
   4215c:	003ff706 	br	4213c <_sbrk_r+0x30>

00042160 <__sread>:
   42160:	defffe04 	addi	sp,sp,-8
   42164:	dc000015 	stw	r16,0(sp)
   42168:	2821883a 	mov	r16,r5
   4216c:	2940038f 	ldh	r5,14(r5)
   42170:	dfc00115 	stw	ra,4(sp)
   42174:	0042ea00 	call	42ea0 <_read_r>
   42178:	10000716 	blt	r2,zero,42198 <__sread+0x38>
   4217c:	80c01417 	ldw	r3,80(r16)
   42180:	1887883a 	add	r3,r3,r2
   42184:	80c01415 	stw	r3,80(r16)
   42188:	dfc00117 	ldw	ra,4(sp)
   4218c:	dc000017 	ldw	r16,0(sp)
   42190:	dec00204 	addi	sp,sp,8
   42194:	f800283a 	ret
   42198:	80c0030b 	ldhu	r3,12(r16)
   4219c:	18fbffcc 	andi	r3,r3,61439
   421a0:	80c0030d 	sth	r3,12(r16)
   421a4:	dfc00117 	ldw	ra,4(sp)
   421a8:	dc000017 	ldw	r16,0(sp)
   421ac:	dec00204 	addi	sp,sp,8
   421b0:	f800283a 	ret

000421b4 <__seofread>:
   421b4:	0005883a 	mov	r2,zero
   421b8:	f800283a 	ret

000421bc <__swrite>:
   421bc:	2880030b 	ldhu	r2,12(r5)
   421c0:	defffb04 	addi	sp,sp,-20
   421c4:	dcc00315 	stw	r19,12(sp)
   421c8:	dc800215 	stw	r18,8(sp)
   421cc:	dc400115 	stw	r17,4(sp)
   421d0:	dc000015 	stw	r16,0(sp)
   421d4:	dfc00415 	stw	ra,16(sp)
   421d8:	10c0400c 	andi	r3,r2,256
   421dc:	2821883a 	mov	r16,r5
   421e0:	2023883a 	mov	r17,r4
   421e4:	3025883a 	mov	r18,r6
   421e8:	3827883a 	mov	r19,r7
   421ec:	18000526 	beq	r3,zero,42204 <__swrite+0x48>
   421f0:	2940038f 	ldh	r5,14(r5)
   421f4:	01c00084 	movi	r7,2
   421f8:	000d883a 	mov	r6,zero
   421fc:	0042c840 	call	42c84 <_lseek_r>
   42200:	8080030b 	ldhu	r2,12(r16)
   42204:	8140038f 	ldh	r5,14(r16)
   42208:	10bbffcc 	andi	r2,r2,61439
   4220c:	980f883a 	mov	r7,r19
   42210:	900d883a 	mov	r6,r18
   42214:	8809883a 	mov	r4,r17
   42218:	8080030d 	sth	r2,12(r16)
   4221c:	dfc00417 	ldw	ra,16(sp)
   42220:	dcc00317 	ldw	r19,12(sp)
   42224:	dc800217 	ldw	r18,8(sp)
   42228:	dc400117 	ldw	r17,4(sp)
   4222c:	dc000017 	ldw	r16,0(sp)
   42230:	dec00504 	addi	sp,sp,20
   42234:	004229c1 	jmpi	4229c <_write_r>

00042238 <__sseek>:
   42238:	defffe04 	addi	sp,sp,-8
   4223c:	dc000015 	stw	r16,0(sp)
   42240:	2821883a 	mov	r16,r5
   42244:	2940038f 	ldh	r5,14(r5)
   42248:	dfc00115 	stw	ra,4(sp)
   4224c:	0042c840 	call	42c84 <_lseek_r>
   42250:	00ffffc4 	movi	r3,-1
   42254:	10c00826 	beq	r2,r3,42278 <__sseek+0x40>
   42258:	80c0030b 	ldhu	r3,12(r16)
   4225c:	80801415 	stw	r2,80(r16)
   42260:	18c40014 	ori	r3,r3,4096
   42264:	80c0030d 	sth	r3,12(r16)
   42268:	dfc00117 	ldw	ra,4(sp)
   4226c:	dc000017 	ldw	r16,0(sp)
   42270:	dec00204 	addi	sp,sp,8
   42274:	f800283a 	ret
   42278:	80c0030b 	ldhu	r3,12(r16)
   4227c:	18fbffcc 	andi	r3,r3,61439
   42280:	80c0030d 	sth	r3,12(r16)
   42284:	dfc00117 	ldw	ra,4(sp)
   42288:	dc000017 	ldw	r16,0(sp)
   4228c:	dec00204 	addi	sp,sp,8
   42290:	f800283a 	ret

00042294 <__sclose>:
   42294:	2940038f 	ldh	r5,14(r5)
   42298:	00424501 	jmpi	42450 <_close_r>

0004229c <_write_r>:
   4229c:	defffd04 	addi	sp,sp,-12
   422a0:	2805883a 	mov	r2,r5
   422a4:	dc000015 	stw	r16,0(sp)
   422a8:	04000174 	movhi	r16,5
   422ac:	dc400115 	stw	r17,4(sp)
   422b0:	300b883a 	mov	r5,r6
   422b4:	8423b604 	addi	r16,r16,-28968
   422b8:	2023883a 	mov	r17,r4
   422bc:	380d883a 	mov	r6,r7
   422c0:	1009883a 	mov	r4,r2
   422c4:	dfc00215 	stw	ra,8(sp)
   422c8:	80000015 	stw	zero,0(r16)
   422cc:	0043a500 	call	43a50 <write>
   422d0:	00ffffc4 	movi	r3,-1
   422d4:	10c00526 	beq	r2,r3,422ec <_write_r+0x50>
   422d8:	dfc00217 	ldw	ra,8(sp)
   422dc:	dc400117 	ldw	r17,4(sp)
   422e0:	dc000017 	ldw	r16,0(sp)
   422e4:	dec00304 	addi	sp,sp,12
   422e8:	f800283a 	ret
   422ec:	80c00017 	ldw	r3,0(r16)
   422f0:	183ff926 	beq	r3,zero,422d8 <_write_r+0x3c>
   422f4:	88c00015 	stw	r3,0(r17)
   422f8:	003ff706 	br	422d8 <_write_r+0x3c>

000422fc <__swsetup_r>:
   422fc:	00800134 	movhi	r2,4
   42300:	defffd04 	addi	sp,sp,-12
   42304:	109d0b04 	addi	r2,r2,29740
   42308:	dc400115 	stw	r17,4(sp)
   4230c:	2023883a 	mov	r17,r4
   42310:	11000017 	ldw	r4,0(r2)
   42314:	dc000015 	stw	r16,0(sp)
   42318:	dfc00215 	stw	ra,8(sp)
   4231c:	2821883a 	mov	r16,r5
   42320:	20000226 	beq	r4,zero,4232c <__swsetup_r+0x30>
   42324:	20800e17 	ldw	r2,56(r4)
   42328:	10003126 	beq	r2,zero,423f0 <__swsetup_r+0xf4>
   4232c:	8080030b 	ldhu	r2,12(r16)
   42330:	10c0020c 	andi	r3,r2,8
   42334:	1009883a 	mov	r4,r2
   42338:	18000f26 	beq	r3,zero,42378 <__swsetup_r+0x7c>
   4233c:	80c00417 	ldw	r3,16(r16)
   42340:	18001526 	beq	r3,zero,42398 <__swsetup_r+0x9c>
   42344:	1100004c 	andi	r4,r2,1
   42348:	20001c1e 	bne	r4,zero,423bc <__swsetup_r+0xc0>
   4234c:	1080008c 	andi	r2,r2,2
   42350:	1000291e 	bne	r2,zero,423f8 <__swsetup_r+0xfc>
   42354:	80800517 	ldw	r2,20(r16)
   42358:	80800215 	stw	r2,8(r16)
   4235c:	18001c26 	beq	r3,zero,423d0 <__swsetup_r+0xd4>
   42360:	0005883a 	mov	r2,zero
   42364:	dfc00217 	ldw	ra,8(sp)
   42368:	dc400117 	ldw	r17,4(sp)
   4236c:	dc000017 	ldw	r16,0(sp)
   42370:	dec00304 	addi	sp,sp,12
   42374:	f800283a 	ret
   42378:	2080040c 	andi	r2,r4,16
   4237c:	10002e26 	beq	r2,zero,42438 <__swsetup_r+0x13c>
   42380:	2080010c 	andi	r2,r4,4
   42384:	10001e1e 	bne	r2,zero,42400 <__swsetup_r+0x104>
   42388:	80c00417 	ldw	r3,16(r16)
   4238c:	20800214 	ori	r2,r4,8
   42390:	8080030d 	sth	r2,12(r16)
   42394:	183feb1e 	bne	r3,zero,42344 <__swsetup_r+0x48>
   42398:	1100a00c 	andi	r4,r2,640
   4239c:	01408004 	movi	r5,512
   423a0:	217fe826 	beq	r4,r5,42344 <__swsetup_r+0x48>
   423a4:	800b883a 	mov	r5,r16
   423a8:	8809883a 	mov	r4,r17
   423ac:	0042ce40 	call	42ce4 <__smakebuf_r>
   423b0:	8080030b 	ldhu	r2,12(r16)
   423b4:	80c00417 	ldw	r3,16(r16)
   423b8:	003fe206 	br	42344 <__swsetup_r+0x48>
   423bc:	80800517 	ldw	r2,20(r16)
   423c0:	80000215 	stw	zero,8(r16)
   423c4:	0085c83a 	sub	r2,zero,r2
   423c8:	80800615 	stw	r2,24(r16)
   423cc:	183fe41e 	bne	r3,zero,42360 <__swsetup_r+0x64>
   423d0:	80c0030b 	ldhu	r3,12(r16)
   423d4:	0005883a 	mov	r2,zero
   423d8:	1900200c 	andi	r4,r3,128
   423dc:	203fe126 	beq	r4,zero,42364 <__swsetup_r+0x68>
   423e0:	18c01014 	ori	r3,r3,64
   423e4:	80c0030d 	sth	r3,12(r16)
   423e8:	00bfffc4 	movi	r2,-1
   423ec:	003fdd06 	br	42364 <__swsetup_r+0x68>
   423f0:	004084c0 	call	4084c <__sinit>
   423f4:	003fcd06 	br	4232c <__swsetup_r+0x30>
   423f8:	0005883a 	mov	r2,zero
   423fc:	003fd606 	br	42358 <__swsetup_r+0x5c>
   42400:	81400c17 	ldw	r5,48(r16)
   42404:	28000626 	beq	r5,zero,42420 <__swsetup_r+0x124>
   42408:	80801004 	addi	r2,r16,64
   4240c:	28800326 	beq	r5,r2,4241c <__swsetup_r+0x120>
   42410:	8809883a 	mov	r4,r17
   42414:	00429740 	call	42974 <_free_r>
   42418:	8100030b 	ldhu	r4,12(r16)
   4241c:	80000c15 	stw	zero,48(r16)
   42420:	80c00417 	ldw	r3,16(r16)
   42424:	00bff6c4 	movi	r2,-37
   42428:	1108703a 	and	r4,r2,r4
   4242c:	80000115 	stw	zero,4(r16)
   42430:	80c00015 	stw	r3,0(r16)
   42434:	003fd506 	br	4238c <__swsetup_r+0x90>
   42438:	00800244 	movi	r2,9
   4243c:	88800015 	stw	r2,0(r17)
   42440:	20801014 	ori	r2,r4,64
   42444:	8080030d 	sth	r2,12(r16)
   42448:	00bfffc4 	movi	r2,-1
   4244c:	003fc506 	br	42364 <__swsetup_r+0x68>

00042450 <_close_r>:
   42450:	defffd04 	addi	sp,sp,-12
   42454:	dc000015 	stw	r16,0(sp)
   42458:	04000174 	movhi	r16,5
   4245c:	dc400115 	stw	r17,4(sp)
   42460:	8423b604 	addi	r16,r16,-28968
   42464:	2023883a 	mov	r17,r4
   42468:	2809883a 	mov	r4,r5
   4246c:	dfc00215 	stw	ra,8(sp)
   42470:	80000015 	stw	zero,0(r16)
   42474:	00431c80 	call	431c8 <close>
   42478:	00ffffc4 	movi	r3,-1
   4247c:	10c00526 	beq	r2,r3,42494 <_close_r+0x44>
   42480:	dfc00217 	ldw	ra,8(sp)
   42484:	dc400117 	ldw	r17,4(sp)
   42488:	dc000017 	ldw	r16,0(sp)
   4248c:	dec00304 	addi	sp,sp,12
   42490:	f800283a 	ret
   42494:	80c00017 	ldw	r3,0(r16)
   42498:	183ff926 	beq	r3,zero,42480 <_close_r+0x30>
   4249c:	88c00015 	stw	r3,0(r17)
   424a0:	003ff706 	br	42480 <_close_r+0x30>

000424a4 <_fclose_r>:
   424a4:	28003926 	beq	r5,zero,4258c <_fclose_r+0xe8>
   424a8:	defffc04 	addi	sp,sp,-16
   424ac:	dc400115 	stw	r17,4(sp)
   424b0:	dc000015 	stw	r16,0(sp)
   424b4:	dfc00315 	stw	ra,12(sp)
   424b8:	dc800215 	stw	r18,8(sp)
   424bc:	2023883a 	mov	r17,r4
   424c0:	2821883a 	mov	r16,r5
   424c4:	20000226 	beq	r4,zero,424d0 <_fclose_r+0x2c>
   424c8:	20800e17 	ldw	r2,56(r4)
   424cc:	10002726 	beq	r2,zero,4256c <_fclose_r+0xc8>
   424d0:	8080030f 	ldh	r2,12(r16)
   424d4:	1000071e 	bne	r2,zero,424f4 <_fclose_r+0x50>
   424d8:	0005883a 	mov	r2,zero
   424dc:	dfc00317 	ldw	ra,12(sp)
   424e0:	dc800217 	ldw	r18,8(sp)
   424e4:	dc400117 	ldw	r17,4(sp)
   424e8:	dc000017 	ldw	r16,0(sp)
   424ec:	dec00404 	addi	sp,sp,16
   424f0:	f800283a 	ret
   424f4:	800b883a 	mov	r5,r16
   424f8:	8809883a 	mov	r4,r17
   424fc:	00425a80 	call	425a8 <__sflush_r>
   42500:	1025883a 	mov	r18,r2
   42504:	80800b17 	ldw	r2,44(r16)
   42508:	10000426 	beq	r2,zero,4251c <_fclose_r+0x78>
   4250c:	81400717 	ldw	r5,28(r16)
   42510:	8809883a 	mov	r4,r17
   42514:	103ee83a 	callr	r2
   42518:	10001616 	blt	r2,zero,42574 <_fclose_r+0xd0>
   4251c:	8080030b 	ldhu	r2,12(r16)
   42520:	1080200c 	andi	r2,r2,128
   42524:	1000151e 	bne	r2,zero,4257c <_fclose_r+0xd8>
   42528:	81400c17 	ldw	r5,48(r16)
   4252c:	28000526 	beq	r5,zero,42544 <_fclose_r+0xa0>
   42530:	80801004 	addi	r2,r16,64
   42534:	28800226 	beq	r5,r2,42540 <_fclose_r+0x9c>
   42538:	8809883a 	mov	r4,r17
   4253c:	00429740 	call	42974 <_free_r>
   42540:	80000c15 	stw	zero,48(r16)
   42544:	81401117 	ldw	r5,68(r16)
   42548:	28000326 	beq	r5,zero,42558 <_fclose_r+0xb4>
   4254c:	8809883a 	mov	r4,r17
   42550:	00429740 	call	42974 <_free_r>
   42554:	80001115 	stw	zero,68(r16)
   42558:	004085c0 	call	4085c <__sfp_lock_acquire>
   4255c:	8000030d 	sth	zero,12(r16)
   42560:	00408600 	call	40860 <__sfp_lock_release>
   42564:	9005883a 	mov	r2,r18
   42568:	003fdc06 	br	424dc <_fclose_r+0x38>
   4256c:	004084c0 	call	4084c <__sinit>
   42570:	003fd706 	br	424d0 <_fclose_r+0x2c>
   42574:	04bfffc4 	movi	r18,-1
   42578:	003fe806 	br	4251c <_fclose_r+0x78>
   4257c:	81400417 	ldw	r5,16(r16)
   42580:	8809883a 	mov	r4,r17
   42584:	00429740 	call	42974 <_free_r>
   42588:	003fe706 	br	42528 <_fclose_r+0x84>
   4258c:	0005883a 	mov	r2,zero
   42590:	f800283a 	ret

00042594 <fclose>:
   42594:	00800134 	movhi	r2,4
   42598:	109d0b04 	addi	r2,r2,29740
   4259c:	200b883a 	mov	r5,r4
   425a0:	11000017 	ldw	r4,0(r2)
   425a4:	00424a41 	jmpi	424a4 <_fclose_r>

000425a8 <__sflush_r>:
   425a8:	2880030b 	ldhu	r2,12(r5)
   425ac:	defffb04 	addi	sp,sp,-20
   425b0:	dcc00315 	stw	r19,12(sp)
   425b4:	dc400115 	stw	r17,4(sp)
   425b8:	dfc00415 	stw	ra,16(sp)
   425bc:	dc800215 	stw	r18,8(sp)
   425c0:	dc000015 	stw	r16,0(sp)
   425c4:	10c0020c 	andi	r3,r2,8
   425c8:	2823883a 	mov	r17,r5
   425cc:	2027883a 	mov	r19,r4
   425d0:	1800311e 	bne	r3,zero,42698 <__sflush_r+0xf0>
   425d4:	28c00117 	ldw	r3,4(r5)
   425d8:	10820014 	ori	r2,r2,2048
   425dc:	2880030d 	sth	r2,12(r5)
   425e0:	00c04b0e 	bge	zero,r3,42710 <__sflush_r+0x168>
   425e4:	8a000a17 	ldw	r8,40(r17)
   425e8:	40002326 	beq	r8,zero,42678 <__sflush_r+0xd0>
   425ec:	9c000017 	ldw	r16,0(r19)
   425f0:	10c4000c 	andi	r3,r2,4096
   425f4:	98000015 	stw	zero,0(r19)
   425f8:	18004826 	beq	r3,zero,4271c <__sflush_r+0x174>
   425fc:	89801417 	ldw	r6,80(r17)
   42600:	10c0010c 	andi	r3,r2,4
   42604:	18000626 	beq	r3,zero,42620 <__sflush_r+0x78>
   42608:	88c00117 	ldw	r3,4(r17)
   4260c:	88800c17 	ldw	r2,48(r17)
   42610:	30cdc83a 	sub	r6,r6,r3
   42614:	10000226 	beq	r2,zero,42620 <__sflush_r+0x78>
   42618:	88800f17 	ldw	r2,60(r17)
   4261c:	308dc83a 	sub	r6,r6,r2
   42620:	89400717 	ldw	r5,28(r17)
   42624:	000f883a 	mov	r7,zero
   42628:	9809883a 	mov	r4,r19
   4262c:	403ee83a 	callr	r8
   42630:	00ffffc4 	movi	r3,-1
   42634:	10c04426 	beq	r2,r3,42748 <__sflush_r+0x1a0>
   42638:	88c0030b 	ldhu	r3,12(r17)
   4263c:	89000417 	ldw	r4,16(r17)
   42640:	88000115 	stw	zero,4(r17)
   42644:	197dffcc 	andi	r5,r3,63487
   42648:	8940030d 	sth	r5,12(r17)
   4264c:	89000015 	stw	r4,0(r17)
   42650:	18c4000c 	andi	r3,r3,4096
   42654:	18002c1e 	bne	r3,zero,42708 <__sflush_r+0x160>
   42658:	89400c17 	ldw	r5,48(r17)
   4265c:	9c000015 	stw	r16,0(r19)
   42660:	28000526 	beq	r5,zero,42678 <__sflush_r+0xd0>
   42664:	88801004 	addi	r2,r17,64
   42668:	28800226 	beq	r5,r2,42674 <__sflush_r+0xcc>
   4266c:	9809883a 	mov	r4,r19
   42670:	00429740 	call	42974 <_free_r>
   42674:	88000c15 	stw	zero,48(r17)
   42678:	0005883a 	mov	r2,zero
   4267c:	dfc00417 	ldw	ra,16(sp)
   42680:	dcc00317 	ldw	r19,12(sp)
   42684:	dc800217 	ldw	r18,8(sp)
   42688:	dc400117 	ldw	r17,4(sp)
   4268c:	dc000017 	ldw	r16,0(sp)
   42690:	dec00504 	addi	sp,sp,20
   42694:	f800283a 	ret
   42698:	2c800417 	ldw	r18,16(r5)
   4269c:	903ff626 	beq	r18,zero,42678 <__sflush_r+0xd0>
   426a0:	2c000017 	ldw	r16,0(r5)
   426a4:	108000cc 	andi	r2,r2,3
   426a8:	2c800015 	stw	r18,0(r5)
   426ac:	84a1c83a 	sub	r16,r16,r18
   426b0:	1000131e 	bne	r2,zero,42700 <__sflush_r+0x158>
   426b4:	28800517 	ldw	r2,20(r5)
   426b8:	88800215 	stw	r2,8(r17)
   426bc:	04000316 	blt	zero,r16,426cc <__sflush_r+0x124>
   426c0:	003fed06 	br	42678 <__sflush_r+0xd0>
   426c4:	90a5883a 	add	r18,r18,r2
   426c8:	043feb0e 	bge	zero,r16,42678 <__sflush_r+0xd0>
   426cc:	88800917 	ldw	r2,36(r17)
   426d0:	89400717 	ldw	r5,28(r17)
   426d4:	800f883a 	mov	r7,r16
   426d8:	900d883a 	mov	r6,r18
   426dc:	9809883a 	mov	r4,r19
   426e0:	103ee83a 	callr	r2
   426e4:	80a1c83a 	sub	r16,r16,r2
   426e8:	00bff616 	blt	zero,r2,426c4 <__sflush_r+0x11c>
   426ec:	88c0030b 	ldhu	r3,12(r17)
   426f0:	00bfffc4 	movi	r2,-1
   426f4:	18c01014 	ori	r3,r3,64
   426f8:	88c0030d 	sth	r3,12(r17)
   426fc:	003fdf06 	br	4267c <__sflush_r+0xd4>
   42700:	0005883a 	mov	r2,zero
   42704:	003fec06 	br	426b8 <__sflush_r+0x110>
   42708:	88801415 	stw	r2,80(r17)
   4270c:	003fd206 	br	42658 <__sflush_r+0xb0>
   42710:	28c00f17 	ldw	r3,60(r5)
   42714:	00ffb316 	blt	zero,r3,425e4 <__sflush_r+0x3c>
   42718:	003fd706 	br	42678 <__sflush_r+0xd0>
   4271c:	89400717 	ldw	r5,28(r17)
   42720:	000d883a 	mov	r6,zero
   42724:	01c00044 	movi	r7,1
   42728:	9809883a 	mov	r4,r19
   4272c:	403ee83a 	callr	r8
   42730:	100d883a 	mov	r6,r2
   42734:	00bfffc4 	movi	r2,-1
   42738:	30801426 	beq	r6,r2,4278c <__sflush_r+0x1e4>
   4273c:	8880030b 	ldhu	r2,12(r17)
   42740:	8a000a17 	ldw	r8,40(r17)
   42744:	003fae06 	br	42600 <__sflush_r+0x58>
   42748:	98c00017 	ldw	r3,0(r19)
   4274c:	183fba26 	beq	r3,zero,42638 <__sflush_r+0x90>
   42750:	01000744 	movi	r4,29
   42754:	19000626 	beq	r3,r4,42770 <__sflush_r+0x1c8>
   42758:	01000584 	movi	r4,22
   4275c:	19000426 	beq	r3,r4,42770 <__sflush_r+0x1c8>
   42760:	88c0030b 	ldhu	r3,12(r17)
   42764:	18c01014 	ori	r3,r3,64
   42768:	88c0030d 	sth	r3,12(r17)
   4276c:	003fc306 	br	4267c <__sflush_r+0xd4>
   42770:	8880030b 	ldhu	r2,12(r17)
   42774:	88c00417 	ldw	r3,16(r17)
   42778:	88000115 	stw	zero,4(r17)
   4277c:	10bdffcc 	andi	r2,r2,63487
   42780:	8880030d 	sth	r2,12(r17)
   42784:	88c00015 	stw	r3,0(r17)
   42788:	003fb306 	br	42658 <__sflush_r+0xb0>
   4278c:	98800017 	ldw	r2,0(r19)
   42790:	103fea26 	beq	r2,zero,4273c <__sflush_r+0x194>
   42794:	00c00744 	movi	r3,29
   42798:	10c00226 	beq	r2,r3,427a4 <__sflush_r+0x1fc>
   4279c:	00c00584 	movi	r3,22
   427a0:	10c0031e 	bne	r2,r3,427b0 <__sflush_r+0x208>
   427a4:	9c000015 	stw	r16,0(r19)
   427a8:	0005883a 	mov	r2,zero
   427ac:	003fb306 	br	4267c <__sflush_r+0xd4>
   427b0:	88c0030b 	ldhu	r3,12(r17)
   427b4:	3005883a 	mov	r2,r6
   427b8:	18c01014 	ori	r3,r3,64
   427bc:	88c0030d 	sth	r3,12(r17)
   427c0:	003fae06 	br	4267c <__sflush_r+0xd4>

000427c4 <_fflush_r>:
   427c4:	defffd04 	addi	sp,sp,-12
   427c8:	dc000115 	stw	r16,4(sp)
   427cc:	dfc00215 	stw	ra,8(sp)
   427d0:	2021883a 	mov	r16,r4
   427d4:	20000226 	beq	r4,zero,427e0 <_fflush_r+0x1c>
   427d8:	20800e17 	ldw	r2,56(r4)
   427dc:	10000c26 	beq	r2,zero,42810 <_fflush_r+0x4c>
   427e0:	2880030f 	ldh	r2,12(r5)
   427e4:	1000051e 	bne	r2,zero,427fc <_fflush_r+0x38>
   427e8:	0005883a 	mov	r2,zero
   427ec:	dfc00217 	ldw	ra,8(sp)
   427f0:	dc000117 	ldw	r16,4(sp)
   427f4:	dec00304 	addi	sp,sp,12
   427f8:	f800283a 	ret
   427fc:	8009883a 	mov	r4,r16
   42800:	dfc00217 	ldw	ra,8(sp)
   42804:	dc000117 	ldw	r16,4(sp)
   42808:	dec00304 	addi	sp,sp,12
   4280c:	00425a81 	jmpi	425a8 <__sflush_r>
   42810:	d9400015 	stw	r5,0(sp)
   42814:	004084c0 	call	4084c <__sinit>
   42818:	d9400017 	ldw	r5,0(sp)
   4281c:	003ff006 	br	427e0 <_fflush_r+0x1c>

00042820 <fflush>:
   42820:	20000526 	beq	r4,zero,42838 <fflush+0x18>
   42824:	00800134 	movhi	r2,4
   42828:	109d0b04 	addi	r2,r2,29740
   4282c:	200b883a 	mov	r5,r4
   42830:	11000017 	ldw	r4,0(r2)
   42834:	00427c41 	jmpi	427c4 <_fflush_r>
   42838:	00800134 	movhi	r2,4
   4283c:	109d0a04 	addi	r2,r2,29736
   42840:	11000017 	ldw	r4,0(r2)
   42844:	01400134 	movhi	r5,4
   42848:	2949f104 	addi	r5,r5,10180
   4284c:	0040e281 	jmpi	40e28 <_fwalk_reent>

00042850 <_malloc_trim_r>:
   42850:	defffb04 	addi	sp,sp,-20
   42854:	dcc00315 	stw	r19,12(sp)
   42858:	04c00134 	movhi	r19,4
   4285c:	dc800215 	stw	r18,8(sp)
   42860:	dc400115 	stw	r17,4(sp)
   42864:	dc000015 	stw	r16,0(sp)
   42868:	dfc00415 	stw	ra,16(sp)
   4286c:	2821883a 	mov	r16,r5
   42870:	9cd78604 	addi	r19,r19,24088
   42874:	2025883a 	mov	r18,r4
   42878:	00437280 	call	43728 <__malloc_lock>
   4287c:	98800217 	ldw	r2,8(r19)
   42880:	14400117 	ldw	r17,4(r2)
   42884:	00bfff04 	movi	r2,-4
   42888:	88a2703a 	and	r17,r17,r2
   4288c:	8c21c83a 	sub	r16,r17,r16
   42890:	8403fbc4 	addi	r16,r16,4079
   42894:	8020d33a 	srli	r16,r16,12
   42898:	0083ffc4 	movi	r2,4095
   4289c:	843fffc4 	addi	r16,r16,-1
   428a0:	8020933a 	slli	r16,r16,12
   428a4:	1400060e 	bge	r2,r16,428c0 <_malloc_trim_r+0x70>
   428a8:	000b883a 	mov	r5,zero
   428ac:	9009883a 	mov	r4,r18
   428b0:	004210c0 	call	4210c <_sbrk_r>
   428b4:	98c00217 	ldw	r3,8(r19)
   428b8:	1c47883a 	add	r3,r3,r17
   428bc:	10c00a26 	beq	r2,r3,428e8 <_malloc_trim_r+0x98>
   428c0:	9009883a 	mov	r4,r18
   428c4:	004374c0 	call	4374c <__malloc_unlock>
   428c8:	0005883a 	mov	r2,zero
   428cc:	dfc00417 	ldw	ra,16(sp)
   428d0:	dcc00317 	ldw	r19,12(sp)
   428d4:	dc800217 	ldw	r18,8(sp)
   428d8:	dc400117 	ldw	r17,4(sp)
   428dc:	dc000017 	ldw	r16,0(sp)
   428e0:	dec00504 	addi	sp,sp,20
   428e4:	f800283a 	ret
   428e8:	040bc83a 	sub	r5,zero,r16
   428ec:	9009883a 	mov	r4,r18
   428f0:	004210c0 	call	4210c <_sbrk_r>
   428f4:	00ffffc4 	movi	r3,-1
   428f8:	10c00d26 	beq	r2,r3,42930 <_malloc_trim_r+0xe0>
   428fc:	00c00174 	movhi	r3,5
   42900:	18e3be04 	addi	r3,r3,-28936
   42904:	18800017 	ldw	r2,0(r3)
   42908:	99000217 	ldw	r4,8(r19)
   4290c:	8c23c83a 	sub	r17,r17,r16
   42910:	8c400054 	ori	r17,r17,1
   42914:	1421c83a 	sub	r16,r2,r16
   42918:	24400115 	stw	r17,4(r4)
   4291c:	9009883a 	mov	r4,r18
   42920:	1c000015 	stw	r16,0(r3)
   42924:	004374c0 	call	4374c <__malloc_unlock>
   42928:	00800044 	movi	r2,1
   4292c:	003fe706 	br	428cc <_malloc_trim_r+0x7c>
   42930:	000b883a 	mov	r5,zero
   42934:	9009883a 	mov	r4,r18
   42938:	004210c0 	call	4210c <_sbrk_r>
   4293c:	99000217 	ldw	r4,8(r19)
   42940:	014003c4 	movi	r5,15
   42944:	1107c83a 	sub	r3,r2,r4
   42948:	28ffdd0e 	bge	r5,r3,428c0 <_malloc_trim_r+0x70>
   4294c:	01400134 	movhi	r5,4
   42950:	295d0c04 	addi	r5,r5,29744
   42954:	29400017 	ldw	r5,0(r5)
   42958:	18c00054 	ori	r3,r3,1
   4295c:	20c00115 	stw	r3,4(r4)
   42960:	00c00174 	movhi	r3,5
   42964:	1145c83a 	sub	r2,r2,r5
   42968:	18e3be04 	addi	r3,r3,-28936
   4296c:	18800015 	stw	r2,0(r3)
   42970:	003fd306 	br	428c0 <_malloc_trim_r+0x70>

00042974 <_free_r>:
   42974:	28004126 	beq	r5,zero,42a7c <_free_r+0x108>
   42978:	defffd04 	addi	sp,sp,-12
   4297c:	dc400115 	stw	r17,4(sp)
   42980:	dc000015 	stw	r16,0(sp)
   42984:	2023883a 	mov	r17,r4
   42988:	2821883a 	mov	r16,r5
   4298c:	dfc00215 	stw	ra,8(sp)
   42990:	00437280 	call	43728 <__malloc_lock>
   42994:	81ffff17 	ldw	r7,-4(r16)
   42998:	00bfff84 	movi	r2,-2
   4299c:	01000134 	movhi	r4,4
   429a0:	81bffe04 	addi	r6,r16,-8
   429a4:	3884703a 	and	r2,r7,r2
   429a8:	21178604 	addi	r4,r4,24088
   429ac:	308b883a 	add	r5,r6,r2
   429b0:	2a400117 	ldw	r9,4(r5)
   429b4:	22000217 	ldw	r8,8(r4)
   429b8:	00ffff04 	movi	r3,-4
   429bc:	48c6703a 	and	r3,r9,r3
   429c0:	2a005726 	beq	r5,r8,42b20 <_free_r+0x1ac>
   429c4:	28c00115 	stw	r3,4(r5)
   429c8:	39c0004c 	andi	r7,r7,1
   429cc:	3800091e 	bne	r7,zero,429f4 <_free_r+0x80>
   429d0:	823ffe17 	ldw	r8,-8(r16)
   429d4:	22400204 	addi	r9,r4,8
   429d8:	320dc83a 	sub	r6,r6,r8
   429dc:	31c00217 	ldw	r7,8(r6)
   429e0:	1205883a 	add	r2,r2,r8
   429e4:	3a406526 	beq	r7,r9,42b7c <_free_r+0x208>
   429e8:	32000317 	ldw	r8,12(r6)
   429ec:	3a000315 	stw	r8,12(r7)
   429f0:	41c00215 	stw	r7,8(r8)
   429f4:	28cf883a 	add	r7,r5,r3
   429f8:	39c00117 	ldw	r7,4(r7)
   429fc:	39c0004c 	andi	r7,r7,1
   42a00:	38003a26 	beq	r7,zero,42aec <_free_r+0x178>
   42a04:	10c00054 	ori	r3,r2,1
   42a08:	30c00115 	stw	r3,4(r6)
   42a0c:	3087883a 	add	r3,r6,r2
   42a10:	18800015 	stw	r2,0(r3)
   42a14:	00c07fc4 	movi	r3,511
   42a18:	18801936 	bltu	r3,r2,42a80 <_free_r+0x10c>
   42a1c:	1004d0fa 	srli	r2,r2,3
   42a20:	01c00044 	movi	r7,1
   42a24:	21400117 	ldw	r5,4(r4)
   42a28:	10c00044 	addi	r3,r2,1
   42a2c:	18c7883a 	add	r3,r3,r3
   42a30:	1005d0ba 	srai	r2,r2,2
   42a34:	18c7883a 	add	r3,r3,r3
   42a38:	18c7883a 	add	r3,r3,r3
   42a3c:	1907883a 	add	r3,r3,r4
   42a40:	3884983a 	sll	r2,r7,r2
   42a44:	19c00017 	ldw	r7,0(r3)
   42a48:	1a3ffe04 	addi	r8,r3,-8
   42a4c:	1144b03a 	or	r2,r2,r5
   42a50:	32000315 	stw	r8,12(r6)
   42a54:	31c00215 	stw	r7,8(r6)
   42a58:	20800115 	stw	r2,4(r4)
   42a5c:	19800015 	stw	r6,0(r3)
   42a60:	39800315 	stw	r6,12(r7)
   42a64:	8809883a 	mov	r4,r17
   42a68:	dfc00217 	ldw	ra,8(sp)
   42a6c:	dc400117 	ldw	r17,4(sp)
   42a70:	dc000017 	ldw	r16,0(sp)
   42a74:	dec00304 	addi	sp,sp,12
   42a78:	004374c1 	jmpi	4374c <__malloc_unlock>
   42a7c:	f800283a 	ret
   42a80:	100ad27a 	srli	r5,r2,9
   42a84:	00c00104 	movi	r3,4
   42a88:	19404a36 	bltu	r3,r5,42bb4 <_free_r+0x240>
   42a8c:	100ad1ba 	srli	r5,r2,6
   42a90:	28c00e44 	addi	r3,r5,57
   42a94:	18c7883a 	add	r3,r3,r3
   42a98:	29400e04 	addi	r5,r5,56
   42a9c:	18c7883a 	add	r3,r3,r3
   42aa0:	18c7883a 	add	r3,r3,r3
   42aa4:	1909883a 	add	r4,r3,r4
   42aa8:	20c00017 	ldw	r3,0(r4)
   42aac:	01c00134 	movhi	r7,4
   42ab0:	213ffe04 	addi	r4,r4,-8
   42ab4:	39d78604 	addi	r7,r7,24088
   42ab8:	20c04426 	beq	r4,r3,42bcc <_free_r+0x258>
   42abc:	01ffff04 	movi	r7,-4
   42ac0:	19400117 	ldw	r5,4(r3)
   42ac4:	29ca703a 	and	r5,r5,r7
   42ac8:	1140022e 	bgeu	r2,r5,42ad4 <_free_r+0x160>
   42acc:	18c00217 	ldw	r3,8(r3)
   42ad0:	20fffb1e 	bne	r4,r3,42ac0 <_free_r+0x14c>
   42ad4:	19000317 	ldw	r4,12(r3)
   42ad8:	31000315 	stw	r4,12(r6)
   42adc:	30c00215 	stw	r3,8(r6)
   42ae0:	21800215 	stw	r6,8(r4)
   42ae4:	19800315 	stw	r6,12(r3)
   42ae8:	003fde06 	br	42a64 <_free_r+0xf0>
   42aec:	29c00217 	ldw	r7,8(r5)
   42af0:	10c5883a 	add	r2,r2,r3
   42af4:	00c00134 	movhi	r3,4
   42af8:	18d78804 	addi	r3,r3,24096
   42afc:	38c03b26 	beq	r7,r3,42bec <_free_r+0x278>
   42b00:	2a000317 	ldw	r8,12(r5)
   42b04:	11400054 	ori	r5,r2,1
   42b08:	3087883a 	add	r3,r6,r2
   42b0c:	3a000315 	stw	r8,12(r7)
   42b10:	41c00215 	stw	r7,8(r8)
   42b14:	31400115 	stw	r5,4(r6)
   42b18:	18800015 	stw	r2,0(r3)
   42b1c:	003fbd06 	br	42a14 <_free_r+0xa0>
   42b20:	39c0004c 	andi	r7,r7,1
   42b24:	10c5883a 	add	r2,r2,r3
   42b28:	3800071e 	bne	r7,zero,42b48 <_free_r+0x1d4>
   42b2c:	81fffe17 	ldw	r7,-8(r16)
   42b30:	31cdc83a 	sub	r6,r6,r7
   42b34:	30c00317 	ldw	r3,12(r6)
   42b38:	31400217 	ldw	r5,8(r6)
   42b3c:	11c5883a 	add	r2,r2,r7
   42b40:	28c00315 	stw	r3,12(r5)
   42b44:	19400215 	stw	r5,8(r3)
   42b48:	10c00054 	ori	r3,r2,1
   42b4c:	30c00115 	stw	r3,4(r6)
   42b50:	00c00134 	movhi	r3,4
   42b54:	18dd0d04 	addi	r3,r3,29748
   42b58:	18c00017 	ldw	r3,0(r3)
   42b5c:	21800215 	stw	r6,8(r4)
   42b60:	10ffc036 	bltu	r2,r3,42a64 <_free_r+0xf0>
   42b64:	00800174 	movhi	r2,5
   42b68:	10a3b504 	addi	r2,r2,-28972
   42b6c:	11400017 	ldw	r5,0(r2)
   42b70:	8809883a 	mov	r4,r17
   42b74:	00428500 	call	42850 <_malloc_trim_r>
   42b78:	003fba06 	br	42a64 <_free_r+0xf0>
   42b7c:	28c9883a 	add	r4,r5,r3
   42b80:	21000117 	ldw	r4,4(r4)
   42b84:	2100004c 	andi	r4,r4,1
   42b88:	2000391e 	bne	r4,zero,42c70 <_free_r+0x2fc>
   42b8c:	29c00217 	ldw	r7,8(r5)
   42b90:	29000317 	ldw	r4,12(r5)
   42b94:	1885883a 	add	r2,r3,r2
   42b98:	10c00054 	ori	r3,r2,1
   42b9c:	39000315 	stw	r4,12(r7)
   42ba0:	21c00215 	stw	r7,8(r4)
   42ba4:	30c00115 	stw	r3,4(r6)
   42ba8:	308d883a 	add	r6,r6,r2
   42bac:	30800015 	stw	r2,0(r6)
   42bb0:	003fac06 	br	42a64 <_free_r+0xf0>
   42bb4:	00c00504 	movi	r3,20
   42bb8:	19401536 	bltu	r3,r5,42c10 <_free_r+0x29c>
   42bbc:	28c01704 	addi	r3,r5,92
   42bc0:	18c7883a 	add	r3,r3,r3
   42bc4:	294016c4 	addi	r5,r5,91
   42bc8:	003fb406 	br	42a9c <_free_r+0x128>
   42bcc:	280bd0ba 	srai	r5,r5,2
   42bd0:	00c00044 	movi	r3,1
   42bd4:	38800117 	ldw	r2,4(r7)
   42bd8:	194a983a 	sll	r5,r3,r5
   42bdc:	2007883a 	mov	r3,r4
   42be0:	2884b03a 	or	r2,r5,r2
   42be4:	38800115 	stw	r2,4(r7)
   42be8:	003fbb06 	br	42ad8 <_free_r+0x164>
   42bec:	21800515 	stw	r6,20(r4)
   42bf0:	21800415 	stw	r6,16(r4)
   42bf4:	10c00054 	ori	r3,r2,1
   42bf8:	31c00315 	stw	r7,12(r6)
   42bfc:	31c00215 	stw	r7,8(r6)
   42c00:	30c00115 	stw	r3,4(r6)
   42c04:	308d883a 	add	r6,r6,r2
   42c08:	30800015 	stw	r2,0(r6)
   42c0c:	003f9506 	br	42a64 <_free_r+0xf0>
   42c10:	00c01504 	movi	r3,84
   42c14:	19400536 	bltu	r3,r5,42c2c <_free_r+0x2b8>
   42c18:	100ad33a 	srli	r5,r2,12
   42c1c:	28c01bc4 	addi	r3,r5,111
   42c20:	18c7883a 	add	r3,r3,r3
   42c24:	29401b84 	addi	r5,r5,110
   42c28:	003f9c06 	br	42a9c <_free_r+0x128>
   42c2c:	00c05504 	movi	r3,340
   42c30:	19400536 	bltu	r3,r5,42c48 <_free_r+0x2d4>
   42c34:	100ad3fa 	srli	r5,r2,15
   42c38:	28c01e04 	addi	r3,r5,120
   42c3c:	18c7883a 	add	r3,r3,r3
   42c40:	29401dc4 	addi	r5,r5,119
   42c44:	003f9506 	br	42a9c <_free_r+0x128>
   42c48:	00c15504 	movi	r3,1364
   42c4c:	19400536 	bltu	r3,r5,42c64 <_free_r+0x2f0>
   42c50:	100ad4ba 	srli	r5,r2,18
   42c54:	28c01f44 	addi	r3,r5,125
   42c58:	18c7883a 	add	r3,r3,r3
   42c5c:	29401f04 	addi	r5,r5,124
   42c60:	003f8e06 	br	42a9c <_free_r+0x128>
   42c64:	00c03f84 	movi	r3,254
   42c68:	01401f84 	movi	r5,126
   42c6c:	003f8b06 	br	42a9c <_free_r+0x128>
   42c70:	10c00054 	ori	r3,r2,1
   42c74:	30c00115 	stw	r3,4(r6)
   42c78:	308d883a 	add	r6,r6,r2
   42c7c:	30800015 	stw	r2,0(r6)
   42c80:	003f7806 	br	42a64 <_free_r+0xf0>

00042c84 <_lseek_r>:
   42c84:	defffd04 	addi	sp,sp,-12
   42c88:	2805883a 	mov	r2,r5
   42c8c:	dc000015 	stw	r16,0(sp)
   42c90:	04000174 	movhi	r16,5
   42c94:	dc400115 	stw	r17,4(sp)
   42c98:	300b883a 	mov	r5,r6
   42c9c:	8423b604 	addi	r16,r16,-28968
   42ca0:	2023883a 	mov	r17,r4
   42ca4:	380d883a 	mov	r6,r7
   42ca8:	1009883a 	mov	r4,r2
   42cac:	dfc00215 	stw	ra,8(sp)
   42cb0:	80000015 	stw	zero,0(r16)
   42cb4:	00435d00 	call	435d0 <lseek>
   42cb8:	00ffffc4 	movi	r3,-1
   42cbc:	10c00526 	beq	r2,r3,42cd4 <_lseek_r+0x50>
   42cc0:	dfc00217 	ldw	ra,8(sp)
   42cc4:	dc400117 	ldw	r17,4(sp)
   42cc8:	dc000017 	ldw	r16,0(sp)
   42ccc:	dec00304 	addi	sp,sp,12
   42cd0:	f800283a 	ret
   42cd4:	80c00017 	ldw	r3,0(r16)
   42cd8:	183ff926 	beq	r3,zero,42cc0 <_lseek_r+0x3c>
   42cdc:	88c00015 	stw	r3,0(r17)
   42ce0:	003ff706 	br	42cc0 <_lseek_r+0x3c>

00042ce4 <__smakebuf_r>:
   42ce4:	2880030b 	ldhu	r2,12(r5)
   42ce8:	10c0008c 	andi	r3,r2,2
   42cec:	1800411e 	bne	r3,zero,42df4 <__smakebuf_r+0x110>
   42cf0:	deffec04 	addi	sp,sp,-80
   42cf4:	dc000f15 	stw	r16,60(sp)
   42cf8:	2821883a 	mov	r16,r5
   42cfc:	2940038f 	ldh	r5,14(r5)
   42d00:	dc401015 	stw	r17,64(sp)
   42d04:	dfc01315 	stw	ra,76(sp)
   42d08:	dcc01215 	stw	r19,72(sp)
   42d0c:	dc801115 	stw	r18,68(sp)
   42d10:	2023883a 	mov	r17,r4
   42d14:	28001c16 	blt	r5,zero,42d88 <__smakebuf_r+0xa4>
   42d18:	d80d883a 	mov	r6,sp
   42d1c:	0042f000 	call	42f00 <_fstat_r>
   42d20:	10001816 	blt	r2,zero,42d84 <__smakebuf_r+0xa0>
   42d24:	d8800117 	ldw	r2,4(sp)
   42d28:	00e00014 	movui	r3,32768
   42d2c:	10bc000c 	andi	r2,r2,61440
   42d30:	14c80020 	cmpeqi	r19,r2,8192
   42d34:	10c03726 	beq	r2,r3,42e14 <__smakebuf_r+0x130>
   42d38:	80c0030b 	ldhu	r3,12(r16)
   42d3c:	18c20014 	ori	r3,r3,2048
   42d40:	80c0030d 	sth	r3,12(r16)
   42d44:	00c80004 	movi	r3,8192
   42d48:	10c0521e 	bne	r2,r3,42e94 <__smakebuf_r+0x1b0>
   42d4c:	8140038f 	ldh	r5,14(r16)
   42d50:	8809883a 	mov	r4,r17
   42d54:	0042f5c0 	call	42f5c <_isatty_r>
   42d58:	10004c26 	beq	r2,zero,42e8c <__smakebuf_r+0x1a8>
   42d5c:	8080030b 	ldhu	r2,12(r16)
   42d60:	80c010c4 	addi	r3,r16,67
   42d64:	80c00015 	stw	r3,0(r16)
   42d68:	10800054 	ori	r2,r2,1
   42d6c:	8080030d 	sth	r2,12(r16)
   42d70:	00800044 	movi	r2,1
   42d74:	80c00415 	stw	r3,16(r16)
   42d78:	80800515 	stw	r2,20(r16)
   42d7c:	04810004 	movi	r18,1024
   42d80:	00000706 	br	42da0 <__smakebuf_r+0xbc>
   42d84:	8080030b 	ldhu	r2,12(r16)
   42d88:	10c0200c 	andi	r3,r2,128
   42d8c:	18001f1e 	bne	r3,zero,42e0c <__smakebuf_r+0x128>
   42d90:	04810004 	movi	r18,1024
   42d94:	10820014 	ori	r2,r2,2048
   42d98:	8080030d 	sth	r2,12(r16)
   42d9c:	0027883a 	mov	r19,zero
   42da0:	900b883a 	mov	r5,r18
   42da4:	8809883a 	mov	r4,r17
   42da8:	0040eec0 	call	40eec <_malloc_r>
   42dac:	10002c26 	beq	r2,zero,42e60 <__smakebuf_r+0x17c>
   42db0:	80c0030b 	ldhu	r3,12(r16)
   42db4:	01000134 	movhi	r4,4
   42db8:	21013d04 	addi	r4,r4,1268
   42dbc:	89000f15 	stw	r4,60(r17)
   42dc0:	18c02014 	ori	r3,r3,128
   42dc4:	80c0030d 	sth	r3,12(r16)
   42dc8:	80800015 	stw	r2,0(r16)
   42dcc:	80800415 	stw	r2,16(r16)
   42dd0:	84800515 	stw	r18,20(r16)
   42dd4:	98001a1e 	bne	r19,zero,42e40 <__smakebuf_r+0x15c>
   42dd8:	dfc01317 	ldw	ra,76(sp)
   42ddc:	dcc01217 	ldw	r19,72(sp)
   42de0:	dc801117 	ldw	r18,68(sp)
   42de4:	dc401017 	ldw	r17,64(sp)
   42de8:	dc000f17 	ldw	r16,60(sp)
   42dec:	dec01404 	addi	sp,sp,80
   42df0:	f800283a 	ret
   42df4:	288010c4 	addi	r2,r5,67
   42df8:	28800015 	stw	r2,0(r5)
   42dfc:	28800415 	stw	r2,16(r5)
   42e00:	00800044 	movi	r2,1
   42e04:	28800515 	stw	r2,20(r5)
   42e08:	f800283a 	ret
   42e0c:	04801004 	movi	r18,64
   42e10:	003fe006 	br	42d94 <__smakebuf_r+0xb0>
   42e14:	81000a17 	ldw	r4,40(r16)
   42e18:	00c00134 	movhi	r3,4
   42e1c:	18c88e04 	addi	r3,r3,8760
   42e20:	20ffc51e 	bne	r4,r3,42d38 <__smakebuf_r+0x54>
   42e24:	8080030b 	ldhu	r2,12(r16)
   42e28:	04810004 	movi	r18,1024
   42e2c:	84801315 	stw	r18,76(r16)
   42e30:	1484b03a 	or	r2,r2,r18
   42e34:	8080030d 	sth	r2,12(r16)
   42e38:	0027883a 	mov	r19,zero
   42e3c:	003fd806 	br	42da0 <__smakebuf_r+0xbc>
   42e40:	8140038f 	ldh	r5,14(r16)
   42e44:	8809883a 	mov	r4,r17
   42e48:	0042f5c0 	call	42f5c <_isatty_r>
   42e4c:	103fe226 	beq	r2,zero,42dd8 <__smakebuf_r+0xf4>
   42e50:	8080030b 	ldhu	r2,12(r16)
   42e54:	10800054 	ori	r2,r2,1
   42e58:	8080030d 	sth	r2,12(r16)
   42e5c:	003fde06 	br	42dd8 <__smakebuf_r+0xf4>
   42e60:	8080030b 	ldhu	r2,12(r16)
   42e64:	10c0800c 	andi	r3,r2,512
   42e68:	183fdb1e 	bne	r3,zero,42dd8 <__smakebuf_r+0xf4>
   42e6c:	10800094 	ori	r2,r2,2
   42e70:	80c010c4 	addi	r3,r16,67
   42e74:	8080030d 	sth	r2,12(r16)
   42e78:	00800044 	movi	r2,1
   42e7c:	80c00015 	stw	r3,0(r16)
   42e80:	80c00415 	stw	r3,16(r16)
   42e84:	80800515 	stw	r2,20(r16)
   42e88:	003fd306 	br	42dd8 <__smakebuf_r+0xf4>
   42e8c:	04810004 	movi	r18,1024
   42e90:	003fc306 	br	42da0 <__smakebuf_r+0xbc>
   42e94:	0027883a 	mov	r19,zero
   42e98:	04810004 	movi	r18,1024
   42e9c:	003fc006 	br	42da0 <__smakebuf_r+0xbc>

00042ea0 <_read_r>:
   42ea0:	defffd04 	addi	sp,sp,-12
   42ea4:	2805883a 	mov	r2,r5
   42ea8:	dc000015 	stw	r16,0(sp)
   42eac:	04000174 	movhi	r16,5
   42eb0:	dc400115 	stw	r17,4(sp)
   42eb4:	300b883a 	mov	r5,r6
   42eb8:	8423b604 	addi	r16,r16,-28968
   42ebc:	2023883a 	mov	r17,r4
   42ec0:	380d883a 	mov	r6,r7
   42ec4:	1009883a 	mov	r4,r2
   42ec8:	dfc00215 	stw	ra,8(sp)
   42ecc:	80000015 	stw	zero,0(r16)
   42ed0:	00437ac0 	call	437ac <read>
   42ed4:	00ffffc4 	movi	r3,-1
   42ed8:	10c00526 	beq	r2,r3,42ef0 <_read_r+0x50>
   42edc:	dfc00217 	ldw	ra,8(sp)
   42ee0:	dc400117 	ldw	r17,4(sp)
   42ee4:	dc000017 	ldw	r16,0(sp)
   42ee8:	dec00304 	addi	sp,sp,12
   42eec:	f800283a 	ret
   42ef0:	80c00017 	ldw	r3,0(r16)
   42ef4:	183ff926 	beq	r3,zero,42edc <_read_r+0x3c>
   42ef8:	88c00015 	stw	r3,0(r17)
   42efc:	003ff706 	br	42edc <_read_r+0x3c>

00042f00 <_fstat_r>:
   42f00:	defffd04 	addi	sp,sp,-12
   42f04:	2805883a 	mov	r2,r5
   42f08:	dc000015 	stw	r16,0(sp)
   42f0c:	04000174 	movhi	r16,5
   42f10:	dc400115 	stw	r17,4(sp)
   42f14:	8423b604 	addi	r16,r16,-28968
   42f18:	2023883a 	mov	r17,r4
   42f1c:	300b883a 	mov	r5,r6
   42f20:	1009883a 	mov	r4,r2
   42f24:	dfc00215 	stw	ra,8(sp)
   42f28:	80000015 	stw	zero,0(r16)
   42f2c:	00433080 	call	43308 <fstat>
   42f30:	00ffffc4 	movi	r3,-1
   42f34:	10c00526 	beq	r2,r3,42f4c <_fstat_r+0x4c>
   42f38:	dfc00217 	ldw	ra,8(sp)
   42f3c:	dc400117 	ldw	r17,4(sp)
   42f40:	dc000017 	ldw	r16,0(sp)
   42f44:	dec00304 	addi	sp,sp,12
   42f48:	f800283a 	ret
   42f4c:	80c00017 	ldw	r3,0(r16)
   42f50:	183ff926 	beq	r3,zero,42f38 <_fstat_r+0x38>
   42f54:	88c00015 	stw	r3,0(r17)
   42f58:	003ff706 	br	42f38 <_fstat_r+0x38>

00042f5c <_isatty_r>:
   42f5c:	defffd04 	addi	sp,sp,-12
   42f60:	dc000015 	stw	r16,0(sp)
   42f64:	04000174 	movhi	r16,5
   42f68:	dc400115 	stw	r17,4(sp)
   42f6c:	8423b604 	addi	r16,r16,-28968
   42f70:	2023883a 	mov	r17,r4
   42f74:	2809883a 	mov	r4,r5
   42f78:	dfc00215 	stw	ra,8(sp)
   42f7c:	80000015 	stw	zero,0(r16)
   42f80:	00433fc0 	call	433fc <isatty>
   42f84:	00ffffc4 	movi	r3,-1
   42f88:	10c00526 	beq	r2,r3,42fa0 <_isatty_r+0x44>
   42f8c:	dfc00217 	ldw	ra,8(sp)
   42f90:	dc400117 	ldw	r17,4(sp)
   42f94:	dc000017 	ldw	r16,0(sp)
   42f98:	dec00304 	addi	sp,sp,12
   42f9c:	f800283a 	ret
   42fa0:	80c00017 	ldw	r3,0(r16)
   42fa4:	183ff926 	beq	r3,zero,42f8c <_isatty_r+0x30>
   42fa8:	88c00015 	stw	r3,0(r17)
   42fac:	003ff706 	br	42f8c <_isatty_r+0x30>

00042fb0 <__divsi3>:
   42fb0:	20001b16 	blt	r4,zero,43020 <__divsi3+0x70>
   42fb4:	000f883a 	mov	r7,zero
   42fb8:	28001616 	blt	r5,zero,43014 <__divsi3+0x64>
   42fbc:	200d883a 	mov	r6,r4
   42fc0:	29001a2e 	bgeu	r5,r4,4302c <__divsi3+0x7c>
   42fc4:	00800804 	movi	r2,32
   42fc8:	00c00044 	movi	r3,1
   42fcc:	00000106 	br	42fd4 <__divsi3+0x24>
   42fd0:	10000d26 	beq	r2,zero,43008 <__divsi3+0x58>
   42fd4:	294b883a 	add	r5,r5,r5
   42fd8:	10bfffc4 	addi	r2,r2,-1
   42fdc:	18c7883a 	add	r3,r3,r3
   42fe0:	293ffb36 	bltu	r5,r4,42fd0 <__divsi3+0x20>
   42fe4:	0005883a 	mov	r2,zero
   42fe8:	18000726 	beq	r3,zero,43008 <__divsi3+0x58>
   42fec:	0005883a 	mov	r2,zero
   42ff0:	31400236 	bltu	r6,r5,42ffc <__divsi3+0x4c>
   42ff4:	314dc83a 	sub	r6,r6,r5
   42ff8:	10c4b03a 	or	r2,r2,r3
   42ffc:	1806d07a 	srli	r3,r3,1
   43000:	280ad07a 	srli	r5,r5,1
   43004:	183ffa1e 	bne	r3,zero,42ff0 <__divsi3+0x40>
   43008:	38000126 	beq	r7,zero,43010 <__divsi3+0x60>
   4300c:	0085c83a 	sub	r2,zero,r2
   43010:	f800283a 	ret
   43014:	014bc83a 	sub	r5,zero,r5
   43018:	39c0005c 	xori	r7,r7,1
   4301c:	003fe706 	br	42fbc <__divsi3+0xc>
   43020:	0109c83a 	sub	r4,zero,r4
   43024:	01c00044 	movi	r7,1
   43028:	003fe306 	br	42fb8 <__divsi3+0x8>
   4302c:	00c00044 	movi	r3,1
   43030:	003fee06 	br	42fec <__divsi3+0x3c>

00043034 <__modsi3>:
   43034:	20001716 	blt	r4,zero,43094 <__modsi3+0x60>
   43038:	000f883a 	mov	r7,zero
   4303c:	2005883a 	mov	r2,r4
   43040:	28001216 	blt	r5,zero,4308c <__modsi3+0x58>
   43044:	2900162e 	bgeu	r5,r4,430a0 <__modsi3+0x6c>
   43048:	01800804 	movi	r6,32
   4304c:	00c00044 	movi	r3,1
   43050:	00000106 	br	43058 <__modsi3+0x24>
   43054:	30000a26 	beq	r6,zero,43080 <__modsi3+0x4c>
   43058:	294b883a 	add	r5,r5,r5
   4305c:	31bfffc4 	addi	r6,r6,-1
   43060:	18c7883a 	add	r3,r3,r3
   43064:	293ffb36 	bltu	r5,r4,43054 <__modsi3+0x20>
   43068:	18000526 	beq	r3,zero,43080 <__modsi3+0x4c>
   4306c:	1806d07a 	srli	r3,r3,1
   43070:	11400136 	bltu	r2,r5,43078 <__modsi3+0x44>
   43074:	1145c83a 	sub	r2,r2,r5
   43078:	280ad07a 	srli	r5,r5,1
   4307c:	183ffb1e 	bne	r3,zero,4306c <__modsi3+0x38>
   43080:	38000126 	beq	r7,zero,43088 <__modsi3+0x54>
   43084:	0085c83a 	sub	r2,zero,r2
   43088:	f800283a 	ret
   4308c:	014bc83a 	sub	r5,zero,r5
   43090:	003fec06 	br	43044 <__modsi3+0x10>
   43094:	0109c83a 	sub	r4,zero,r4
   43098:	01c00044 	movi	r7,1
   4309c:	003fe706 	br	4303c <__modsi3+0x8>
   430a0:	00c00044 	movi	r3,1
   430a4:	003ff106 	br	4306c <__modsi3+0x38>

000430a8 <__udivsi3>:
   430a8:	200d883a 	mov	r6,r4
   430ac:	2900152e 	bgeu	r5,r4,43104 <__udivsi3+0x5c>
   430b0:	28001416 	blt	r5,zero,43104 <__udivsi3+0x5c>
   430b4:	00800804 	movi	r2,32
   430b8:	00c00044 	movi	r3,1
   430bc:	00000206 	br	430c8 <__udivsi3+0x20>
   430c0:	10000e26 	beq	r2,zero,430fc <__udivsi3+0x54>
   430c4:	28000516 	blt	r5,zero,430dc <__udivsi3+0x34>
   430c8:	294b883a 	add	r5,r5,r5
   430cc:	10bfffc4 	addi	r2,r2,-1
   430d0:	18c7883a 	add	r3,r3,r3
   430d4:	293ffa36 	bltu	r5,r4,430c0 <__udivsi3+0x18>
   430d8:	18000826 	beq	r3,zero,430fc <__udivsi3+0x54>
   430dc:	0005883a 	mov	r2,zero
   430e0:	31400236 	bltu	r6,r5,430ec <__udivsi3+0x44>
   430e4:	314dc83a 	sub	r6,r6,r5
   430e8:	10c4b03a 	or	r2,r2,r3
   430ec:	1806d07a 	srli	r3,r3,1
   430f0:	280ad07a 	srli	r5,r5,1
   430f4:	183ffa1e 	bne	r3,zero,430e0 <__udivsi3+0x38>
   430f8:	f800283a 	ret
   430fc:	0005883a 	mov	r2,zero
   43100:	f800283a 	ret
   43104:	00c00044 	movi	r3,1
   43108:	003ff406 	br	430dc <__udivsi3+0x34>

0004310c <__umodsi3>:
   4310c:	2005883a 	mov	r2,r4
   43110:	2900122e 	bgeu	r5,r4,4315c <__umodsi3+0x50>
   43114:	28001116 	blt	r5,zero,4315c <__umodsi3+0x50>
   43118:	01800804 	movi	r6,32
   4311c:	00c00044 	movi	r3,1
   43120:	00000206 	br	4312c <__umodsi3+0x20>
   43124:	30000c26 	beq	r6,zero,43158 <__umodsi3+0x4c>
   43128:	28000516 	blt	r5,zero,43140 <__umodsi3+0x34>
   4312c:	294b883a 	add	r5,r5,r5
   43130:	31bfffc4 	addi	r6,r6,-1
   43134:	18c7883a 	add	r3,r3,r3
   43138:	293ffa36 	bltu	r5,r4,43124 <__umodsi3+0x18>
   4313c:	18000626 	beq	r3,zero,43158 <__umodsi3+0x4c>
   43140:	1806d07a 	srli	r3,r3,1
   43144:	11400136 	bltu	r2,r5,4314c <__umodsi3+0x40>
   43148:	1145c83a 	sub	r2,r2,r5
   4314c:	280ad07a 	srli	r5,r5,1
   43150:	183ffb1e 	bne	r3,zero,43140 <__umodsi3+0x34>
   43154:	f800283a 	ret
   43158:	f800283a 	ret
   4315c:	00c00044 	movi	r3,1
   43160:	003ff706 	br	43140 <__umodsi3+0x34>

00043164 <__mulsi3>:
   43164:	0005883a 	mov	r2,zero
   43168:	20000726 	beq	r4,zero,43188 <__mulsi3+0x24>
   4316c:	20c0004c 	andi	r3,r4,1
   43170:	2008d07a 	srli	r4,r4,1
   43174:	18000126 	beq	r3,zero,4317c <__mulsi3+0x18>
   43178:	1145883a 	add	r2,r2,r5
   4317c:	294b883a 	add	r5,r5,r5
   43180:	203ffa1e 	bne	r4,zero,4316c <__mulsi3+0x8>
   43184:	f800283a 	ret
   43188:	f800283a 	ret

0004318c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4318c:	defffe04 	addi	sp,sp,-8
   43190:	dfc00115 	stw	ra,4(sp)
   43194:	df000015 	stw	fp,0(sp)
   43198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4319c:	d0a00917 	ldw	r2,-32732(gp)
   431a0:	10000326 	beq	r2,zero,431b0 <alt_get_errno+0x24>
   431a4:	d0a00917 	ldw	r2,-32732(gp)
   431a8:	103ee83a 	callr	r2
   431ac:	00000106 	br	431b4 <alt_get_errno+0x28>
   431b0:	d0a6ac04 	addi	r2,gp,-25936
}
   431b4:	e037883a 	mov	sp,fp
   431b8:	dfc00117 	ldw	ra,4(sp)
   431bc:	df000017 	ldw	fp,0(sp)
   431c0:	dec00204 	addi	sp,sp,8
   431c4:	f800283a 	ret

000431c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   431c8:	defffb04 	addi	sp,sp,-20
   431cc:	dfc00415 	stw	ra,16(sp)
   431d0:	df000315 	stw	fp,12(sp)
   431d4:	df000304 	addi	fp,sp,12
   431d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   431dc:	e0bfff17 	ldw	r2,-4(fp)
   431e0:	10000816 	blt	r2,zero,43204 <close+0x3c>
   431e4:	01400304 	movi	r5,12
   431e8:	e13fff17 	ldw	r4,-4(fp)
   431ec:	00431640 	call	43164 <__mulsi3>
   431f0:	1007883a 	mov	r3,r2
   431f4:	00800134 	movhi	r2,4
   431f8:	10989204 	addi	r2,r2,25160
   431fc:	1885883a 	add	r2,r3,r2
   43200:	00000106 	br	43208 <close+0x40>
   43204:	0005883a 	mov	r2,zero
   43208:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4320c:	e0bffd17 	ldw	r2,-12(fp)
   43210:	10001926 	beq	r2,zero,43278 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43214:	e0bffd17 	ldw	r2,-12(fp)
   43218:	10800017 	ldw	r2,0(r2)
   4321c:	10800417 	ldw	r2,16(r2)
   43220:	10000626 	beq	r2,zero,4323c <close+0x74>
   43224:	e0bffd17 	ldw	r2,-12(fp)
   43228:	10800017 	ldw	r2,0(r2)
   4322c:	10800417 	ldw	r2,16(r2)
   43230:	e13ffd17 	ldw	r4,-12(fp)
   43234:	103ee83a 	callr	r2
   43238:	00000106 	br	43240 <close+0x78>
   4323c:	0005883a 	mov	r2,zero
   43240:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43244:	e13fff17 	ldw	r4,-4(fp)
   43248:	00438b00 	call	438b0 <alt_release_fd>
    if (rval < 0)
   4324c:	e0bffe17 	ldw	r2,-8(fp)
   43250:	1000070e 	bge	r2,zero,43270 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   43254:	004318c0 	call	4318c <alt_get_errno>
   43258:	1007883a 	mov	r3,r2
   4325c:	e0bffe17 	ldw	r2,-8(fp)
   43260:	0085c83a 	sub	r2,zero,r2
   43264:	18800015 	stw	r2,0(r3)
      return -1;
   43268:	00bfffc4 	movi	r2,-1
   4326c:	00000706 	br	4328c <close+0xc4>
    }
    return 0;
   43270:	0005883a 	mov	r2,zero
   43274:	00000506 	br	4328c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43278:	004318c0 	call	4318c <alt_get_errno>
   4327c:	1007883a 	mov	r3,r2
   43280:	00801444 	movi	r2,81
   43284:	18800015 	stw	r2,0(r3)
    return -1;
   43288:	00bfffc4 	movi	r2,-1
  }
}
   4328c:	e037883a 	mov	sp,fp
   43290:	dfc00117 	ldw	ra,4(sp)
   43294:	df000017 	ldw	fp,0(sp)
   43298:	dec00204 	addi	sp,sp,8
   4329c:	f800283a 	ret

000432a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   432a0:	defffc04 	addi	sp,sp,-16
   432a4:	df000315 	stw	fp,12(sp)
   432a8:	df000304 	addi	fp,sp,12
   432ac:	e13ffd15 	stw	r4,-12(fp)
   432b0:	e17ffe15 	stw	r5,-8(fp)
   432b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   432b8:	e0bfff17 	ldw	r2,-4(fp)
}
   432bc:	e037883a 	mov	sp,fp
   432c0:	df000017 	ldw	fp,0(sp)
   432c4:	dec00104 	addi	sp,sp,4
   432c8:	f800283a 	ret

000432cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432cc:	defffe04 	addi	sp,sp,-8
   432d0:	dfc00115 	stw	ra,4(sp)
   432d4:	df000015 	stw	fp,0(sp)
   432d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432dc:	d0a00917 	ldw	r2,-32732(gp)
   432e0:	10000326 	beq	r2,zero,432f0 <alt_get_errno+0x24>
   432e4:	d0a00917 	ldw	r2,-32732(gp)
   432e8:	103ee83a 	callr	r2
   432ec:	00000106 	br	432f4 <alt_get_errno+0x28>
   432f0:	d0a6ac04 	addi	r2,gp,-25936
}
   432f4:	e037883a 	mov	sp,fp
   432f8:	dfc00117 	ldw	ra,4(sp)
   432fc:	df000017 	ldw	fp,0(sp)
   43300:	dec00204 	addi	sp,sp,8
   43304:	f800283a 	ret

00043308 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   43308:	defffb04 	addi	sp,sp,-20
   4330c:	dfc00415 	stw	ra,16(sp)
   43310:	df000315 	stw	fp,12(sp)
   43314:	df000304 	addi	fp,sp,12
   43318:	e13ffe15 	stw	r4,-8(fp)
   4331c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43320:	e0bffe17 	ldw	r2,-8(fp)
   43324:	10000816 	blt	r2,zero,43348 <fstat+0x40>
   43328:	01400304 	movi	r5,12
   4332c:	e13ffe17 	ldw	r4,-8(fp)
   43330:	00431640 	call	43164 <__mulsi3>
   43334:	1007883a 	mov	r3,r2
   43338:	00800134 	movhi	r2,4
   4333c:	10989204 	addi	r2,r2,25160
   43340:	1885883a 	add	r2,r3,r2
   43344:	00000106 	br	4334c <fstat+0x44>
   43348:	0005883a 	mov	r2,zero
   4334c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43350:	e0bffd17 	ldw	r2,-12(fp)
   43354:	10001026 	beq	r2,zero,43398 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43358:	e0bffd17 	ldw	r2,-12(fp)
   4335c:	10800017 	ldw	r2,0(r2)
   43360:	10800817 	ldw	r2,32(r2)
   43364:	10000726 	beq	r2,zero,43384 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   43368:	e0bffd17 	ldw	r2,-12(fp)
   4336c:	10800017 	ldw	r2,0(r2)
   43370:	10800817 	ldw	r2,32(r2)
   43374:	e17fff17 	ldw	r5,-4(fp)
   43378:	e13ffd17 	ldw	r4,-12(fp)
   4337c:	103ee83a 	callr	r2
   43380:	00000a06 	br	433ac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43384:	e0bfff17 	ldw	r2,-4(fp)
   43388:	00c80004 	movi	r3,8192
   4338c:	10c00115 	stw	r3,4(r2)
      return 0;
   43390:	0005883a 	mov	r2,zero
   43394:	00000506 	br	433ac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43398:	00432cc0 	call	432cc <alt_get_errno>
   4339c:	1007883a 	mov	r3,r2
   433a0:	00801444 	movi	r2,81
   433a4:	18800015 	stw	r2,0(r3)
    return -1;
   433a8:	00bfffc4 	movi	r2,-1
  }
}
   433ac:	e037883a 	mov	sp,fp
   433b0:	dfc00117 	ldw	ra,4(sp)
   433b4:	df000017 	ldw	fp,0(sp)
   433b8:	dec00204 	addi	sp,sp,8
   433bc:	f800283a 	ret

000433c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   433c0:	defffe04 	addi	sp,sp,-8
   433c4:	dfc00115 	stw	ra,4(sp)
   433c8:	df000015 	stw	fp,0(sp)
   433cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   433d0:	d0a00917 	ldw	r2,-32732(gp)
   433d4:	10000326 	beq	r2,zero,433e4 <alt_get_errno+0x24>
   433d8:	d0a00917 	ldw	r2,-32732(gp)
   433dc:	103ee83a 	callr	r2
   433e0:	00000106 	br	433e8 <alt_get_errno+0x28>
   433e4:	d0a6ac04 	addi	r2,gp,-25936
}
   433e8:	e037883a 	mov	sp,fp
   433ec:	dfc00117 	ldw	ra,4(sp)
   433f0:	df000017 	ldw	fp,0(sp)
   433f4:	dec00204 	addi	sp,sp,8
   433f8:	f800283a 	ret

000433fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   433fc:	deffed04 	addi	sp,sp,-76
   43400:	dfc01215 	stw	ra,72(sp)
   43404:	df001115 	stw	fp,68(sp)
   43408:	df001104 	addi	fp,sp,68
   4340c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43410:	e0bfff17 	ldw	r2,-4(fp)
   43414:	10000816 	blt	r2,zero,43438 <isatty+0x3c>
   43418:	01400304 	movi	r5,12
   4341c:	e13fff17 	ldw	r4,-4(fp)
   43420:	00431640 	call	43164 <__mulsi3>
   43424:	1007883a 	mov	r3,r2
   43428:	00800134 	movhi	r2,4
   4342c:	10989204 	addi	r2,r2,25160
   43430:	1885883a 	add	r2,r3,r2
   43434:	00000106 	br	4343c <isatty+0x40>
   43438:	0005883a 	mov	r2,zero
   4343c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43440:	e0bfef17 	ldw	r2,-68(fp)
   43444:	10000e26 	beq	r2,zero,43480 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43448:	e0bfef17 	ldw	r2,-68(fp)
   4344c:	10800017 	ldw	r2,0(r2)
   43450:	10800817 	ldw	r2,32(r2)
   43454:	1000021e 	bne	r2,zero,43460 <isatty+0x64>
    {
      return 1;
   43458:	00800044 	movi	r2,1
   4345c:	00000d06 	br	43494 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43460:	e0bff004 	addi	r2,fp,-64
   43464:	100b883a 	mov	r5,r2
   43468:	e13fff17 	ldw	r4,-4(fp)
   4346c:	00433080 	call	43308 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43470:	e0bff117 	ldw	r2,-60(fp)
   43474:	10880020 	cmpeqi	r2,r2,8192
   43478:	10803fcc 	andi	r2,r2,255
   4347c:	00000506 	br	43494 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43480:	00433c00 	call	433c0 <alt_get_errno>
   43484:	1007883a 	mov	r3,r2
   43488:	00801444 	movi	r2,81
   4348c:	18800015 	stw	r2,0(r3)
    return 0;
   43490:	0005883a 	mov	r2,zero
  }
}
   43494:	e037883a 	mov	sp,fp
   43498:	dfc00117 	ldw	ra,4(sp)
   4349c:	df000017 	ldw	fp,0(sp)
   434a0:	dec00204 	addi	sp,sp,8
   434a4:	f800283a 	ret

000434a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   434a8:	defffc04 	addi	sp,sp,-16
   434ac:	df000315 	stw	fp,12(sp)
   434b0:	df000304 	addi	fp,sp,12
   434b4:	e13ffd15 	stw	r4,-12(fp)
   434b8:	e17ffe15 	stw	r5,-8(fp)
   434bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   434c0:	e0fffe17 	ldw	r3,-8(fp)
   434c4:	e0bffd17 	ldw	r2,-12(fp)
   434c8:	18800c26 	beq	r3,r2,434fc <alt_load_section+0x54>
  {
    while( to != end )
   434cc:	00000806 	br	434f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   434d0:	e0bffe17 	ldw	r2,-8(fp)
   434d4:	10c00104 	addi	r3,r2,4
   434d8:	e0fffe15 	stw	r3,-8(fp)
   434dc:	e0fffd17 	ldw	r3,-12(fp)
   434e0:	19000104 	addi	r4,r3,4
   434e4:	e13ffd15 	stw	r4,-12(fp)
   434e8:	18c00017 	ldw	r3,0(r3)
   434ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   434f0:	e0fffe17 	ldw	r3,-8(fp)
   434f4:	e0bfff17 	ldw	r2,-4(fp)
   434f8:	18bff51e 	bne	r3,r2,434d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   434fc:	0001883a 	nop
   43500:	e037883a 	mov	sp,fp
   43504:	df000017 	ldw	fp,0(sp)
   43508:	dec00104 	addi	sp,sp,4
   4350c:	f800283a 	ret

00043510 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43510:	defffe04 	addi	sp,sp,-8
   43514:	dfc00115 	stw	ra,4(sp)
   43518:	df000015 	stw	fp,0(sp)
   4351c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43520:	01800134 	movhi	r6,4
   43524:	319d1804 	addi	r6,r6,29792
   43528:	01400134 	movhi	r5,4
   4352c:	29567d04 	addi	r5,r5,23028
   43530:	01000134 	movhi	r4,4
   43534:	211d1804 	addi	r4,r4,29792
   43538:	00434a80 	call	434a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4353c:	01800134 	movhi	r6,4
   43540:	31808c04 	addi	r6,r6,560
   43544:	01400134 	movhi	r5,4
   43548:	29400804 	addi	r5,r5,32
   4354c:	01000134 	movhi	r4,4
   43550:	21000804 	addi	r4,r4,32
   43554:	00434a80 	call	434a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43558:	01800134 	movhi	r6,4
   4355c:	31967d04 	addi	r6,r6,23028
   43560:	01400134 	movhi	r5,4
   43564:	29566a04 	addi	r5,r5,22952
   43568:	01000134 	movhi	r4,4
   4356c:	21166a04 	addi	r4,r4,22952
   43570:	00434a80 	call	434a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43574:	00448f00 	call	448f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43578:	0044ab00 	call	44ab0 <alt_icache_flush_all>
}
   4357c:	0001883a 	nop
   43580:	e037883a 	mov	sp,fp
   43584:	dfc00117 	ldw	ra,4(sp)
   43588:	df000017 	ldw	fp,0(sp)
   4358c:	dec00204 	addi	sp,sp,8
   43590:	f800283a 	ret

00043594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43594:	defffe04 	addi	sp,sp,-8
   43598:	dfc00115 	stw	ra,4(sp)
   4359c:	df000015 	stw	fp,0(sp)
   435a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   435a4:	d0a00917 	ldw	r2,-32732(gp)
   435a8:	10000326 	beq	r2,zero,435b8 <alt_get_errno+0x24>
   435ac:	d0a00917 	ldw	r2,-32732(gp)
   435b0:	103ee83a 	callr	r2
   435b4:	00000106 	br	435bc <alt_get_errno+0x28>
   435b8:	d0a6ac04 	addi	r2,gp,-25936
}
   435bc:	e037883a 	mov	sp,fp
   435c0:	dfc00117 	ldw	ra,4(sp)
   435c4:	df000017 	ldw	fp,0(sp)
   435c8:	dec00204 	addi	sp,sp,8
   435cc:	f800283a 	ret

000435d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   435d0:	defff904 	addi	sp,sp,-28
   435d4:	dfc00615 	stw	ra,24(sp)
   435d8:	df000515 	stw	fp,20(sp)
   435dc:	df000504 	addi	fp,sp,20
   435e0:	e13ffd15 	stw	r4,-12(fp)
   435e4:	e17ffe15 	stw	r5,-8(fp)
   435e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   435ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   435f0:	e0bffd17 	ldw	r2,-12(fp)
   435f4:	10000816 	blt	r2,zero,43618 <lseek+0x48>
   435f8:	01400304 	movi	r5,12
   435fc:	e13ffd17 	ldw	r4,-12(fp)
   43600:	00431640 	call	43164 <__mulsi3>
   43604:	1007883a 	mov	r3,r2
   43608:	00800134 	movhi	r2,4
   4360c:	10989204 	addi	r2,r2,25160
   43610:	1885883a 	add	r2,r3,r2
   43614:	00000106 	br	4361c <lseek+0x4c>
   43618:	0005883a 	mov	r2,zero
   4361c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   43620:	e0bffc17 	ldw	r2,-16(fp)
   43624:	10001026 	beq	r2,zero,43668 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43628:	e0bffc17 	ldw	r2,-16(fp)
   4362c:	10800017 	ldw	r2,0(r2)
   43630:	10800717 	ldw	r2,28(r2)
   43634:	10000926 	beq	r2,zero,4365c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43638:	e0bffc17 	ldw	r2,-16(fp)
   4363c:	10800017 	ldw	r2,0(r2)
   43640:	10800717 	ldw	r2,28(r2)
   43644:	e1bfff17 	ldw	r6,-4(fp)
   43648:	e17ffe17 	ldw	r5,-8(fp)
   4364c:	e13ffc17 	ldw	r4,-16(fp)
   43650:	103ee83a 	callr	r2
   43654:	e0bffb15 	stw	r2,-20(fp)
   43658:	00000506 	br	43670 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4365c:	00bfde84 	movi	r2,-134
   43660:	e0bffb15 	stw	r2,-20(fp)
   43664:	00000206 	br	43670 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   43668:	00bfebc4 	movi	r2,-81
   4366c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43670:	e0bffb17 	ldw	r2,-20(fp)
   43674:	1000070e 	bge	r2,zero,43694 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   43678:	00435940 	call	43594 <alt_get_errno>
   4367c:	1007883a 	mov	r3,r2
   43680:	e0bffb17 	ldw	r2,-20(fp)
   43684:	0085c83a 	sub	r2,zero,r2
   43688:	18800015 	stw	r2,0(r3)
    rc = -1;
   4368c:	00bfffc4 	movi	r2,-1
   43690:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43694:	e0bffb17 	ldw	r2,-20(fp)
}
   43698:	e037883a 	mov	sp,fp
   4369c:	dfc00117 	ldw	ra,4(sp)
   436a0:	df000017 	ldw	fp,0(sp)
   436a4:	dec00204 	addi	sp,sp,8
   436a8:	f800283a 	ret

000436ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   436ac:	defffd04 	addi	sp,sp,-12
   436b0:	dfc00215 	stw	ra,8(sp)
   436b4:	df000115 	stw	fp,4(sp)
   436b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   436bc:	0009883a 	mov	r4,zero
   436c0:	0043b840 	call	43b84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   436c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   436c8:	0043bbc0 	call	43bbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   436cc:	01800134 	movhi	r6,4
   436d0:	31967304 	addi	r6,r6,22988
   436d4:	01400134 	movhi	r5,4
   436d8:	29567304 	addi	r5,r5,22988
   436dc:	01000134 	movhi	r4,4
   436e0:	21167304 	addi	r4,r4,22988
   436e4:	0044e540 	call	44e54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   436e8:	00449f00 	call	449f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   436ec:	01000134 	movhi	r4,4
   436f0:	21129404 	addi	r4,r4,19024
   436f4:	00456140 	call	45614 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   436f8:	d0a6ad17 	ldw	r2,-25932(gp)
   436fc:	d0e6ae17 	ldw	r3,-25928(gp)
   43700:	d126af17 	ldw	r4,-25924(gp)
   43704:	200d883a 	mov	r6,r4
   43708:	180b883a 	mov	r5,r3
   4370c:	1009883a 	mov	r4,r2
   43710:	00402b00 	call	402b0 <main>
   43714:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43718:	01000044 	movi	r4,1
   4371c:	00431c80 	call	431c8 <close>
  exit (result);
   43720:	e13fff17 	ldw	r4,-4(fp)
   43724:	00456280 	call	45628 <exit>

00043728 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43728:	defffe04 	addi	sp,sp,-8
   4372c:	df000115 	stw	fp,4(sp)
   43730:	df000104 	addi	fp,sp,4
   43734:	e13fff15 	stw	r4,-4(fp)
}
   43738:	0001883a 	nop
   4373c:	e037883a 	mov	sp,fp
   43740:	df000017 	ldw	fp,0(sp)
   43744:	dec00104 	addi	sp,sp,4
   43748:	f800283a 	ret

0004374c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4374c:	defffe04 	addi	sp,sp,-8
   43750:	df000115 	stw	fp,4(sp)
   43754:	df000104 	addi	fp,sp,4
   43758:	e13fff15 	stw	r4,-4(fp)
}
   4375c:	0001883a 	nop
   43760:	e037883a 	mov	sp,fp
   43764:	df000017 	ldw	fp,0(sp)
   43768:	dec00104 	addi	sp,sp,4
   4376c:	f800283a 	ret

00043770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43770:	defffe04 	addi	sp,sp,-8
   43774:	dfc00115 	stw	ra,4(sp)
   43778:	df000015 	stw	fp,0(sp)
   4377c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43780:	d0a00917 	ldw	r2,-32732(gp)
   43784:	10000326 	beq	r2,zero,43794 <alt_get_errno+0x24>
   43788:	d0a00917 	ldw	r2,-32732(gp)
   4378c:	103ee83a 	callr	r2
   43790:	00000106 	br	43798 <alt_get_errno+0x28>
   43794:	d0a6ac04 	addi	r2,gp,-25936
}
   43798:	e037883a 	mov	sp,fp
   4379c:	dfc00117 	ldw	ra,4(sp)
   437a0:	df000017 	ldw	fp,0(sp)
   437a4:	dec00204 	addi	sp,sp,8
   437a8:	f800283a 	ret

000437ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   437ac:	defff904 	addi	sp,sp,-28
   437b0:	dfc00615 	stw	ra,24(sp)
   437b4:	df000515 	stw	fp,20(sp)
   437b8:	df000504 	addi	fp,sp,20
   437bc:	e13ffd15 	stw	r4,-12(fp)
   437c0:	e17ffe15 	stw	r5,-8(fp)
   437c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   437c8:	e0bffd17 	ldw	r2,-12(fp)
   437cc:	10000816 	blt	r2,zero,437f0 <read+0x44>
   437d0:	01400304 	movi	r5,12
   437d4:	e13ffd17 	ldw	r4,-12(fp)
   437d8:	00431640 	call	43164 <__mulsi3>
   437dc:	1007883a 	mov	r3,r2
   437e0:	00800134 	movhi	r2,4
   437e4:	10989204 	addi	r2,r2,25160
   437e8:	1885883a 	add	r2,r3,r2
   437ec:	00000106 	br	437f4 <read+0x48>
   437f0:	0005883a 	mov	r2,zero
   437f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   437f8:	e0bffb17 	ldw	r2,-20(fp)
   437fc:	10002226 	beq	r2,zero,43888 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43800:	e0bffb17 	ldw	r2,-20(fp)
   43804:	10800217 	ldw	r2,8(r2)
   43808:	108000cc 	andi	r2,r2,3
   4380c:	10800060 	cmpeqi	r2,r2,1
   43810:	1000181e 	bne	r2,zero,43874 <read+0xc8>
        (fd->dev->read))
   43814:	e0bffb17 	ldw	r2,-20(fp)
   43818:	10800017 	ldw	r2,0(r2)
   4381c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43820:	10001426 	beq	r2,zero,43874 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43824:	e0bffb17 	ldw	r2,-20(fp)
   43828:	10800017 	ldw	r2,0(r2)
   4382c:	10800517 	ldw	r2,20(r2)
   43830:	e0ffff17 	ldw	r3,-4(fp)
   43834:	180d883a 	mov	r6,r3
   43838:	e17ffe17 	ldw	r5,-8(fp)
   4383c:	e13ffb17 	ldw	r4,-20(fp)
   43840:	103ee83a 	callr	r2
   43844:	e0bffc15 	stw	r2,-16(fp)
   43848:	e0bffc17 	ldw	r2,-16(fp)
   4384c:	1000070e 	bge	r2,zero,4386c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   43850:	00437700 	call	43770 <alt_get_errno>
   43854:	1007883a 	mov	r3,r2
   43858:	e0bffc17 	ldw	r2,-16(fp)
   4385c:	0085c83a 	sub	r2,zero,r2
   43860:	18800015 	stw	r2,0(r3)
          return -1;
   43864:	00bfffc4 	movi	r2,-1
   43868:	00000c06 	br	4389c <read+0xf0>
        }
        return rval;
   4386c:	e0bffc17 	ldw	r2,-16(fp)
   43870:	00000a06 	br	4389c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43874:	00437700 	call	43770 <alt_get_errno>
   43878:	1007883a 	mov	r3,r2
   4387c:	00800344 	movi	r2,13
   43880:	18800015 	stw	r2,0(r3)
   43884:	00000406 	br	43898 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43888:	00437700 	call	43770 <alt_get_errno>
   4388c:	1007883a 	mov	r3,r2
   43890:	00801444 	movi	r2,81
   43894:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43898:	00bfffc4 	movi	r2,-1
}
   4389c:	e037883a 	mov	sp,fp
   438a0:	dfc00117 	ldw	ra,4(sp)
   438a4:	df000017 	ldw	fp,0(sp)
   438a8:	dec00204 	addi	sp,sp,8
   438ac:	f800283a 	ret

000438b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   438b0:	defffc04 	addi	sp,sp,-16
   438b4:	dfc00315 	stw	ra,12(sp)
   438b8:	df000215 	stw	fp,8(sp)
   438bc:	dc000115 	stw	r16,4(sp)
   438c0:	df000204 	addi	fp,sp,8
   438c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   438c8:	e0bffe17 	ldw	r2,-8(fp)
   438cc:	108000d0 	cmplti	r2,r2,3
   438d0:	1000111e 	bne	r2,zero,43918 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   438d4:	04000134 	movhi	r16,4
   438d8:	84189204 	addi	r16,r16,25160
   438dc:	e0bffe17 	ldw	r2,-8(fp)
   438e0:	01400304 	movi	r5,12
   438e4:	1009883a 	mov	r4,r2
   438e8:	00431640 	call	43164 <__mulsi3>
   438ec:	8085883a 	add	r2,r16,r2
   438f0:	10800204 	addi	r2,r2,8
   438f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   438f8:	04000134 	movhi	r16,4
   438fc:	84189204 	addi	r16,r16,25160
   43900:	e0bffe17 	ldw	r2,-8(fp)
   43904:	01400304 	movi	r5,12
   43908:	1009883a 	mov	r4,r2
   4390c:	00431640 	call	43164 <__mulsi3>
   43910:	8085883a 	add	r2,r16,r2
   43914:	10000015 	stw	zero,0(r2)
  }
}
   43918:	0001883a 	nop
   4391c:	e6ffff04 	addi	sp,fp,-4
   43920:	dfc00217 	ldw	ra,8(sp)
   43924:	df000117 	ldw	fp,4(sp)
   43928:	dc000017 	ldw	r16,0(sp)
   4392c:	dec00304 	addi	sp,sp,12
   43930:	f800283a 	ret

00043934 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43934:	defff904 	addi	sp,sp,-28
   43938:	df000615 	stw	fp,24(sp)
   4393c:	df000604 	addi	fp,sp,24
   43940:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43944:	0005303a 	rdctl	r2,status
   43948:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4394c:	e0fffe17 	ldw	r3,-8(fp)
   43950:	00bfff84 	movi	r2,-2
   43954:	1884703a 	and	r2,r3,r2
   43958:	1001703a 	wrctl	status,r2
  
  return context;
   4395c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43960:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43964:	d0a00a17 	ldw	r2,-32728(gp)
   43968:	10c000c4 	addi	r3,r2,3
   4396c:	00bfff04 	movi	r2,-4
   43970:	1884703a 	and	r2,r3,r2
   43974:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43978:	d0e00a17 	ldw	r3,-32728(gp)
   4397c:	e0bfff17 	ldw	r2,-4(fp)
   43980:	1887883a 	add	r3,r3,r2
   43984:	00800234 	movhi	r2,8
   43988:	10a35004 	addi	r2,r2,-29376
   4398c:	10c0062e 	bgeu	r2,r3,439a8 <sbrk+0x74>
   43990:	e0bffb17 	ldw	r2,-20(fp)
   43994:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43998:	e0bffa17 	ldw	r2,-24(fp)
   4399c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   439a0:	00bfffc4 	movi	r2,-1
   439a4:	00000b06 	br	439d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   439a8:	d0a00a17 	ldw	r2,-32728(gp)
   439ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   439b0:	d0e00a17 	ldw	r3,-32728(gp)
   439b4:	e0bfff17 	ldw	r2,-4(fp)
   439b8:	1885883a 	add	r2,r3,r2
   439bc:	d0a00a15 	stw	r2,-32728(gp)
   439c0:	e0bffb17 	ldw	r2,-20(fp)
   439c4:	e0bffc15 	stw	r2,-16(fp)
   439c8:	e0bffc17 	ldw	r2,-16(fp)
   439cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   439d0:	e0bffd17 	ldw	r2,-12(fp)
} 
   439d4:	e037883a 	mov	sp,fp
   439d8:	df000017 	ldw	fp,0(sp)
   439dc:	dec00104 	addi	sp,sp,4
   439e0:	f800283a 	ret

000439e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   439e4:	defffd04 	addi	sp,sp,-12
   439e8:	dfc00215 	stw	ra,8(sp)
   439ec:	df000115 	stw	fp,4(sp)
   439f0:	df000104 	addi	fp,sp,4
   439f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   439f8:	e13fff17 	ldw	r4,-4(fp)
   439fc:	00447980 	call	44798 <alt_busy_sleep>
}
   43a00:	e037883a 	mov	sp,fp
   43a04:	dfc00117 	ldw	ra,4(sp)
   43a08:	df000017 	ldw	fp,0(sp)
   43a0c:	dec00204 	addi	sp,sp,8
   43a10:	f800283a 	ret

00043a14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43a14:	defffe04 	addi	sp,sp,-8
   43a18:	dfc00115 	stw	ra,4(sp)
   43a1c:	df000015 	stw	fp,0(sp)
   43a20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43a24:	d0a00917 	ldw	r2,-32732(gp)
   43a28:	10000326 	beq	r2,zero,43a38 <alt_get_errno+0x24>
   43a2c:	d0a00917 	ldw	r2,-32732(gp)
   43a30:	103ee83a 	callr	r2
   43a34:	00000106 	br	43a3c <alt_get_errno+0x28>
   43a38:	d0a6ac04 	addi	r2,gp,-25936
}
   43a3c:	e037883a 	mov	sp,fp
   43a40:	dfc00117 	ldw	ra,4(sp)
   43a44:	df000017 	ldw	fp,0(sp)
   43a48:	dec00204 	addi	sp,sp,8
   43a4c:	f800283a 	ret

00043a50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43a50:	defff904 	addi	sp,sp,-28
   43a54:	dfc00615 	stw	ra,24(sp)
   43a58:	df000515 	stw	fp,20(sp)
   43a5c:	df000504 	addi	fp,sp,20
   43a60:	e13ffd15 	stw	r4,-12(fp)
   43a64:	e17ffe15 	stw	r5,-8(fp)
   43a68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43a6c:	e0bffd17 	ldw	r2,-12(fp)
   43a70:	10000816 	blt	r2,zero,43a94 <write+0x44>
   43a74:	01400304 	movi	r5,12
   43a78:	e13ffd17 	ldw	r4,-12(fp)
   43a7c:	00431640 	call	43164 <__mulsi3>
   43a80:	1007883a 	mov	r3,r2
   43a84:	00800134 	movhi	r2,4
   43a88:	10989204 	addi	r2,r2,25160
   43a8c:	1885883a 	add	r2,r3,r2
   43a90:	00000106 	br	43a98 <write+0x48>
   43a94:	0005883a 	mov	r2,zero
   43a98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43a9c:	e0bffb17 	ldw	r2,-20(fp)
   43aa0:	10002126 	beq	r2,zero,43b28 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43aa4:	e0bffb17 	ldw	r2,-20(fp)
   43aa8:	10800217 	ldw	r2,8(r2)
   43aac:	108000cc 	andi	r2,r2,3
   43ab0:	10001826 	beq	r2,zero,43b14 <write+0xc4>
   43ab4:	e0bffb17 	ldw	r2,-20(fp)
   43ab8:	10800017 	ldw	r2,0(r2)
   43abc:	10800617 	ldw	r2,24(r2)
   43ac0:	10001426 	beq	r2,zero,43b14 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43ac4:	e0bffb17 	ldw	r2,-20(fp)
   43ac8:	10800017 	ldw	r2,0(r2)
   43acc:	10800617 	ldw	r2,24(r2)
   43ad0:	e0ffff17 	ldw	r3,-4(fp)
   43ad4:	180d883a 	mov	r6,r3
   43ad8:	e17ffe17 	ldw	r5,-8(fp)
   43adc:	e13ffb17 	ldw	r4,-20(fp)
   43ae0:	103ee83a 	callr	r2
   43ae4:	e0bffc15 	stw	r2,-16(fp)
   43ae8:	e0bffc17 	ldw	r2,-16(fp)
   43aec:	1000070e 	bge	r2,zero,43b0c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   43af0:	0043a140 	call	43a14 <alt_get_errno>
   43af4:	1007883a 	mov	r3,r2
   43af8:	e0bffc17 	ldw	r2,-16(fp)
   43afc:	0085c83a 	sub	r2,zero,r2
   43b00:	18800015 	stw	r2,0(r3)
        return -1;
   43b04:	00bfffc4 	movi	r2,-1
   43b08:	00000c06 	br	43b3c <write+0xec>
      }
      return rval;
   43b0c:	e0bffc17 	ldw	r2,-16(fp)
   43b10:	00000a06 	br	43b3c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43b14:	0043a140 	call	43a14 <alt_get_errno>
   43b18:	1007883a 	mov	r3,r2
   43b1c:	00800344 	movi	r2,13
   43b20:	18800015 	stw	r2,0(r3)
   43b24:	00000406 	br	43b38 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43b28:	0043a140 	call	43a14 <alt_get_errno>
   43b2c:	1007883a 	mov	r3,r2
   43b30:	00801444 	movi	r2,81
   43b34:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43b38:	00bfffc4 	movi	r2,-1
}
   43b3c:	e037883a 	mov	sp,fp
   43b40:	dfc00117 	ldw	ra,4(sp)
   43b44:	df000017 	ldw	fp,0(sp)
   43b48:	dec00204 	addi	sp,sp,8
   43b4c:	f800283a 	ret

00043b50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43b50:	defffd04 	addi	sp,sp,-12
   43b54:	dfc00215 	stw	ra,8(sp)
   43b58:	df000115 	stw	fp,4(sp)
   43b5c:	df000104 	addi	fp,sp,4
   43b60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43b64:	d1600604 	addi	r5,gp,-32744
   43b68:	e13fff17 	ldw	r4,-4(fp)
   43b6c:	004494c0 	call	4494c <alt_dev_llist_insert>
}
   43b70:	e037883a 	mov	sp,fp
   43b74:	dfc00117 	ldw	ra,4(sp)
   43b78:	df000017 	ldw	fp,0(sp)
   43b7c:	dec00204 	addi	sp,sp,8
   43b80:	f800283a 	ret

00043b84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43b84:	defffd04 	addi	sp,sp,-12
   43b88:	dfc00215 	stw	ra,8(sp)
   43b8c:	df000115 	stw	fp,4(sp)
   43b90:	df000104 	addi	fp,sp,4
   43b94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   43b98:	00452f80 	call	452f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43b9c:	00800044 	movi	r2,1
   43ba0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43ba4:	0001883a 	nop
   43ba8:	e037883a 	mov	sp,fp
   43bac:	dfc00117 	ldw	ra,4(sp)
   43bb0:	df000017 	ldw	fp,0(sp)
   43bb4:	dec00204 	addi	sp,sp,8
   43bb8:	f800283a 	ret

00043bbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43bbc:	defffe04 	addi	sp,sp,-8
   43bc0:	dfc00115 	stw	ra,4(sp)
   43bc4:	df000015 	stw	fp,0(sp)
   43bc8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43bcc:	000d883a 	mov	r6,zero
   43bd0:	000b883a 	mov	r5,zero
   43bd4:	01000134 	movhi	r4,4
   43bd8:	2118fc04 	addi	r4,r4,25584
   43bdc:	0043d680 	call	43d68 <altera_avalon_jtag_uart_init>
   43be0:	01000134 	movhi	r4,4
   43be4:	2118f204 	addi	r4,r4,25544
   43be8:	0043b500 	call	43b50 <alt_dev_reg>
}
   43bec:	0001883a 	nop
   43bf0:	e037883a 	mov	sp,fp
   43bf4:	dfc00117 	ldw	ra,4(sp)
   43bf8:	df000017 	ldw	fp,0(sp)
   43bfc:	dec00204 	addi	sp,sp,8
   43c00:	f800283a 	ret

00043c04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43c04:	defffa04 	addi	sp,sp,-24
   43c08:	dfc00515 	stw	ra,20(sp)
   43c0c:	df000415 	stw	fp,16(sp)
   43c10:	df000404 	addi	fp,sp,16
   43c14:	e13ffd15 	stw	r4,-12(fp)
   43c18:	e17ffe15 	stw	r5,-8(fp)
   43c1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c20:	e0bffd17 	ldw	r2,-12(fp)
   43c24:	10800017 	ldw	r2,0(r2)
   43c28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43c2c:	e0bffc17 	ldw	r2,-16(fp)
   43c30:	10c00a04 	addi	r3,r2,40
   43c34:	e0bffd17 	ldw	r2,-12(fp)
   43c38:	10800217 	ldw	r2,8(r2)
   43c3c:	100f883a 	mov	r7,r2
   43c40:	e1bfff17 	ldw	r6,-4(fp)
   43c44:	e17ffe17 	ldw	r5,-8(fp)
   43c48:	1809883a 	mov	r4,r3
   43c4c:	004422c0 	call	4422c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43c50:	e037883a 	mov	sp,fp
   43c54:	dfc00117 	ldw	ra,4(sp)
   43c58:	df000017 	ldw	fp,0(sp)
   43c5c:	dec00204 	addi	sp,sp,8
   43c60:	f800283a 	ret

00043c64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43c64:	defffa04 	addi	sp,sp,-24
   43c68:	dfc00515 	stw	ra,20(sp)
   43c6c:	df000415 	stw	fp,16(sp)
   43c70:	df000404 	addi	fp,sp,16
   43c74:	e13ffd15 	stw	r4,-12(fp)
   43c78:	e17ffe15 	stw	r5,-8(fp)
   43c7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43c80:	e0bffd17 	ldw	r2,-12(fp)
   43c84:	10800017 	ldw	r2,0(r2)
   43c88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43c8c:	e0bffc17 	ldw	r2,-16(fp)
   43c90:	10c00a04 	addi	r3,r2,40
   43c94:	e0bffd17 	ldw	r2,-12(fp)
   43c98:	10800217 	ldw	r2,8(r2)
   43c9c:	100f883a 	mov	r7,r2
   43ca0:	e1bfff17 	ldw	r6,-4(fp)
   43ca4:	e17ffe17 	ldw	r5,-8(fp)
   43ca8:	1809883a 	mov	r4,r3
   43cac:	00444480 	call	44448 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43cb0:	e037883a 	mov	sp,fp
   43cb4:	dfc00117 	ldw	ra,4(sp)
   43cb8:	df000017 	ldw	fp,0(sp)
   43cbc:	dec00204 	addi	sp,sp,8
   43cc0:	f800283a 	ret

00043cc4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43cc4:	defffc04 	addi	sp,sp,-16
   43cc8:	dfc00315 	stw	ra,12(sp)
   43ccc:	df000215 	stw	fp,8(sp)
   43cd0:	df000204 	addi	fp,sp,8
   43cd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43cd8:	e0bfff17 	ldw	r2,-4(fp)
   43cdc:	10800017 	ldw	r2,0(r2)
   43ce0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43ce4:	e0bffe17 	ldw	r2,-8(fp)
   43ce8:	10c00a04 	addi	r3,r2,40
   43cec:	e0bfff17 	ldw	r2,-4(fp)
   43cf0:	10800217 	ldw	r2,8(r2)
   43cf4:	100b883a 	mov	r5,r2
   43cf8:	1809883a 	mov	r4,r3
   43cfc:	00440d40 	call	440d4 <altera_avalon_jtag_uart_close>
}
   43d00:	e037883a 	mov	sp,fp
   43d04:	dfc00117 	ldw	ra,4(sp)
   43d08:	df000017 	ldw	fp,0(sp)
   43d0c:	dec00204 	addi	sp,sp,8
   43d10:	f800283a 	ret

00043d14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43d14:	defffa04 	addi	sp,sp,-24
   43d18:	dfc00515 	stw	ra,20(sp)
   43d1c:	df000415 	stw	fp,16(sp)
   43d20:	df000404 	addi	fp,sp,16
   43d24:	e13ffd15 	stw	r4,-12(fp)
   43d28:	e17ffe15 	stw	r5,-8(fp)
   43d2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43d30:	e0bffd17 	ldw	r2,-12(fp)
   43d34:	10800017 	ldw	r2,0(r2)
   43d38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43d3c:	e0bffc17 	ldw	r2,-16(fp)
   43d40:	10800a04 	addi	r2,r2,40
   43d44:	e1bfff17 	ldw	r6,-4(fp)
   43d48:	e17ffe17 	ldw	r5,-8(fp)
   43d4c:	1009883a 	mov	r4,r2
   43d50:	004413c0 	call	4413c <altera_avalon_jtag_uart_ioctl>
}
   43d54:	e037883a 	mov	sp,fp
   43d58:	dfc00117 	ldw	ra,4(sp)
   43d5c:	df000017 	ldw	fp,0(sp)
   43d60:	dec00204 	addi	sp,sp,8
   43d64:	f800283a 	ret

00043d68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43d68:	defffa04 	addi	sp,sp,-24
   43d6c:	dfc00515 	stw	ra,20(sp)
   43d70:	df000415 	stw	fp,16(sp)
   43d74:	df000404 	addi	fp,sp,16
   43d78:	e13ffd15 	stw	r4,-12(fp)
   43d7c:	e17ffe15 	stw	r5,-8(fp)
   43d80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43d84:	e0bffd17 	ldw	r2,-12(fp)
   43d88:	00c00044 	movi	r3,1
   43d8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43d90:	e0bffd17 	ldw	r2,-12(fp)
   43d94:	10800017 	ldw	r2,0(r2)
   43d98:	10800104 	addi	r2,r2,4
   43d9c:	1007883a 	mov	r3,r2
   43da0:	e0bffd17 	ldw	r2,-12(fp)
   43da4:	10800817 	ldw	r2,32(r2)
   43da8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43dac:	e0bffe17 	ldw	r2,-8(fp)
   43db0:	e0ffff17 	ldw	r3,-4(fp)
   43db4:	d8000015 	stw	zero,0(sp)
   43db8:	e1fffd17 	ldw	r7,-12(fp)
   43dbc:	01800134 	movhi	r6,4
   43dc0:	318f8a04 	addi	r6,r6,15912
   43dc4:	180b883a 	mov	r5,r3
   43dc8:	1009883a 	mov	r4,r2
   43dcc:	0044ad00 	call	44ad0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43dd0:	e0bffd17 	ldw	r2,-12(fp)
   43dd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43dd8:	e0bffd17 	ldw	r2,-12(fp)
   43ddc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43de0:	d0e6b117 	ldw	r3,-25916(gp)
   43de4:	e1fffd17 	ldw	r7,-12(fp)
   43de8:	01800134 	movhi	r6,4
   43dec:	31900d04 	addi	r6,r6,16436
   43df0:	180b883a 	mov	r5,r3
   43df4:	1009883a 	mov	r4,r2
   43df8:	004466c0 	call	4466c <alt_alarm_start>
   43dfc:	1000040e 	bge	r2,zero,43e10 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43e00:	e0fffd17 	ldw	r3,-12(fp)
   43e04:	00a00034 	movhi	r2,32768
   43e08:	10bfffc4 	addi	r2,r2,-1
   43e0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43e10:	0001883a 	nop
   43e14:	e037883a 	mov	sp,fp
   43e18:	dfc00117 	ldw	ra,4(sp)
   43e1c:	df000017 	ldw	fp,0(sp)
   43e20:	dec00204 	addi	sp,sp,8
   43e24:	f800283a 	ret

00043e28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43e28:	defff804 	addi	sp,sp,-32
   43e2c:	df000715 	stw	fp,28(sp)
   43e30:	df000704 	addi	fp,sp,28
   43e34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43e38:	e0bfff17 	ldw	r2,-4(fp)
   43e3c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   43e40:	e0bffb17 	ldw	r2,-20(fp)
   43e44:	10800017 	ldw	r2,0(r2)
   43e48:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e4c:	e0bffc17 	ldw	r2,-16(fp)
   43e50:	10800104 	addi	r2,r2,4
   43e54:	10800037 	ldwio	r2,0(r2)
   43e58:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43e5c:	e0bffd17 	ldw	r2,-12(fp)
   43e60:	1080c00c 	andi	r2,r2,768
   43e64:	10006d26 	beq	r2,zero,4401c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43e68:	e0bffd17 	ldw	r2,-12(fp)
   43e6c:	1080400c 	andi	r2,r2,256
   43e70:	10003526 	beq	r2,zero,43f48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43e74:	00800074 	movhi	r2,1
   43e78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43e7c:	e0bffb17 	ldw	r2,-20(fp)
   43e80:	10800a17 	ldw	r2,40(r2)
   43e84:	10800044 	addi	r2,r2,1
   43e88:	1081ffcc 	andi	r2,r2,2047
   43e8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   43e90:	e0bffb17 	ldw	r2,-20(fp)
   43e94:	10c00b17 	ldw	r3,44(r2)
   43e98:	e0bffe17 	ldw	r2,-8(fp)
   43e9c:	18801526 	beq	r3,r2,43ef4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43ea0:	e0bffc17 	ldw	r2,-16(fp)
   43ea4:	10800037 	ldwio	r2,0(r2)
   43ea8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43eac:	e0bff917 	ldw	r2,-28(fp)
   43eb0:	10a0000c 	andi	r2,r2,32768
   43eb4:	10001126 	beq	r2,zero,43efc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43eb8:	e0bffb17 	ldw	r2,-20(fp)
   43ebc:	10800a17 	ldw	r2,40(r2)
   43ec0:	e0fff917 	ldw	r3,-28(fp)
   43ec4:	1809883a 	mov	r4,r3
   43ec8:	e0fffb17 	ldw	r3,-20(fp)
   43ecc:	1885883a 	add	r2,r3,r2
   43ed0:	10800e04 	addi	r2,r2,56
   43ed4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ed8:	e0bffb17 	ldw	r2,-20(fp)
   43edc:	10800a17 	ldw	r2,40(r2)
   43ee0:	10800044 	addi	r2,r2,1
   43ee4:	10c1ffcc 	andi	r3,r2,2047
   43ee8:	e0bffb17 	ldw	r2,-20(fp)
   43eec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   43ef0:	003fe206 	br	43e7c <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   43ef4:	0001883a 	nop
   43ef8:	00000106 	br	43f00 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   43efc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43f00:	e0bff917 	ldw	r2,-28(fp)
   43f04:	10bfffec 	andhi	r2,r2,65535
   43f08:	10000f26 	beq	r2,zero,43f48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43f0c:	e0bffb17 	ldw	r2,-20(fp)
   43f10:	10c00817 	ldw	r3,32(r2)
   43f14:	00bfff84 	movi	r2,-2
   43f18:	1886703a 	and	r3,r3,r2
   43f1c:	e0bffb17 	ldw	r2,-20(fp)
   43f20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43f24:	e0bffc17 	ldw	r2,-16(fp)
   43f28:	10800104 	addi	r2,r2,4
   43f2c:	1007883a 	mov	r3,r2
   43f30:	e0bffb17 	ldw	r2,-20(fp)
   43f34:	10800817 	ldw	r2,32(r2)
   43f38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43f3c:	e0bffc17 	ldw	r2,-16(fp)
   43f40:	10800104 	addi	r2,r2,4
   43f44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43f48:	e0bffd17 	ldw	r2,-12(fp)
   43f4c:	1080800c 	andi	r2,r2,512
   43f50:	103fbe26 	beq	r2,zero,43e4c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43f54:	e0bffd17 	ldw	r2,-12(fp)
   43f58:	1004d43a 	srli	r2,r2,16
   43f5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43f60:	00001406 	br	43fb4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43f64:	e0bffc17 	ldw	r2,-16(fp)
   43f68:	e0fffb17 	ldw	r3,-20(fp)
   43f6c:	18c00d17 	ldw	r3,52(r3)
   43f70:	e13ffb17 	ldw	r4,-20(fp)
   43f74:	20c7883a 	add	r3,r4,r3
   43f78:	18c20e04 	addi	r3,r3,2104
   43f7c:	18c00003 	ldbu	r3,0(r3)
   43f80:	18c03fcc 	andi	r3,r3,255
   43f84:	18c0201c 	xori	r3,r3,128
   43f88:	18ffe004 	addi	r3,r3,-128
   43f8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43f90:	e0bffb17 	ldw	r2,-20(fp)
   43f94:	10800d17 	ldw	r2,52(r2)
   43f98:	10800044 	addi	r2,r2,1
   43f9c:	10c1ffcc 	andi	r3,r2,2047
   43fa0:	e0bffb17 	ldw	r2,-20(fp)
   43fa4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43fa8:	e0bffa17 	ldw	r2,-24(fp)
   43fac:	10bfffc4 	addi	r2,r2,-1
   43fb0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   43fb4:	e0bffa17 	ldw	r2,-24(fp)
   43fb8:	10000526 	beq	r2,zero,43fd0 <altera_avalon_jtag_uart_irq+0x1a8>
   43fbc:	e0bffb17 	ldw	r2,-20(fp)
   43fc0:	10c00d17 	ldw	r3,52(r2)
   43fc4:	e0bffb17 	ldw	r2,-20(fp)
   43fc8:	10800c17 	ldw	r2,48(r2)
   43fcc:	18bfe51e 	bne	r3,r2,43f64 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   43fd0:	e0bffa17 	ldw	r2,-24(fp)
   43fd4:	103f9d26 	beq	r2,zero,43e4c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43fd8:	e0bffb17 	ldw	r2,-20(fp)
   43fdc:	10c00817 	ldw	r3,32(r2)
   43fe0:	00bfff44 	movi	r2,-3
   43fe4:	1886703a 	and	r3,r3,r2
   43fe8:	e0bffb17 	ldw	r2,-20(fp)
   43fec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43ff0:	e0bffb17 	ldw	r2,-20(fp)
   43ff4:	10800017 	ldw	r2,0(r2)
   43ff8:	10800104 	addi	r2,r2,4
   43ffc:	1007883a 	mov	r3,r2
   44000:	e0bffb17 	ldw	r2,-20(fp)
   44004:	10800817 	ldw	r2,32(r2)
   44008:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4400c:	e0bffc17 	ldw	r2,-16(fp)
   44010:	10800104 	addi	r2,r2,4
   44014:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   44018:	003f8c06 	br	43e4c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4401c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   44020:	0001883a 	nop
   44024:	e037883a 	mov	sp,fp
   44028:	df000017 	ldw	fp,0(sp)
   4402c:	dec00104 	addi	sp,sp,4
   44030:	f800283a 	ret

00044034 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   44034:	defff804 	addi	sp,sp,-32
   44038:	df000715 	stw	fp,28(sp)
   4403c:	df000704 	addi	fp,sp,28
   44040:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   44044:	e0bffb17 	ldw	r2,-20(fp)
   44048:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4404c:	e0bff917 	ldw	r2,-28(fp)
   44050:	10800017 	ldw	r2,0(r2)
   44054:	10800104 	addi	r2,r2,4
   44058:	10800037 	ldwio	r2,0(r2)
   4405c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   44060:	e0bffa17 	ldw	r2,-24(fp)
   44064:	1081000c 	andi	r2,r2,1024
   44068:	10000b26 	beq	r2,zero,44098 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4406c:	e0bff917 	ldw	r2,-28(fp)
   44070:	10800017 	ldw	r2,0(r2)
   44074:	10800104 	addi	r2,r2,4
   44078:	1007883a 	mov	r3,r2
   4407c:	e0bff917 	ldw	r2,-28(fp)
   44080:	10800817 	ldw	r2,32(r2)
   44084:	10810014 	ori	r2,r2,1024
   44088:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4408c:	e0bff917 	ldw	r2,-28(fp)
   44090:	10000915 	stw	zero,36(r2)
   44094:	00000a06 	br	440c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   44098:	e0bff917 	ldw	r2,-28(fp)
   4409c:	10c00917 	ldw	r3,36(r2)
   440a0:	00a00034 	movhi	r2,32768
   440a4:	10bfff04 	addi	r2,r2,-4
   440a8:	10c00536 	bltu	r2,r3,440c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   440ac:	e0bff917 	ldw	r2,-28(fp)
   440b0:	10800917 	ldw	r2,36(r2)
   440b4:	10c00044 	addi	r3,r2,1
   440b8:	e0bff917 	ldw	r2,-28(fp)
   440bc:	10c00915 	stw	r3,36(r2)
   440c0:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   440c4:	e037883a 	mov	sp,fp
   440c8:	df000017 	ldw	fp,0(sp)
   440cc:	dec00104 	addi	sp,sp,4
   440d0:	f800283a 	ret

000440d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   440d4:	defffd04 	addi	sp,sp,-12
   440d8:	df000215 	stw	fp,8(sp)
   440dc:	df000204 	addi	fp,sp,8
   440e0:	e13ffe15 	stw	r4,-8(fp)
   440e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   440e8:	00000506 	br	44100 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   440ec:	e0bfff17 	ldw	r2,-4(fp)
   440f0:	1090000c 	andi	r2,r2,16384
   440f4:	10000226 	beq	r2,zero,44100 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   440f8:	00bffd44 	movi	r2,-11
   440fc:	00000b06 	br	4412c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   44100:	e0bffe17 	ldw	r2,-8(fp)
   44104:	10c00d17 	ldw	r3,52(r2)
   44108:	e0bffe17 	ldw	r2,-8(fp)
   4410c:	10800c17 	ldw	r2,48(r2)
   44110:	18800526 	beq	r3,r2,44128 <altera_avalon_jtag_uart_close+0x54>
   44114:	e0bffe17 	ldw	r2,-8(fp)
   44118:	10c00917 	ldw	r3,36(r2)
   4411c:	e0bffe17 	ldw	r2,-8(fp)
   44120:	10800117 	ldw	r2,4(r2)
   44124:	18bff136 	bltu	r3,r2,440ec <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   44128:	0005883a 	mov	r2,zero
}
   4412c:	e037883a 	mov	sp,fp
   44130:	df000017 	ldw	fp,0(sp)
   44134:	dec00104 	addi	sp,sp,4
   44138:	f800283a 	ret

0004413c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4413c:	defffa04 	addi	sp,sp,-24
   44140:	df000515 	stw	fp,20(sp)
   44144:	df000504 	addi	fp,sp,20
   44148:	e13ffd15 	stw	r4,-12(fp)
   4414c:	e17ffe15 	stw	r5,-8(fp)
   44150:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   44154:	00bff9c4 	movi	r2,-25
   44158:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4415c:	e0bffe17 	ldw	r2,-8(fp)
   44160:	10da8060 	cmpeqi	r3,r2,27137
   44164:	1800031e 	bne	r3,zero,44174 <altera_avalon_jtag_uart_ioctl+0x38>
   44168:	109a80a0 	cmpeqi	r2,r2,27138
   4416c:	1000181e 	bne	r2,zero,441d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   44170:	00002906 	br	44218 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   44174:	e0bffd17 	ldw	r2,-12(fp)
   44178:	10c00117 	ldw	r3,4(r2)
   4417c:	00a00034 	movhi	r2,32768
   44180:	10bfffc4 	addi	r2,r2,-1
   44184:	18802126 	beq	r3,r2,4420c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   44188:	e0bfff17 	ldw	r2,-4(fp)
   4418c:	10800017 	ldw	r2,0(r2)
   44190:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44194:	e0bffc17 	ldw	r2,-16(fp)
   44198:	10800090 	cmplti	r2,r2,2
   4419c:	1000061e 	bne	r2,zero,441b8 <altera_avalon_jtag_uart_ioctl+0x7c>
   441a0:	e0fffc17 	ldw	r3,-16(fp)
   441a4:	00a00034 	movhi	r2,32768
   441a8:	10bfffc4 	addi	r2,r2,-1
   441ac:	18800226 	beq	r3,r2,441b8 <altera_avalon_jtag_uart_ioctl+0x7c>
   441b0:	e0bffc17 	ldw	r2,-16(fp)
   441b4:	00000206 	br	441c0 <altera_avalon_jtag_uart_ioctl+0x84>
   441b8:	00a00034 	movhi	r2,32768
   441bc:	10bfff84 	addi	r2,r2,-2
   441c0:	e0fffd17 	ldw	r3,-12(fp)
   441c4:	18800115 	stw	r2,4(r3)
      rc = 0;
   441c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   441cc:	00000f06 	br	4420c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   441d0:	e0bffd17 	ldw	r2,-12(fp)
   441d4:	10c00117 	ldw	r3,4(r2)
   441d8:	00a00034 	movhi	r2,32768
   441dc:	10bfffc4 	addi	r2,r2,-1
   441e0:	18800c26 	beq	r3,r2,44214 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   441e4:	e0bffd17 	ldw	r2,-12(fp)
   441e8:	10c00917 	ldw	r3,36(r2)
   441ec:	e0bffd17 	ldw	r2,-12(fp)
   441f0:	10800117 	ldw	r2,4(r2)
   441f4:	1885803a 	cmpltu	r2,r3,r2
   441f8:	10c03fcc 	andi	r3,r2,255
   441fc:	e0bfff17 	ldw	r2,-4(fp)
   44200:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44204:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   44208:	00000206 	br	44214 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4420c:	0001883a 	nop
   44210:	00000106 	br	44218 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   44214:	0001883a 	nop

  default:
    break;
  }

  return rc;
   44218:	e0bffb17 	ldw	r2,-20(fp)
}
   4421c:	e037883a 	mov	sp,fp
   44220:	df000017 	ldw	fp,0(sp)
   44224:	dec00104 	addi	sp,sp,4
   44228:	f800283a 	ret

0004422c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4422c:	defff304 	addi	sp,sp,-52
   44230:	dfc00c15 	stw	ra,48(sp)
   44234:	df000b15 	stw	fp,44(sp)
   44238:	df000b04 	addi	fp,sp,44
   4423c:	e13ffc15 	stw	r4,-16(fp)
   44240:	e17ffd15 	stw	r5,-12(fp)
   44244:	e1bffe15 	stw	r6,-8(fp)
   44248:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4424c:	e0bffd17 	ldw	r2,-12(fp)
   44250:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44254:	00004706 	br	44374 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   44258:	e0bffc17 	ldw	r2,-16(fp)
   4425c:	10800a17 	ldw	r2,40(r2)
   44260:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   44264:	e0bffc17 	ldw	r2,-16(fp)
   44268:	10800b17 	ldw	r2,44(r2)
   4426c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   44270:	e0fff717 	ldw	r3,-36(fp)
   44274:	e0bff817 	ldw	r2,-32(fp)
   44278:	18800536 	bltu	r3,r2,44290 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4427c:	e0fff717 	ldw	r3,-36(fp)
   44280:	e0bff817 	ldw	r2,-32(fp)
   44284:	1885c83a 	sub	r2,r3,r2
   44288:	e0bff615 	stw	r2,-40(fp)
   4428c:	00000406 	br	442a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   44290:	00c20004 	movi	r3,2048
   44294:	e0bff817 	ldw	r2,-32(fp)
   44298:	1885c83a 	sub	r2,r3,r2
   4429c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   442a0:	e0bff617 	ldw	r2,-40(fp)
   442a4:	10001e26 	beq	r2,zero,44320 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   442a8:	e0fffe17 	ldw	r3,-8(fp)
   442ac:	e0bff617 	ldw	r2,-40(fp)
   442b0:	1880022e 	bgeu	r3,r2,442bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   442b4:	e0bffe17 	ldw	r2,-8(fp)
   442b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   442bc:	e0bffc17 	ldw	r2,-16(fp)
   442c0:	10c00e04 	addi	r3,r2,56
   442c4:	e0bff817 	ldw	r2,-32(fp)
   442c8:	1885883a 	add	r2,r3,r2
   442cc:	e1bff617 	ldw	r6,-40(fp)
   442d0:	100b883a 	mov	r5,r2
   442d4:	e13ff517 	ldw	r4,-44(fp)
   442d8:	00417dc0 	call	417dc <memcpy>
      ptr   += n;
   442dc:	e0fff517 	ldw	r3,-44(fp)
   442e0:	e0bff617 	ldw	r2,-40(fp)
   442e4:	1885883a 	add	r2,r3,r2
   442e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   442ec:	e0fffe17 	ldw	r3,-8(fp)
   442f0:	e0bff617 	ldw	r2,-40(fp)
   442f4:	1885c83a 	sub	r2,r3,r2
   442f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   442fc:	e0fff817 	ldw	r3,-32(fp)
   44300:	e0bff617 	ldw	r2,-40(fp)
   44304:	1885883a 	add	r2,r3,r2
   44308:	10c1ffcc 	andi	r3,r2,2047
   4430c:	e0bffc17 	ldw	r2,-16(fp)
   44310:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44314:	e0bffe17 	ldw	r2,-8(fp)
   44318:	00bfcf16 	blt	zero,r2,44258 <altera_avalon_jtag_uart_read+0x2c>
   4431c:	00000106 	br	44324 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   44320:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   44324:	e0fff517 	ldw	r3,-44(fp)
   44328:	e0bffd17 	ldw	r2,-12(fp)
   4432c:	1880141e 	bne	r3,r2,44380 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44330:	e0bfff17 	ldw	r2,-4(fp)
   44334:	1090000c 	andi	r2,r2,16384
   44338:	1000131e 	bne	r2,zero,44388 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4433c:	0001883a 	nop
   44340:	e0bffc17 	ldw	r2,-16(fp)
   44344:	10c00a17 	ldw	r3,40(r2)
   44348:	e0bff717 	ldw	r2,-36(fp)
   4434c:	1880051e 	bne	r3,r2,44364 <altera_avalon_jtag_uart_read+0x138>
   44350:	e0bffc17 	ldw	r2,-16(fp)
   44354:	10c00917 	ldw	r3,36(r2)
   44358:	e0bffc17 	ldw	r2,-16(fp)
   4435c:	10800117 	ldw	r2,4(r2)
   44360:	18bff736 	bltu	r3,r2,44340 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   44364:	e0bffc17 	ldw	r2,-16(fp)
   44368:	10c00a17 	ldw	r3,40(r2)
   4436c:	e0bff717 	ldw	r2,-36(fp)
   44370:	18800726 	beq	r3,r2,44390 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   44374:	e0bffe17 	ldw	r2,-8(fp)
   44378:	00bfb716 	blt	zero,r2,44258 <altera_avalon_jtag_uart_read+0x2c>
   4437c:	00000506 	br	44394 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   44380:	0001883a 	nop
   44384:	00000306 	br	44394 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   44388:	0001883a 	nop
   4438c:	00000106 	br	44394 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   44390:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44394:	e0fff517 	ldw	r3,-44(fp)
   44398:	e0bffd17 	ldw	r2,-12(fp)
   4439c:	18801826 	beq	r3,r2,44400 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443a0:	0005303a 	rdctl	r2,status
   443a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443a8:	e0fffb17 	ldw	r3,-20(fp)
   443ac:	00bfff84 	movi	r2,-2
   443b0:	1884703a 	and	r2,r3,r2
   443b4:	1001703a 	wrctl	status,r2
  
  return context;
   443b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   443bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   443c0:	e0bffc17 	ldw	r2,-16(fp)
   443c4:	10800817 	ldw	r2,32(r2)
   443c8:	10c00054 	ori	r3,r2,1
   443cc:	e0bffc17 	ldw	r2,-16(fp)
   443d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   443d4:	e0bffc17 	ldw	r2,-16(fp)
   443d8:	10800017 	ldw	r2,0(r2)
   443dc:	10800104 	addi	r2,r2,4
   443e0:	1007883a 	mov	r3,r2
   443e4:	e0bffc17 	ldw	r2,-16(fp)
   443e8:	10800817 	ldw	r2,32(r2)
   443ec:	18800035 	stwio	r2,0(r3)
   443f0:	e0bffa17 	ldw	r2,-24(fp)
   443f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   443f8:	e0bff917 	ldw	r2,-28(fp)
   443fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44400:	e0fff517 	ldw	r3,-44(fp)
   44404:	e0bffd17 	ldw	r2,-12(fp)
   44408:	18800426 	beq	r3,r2,4441c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4440c:	e0fff517 	ldw	r3,-44(fp)
   44410:	e0bffd17 	ldw	r2,-12(fp)
   44414:	1885c83a 	sub	r2,r3,r2
   44418:	00000606 	br	44434 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4441c:	e0bfff17 	ldw	r2,-4(fp)
   44420:	1090000c 	andi	r2,r2,16384
   44424:	10000226 	beq	r2,zero,44430 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   44428:	00bffd44 	movi	r2,-11
   4442c:	00000106 	br	44434 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   44430:	00bffec4 	movi	r2,-5
}
   44434:	e037883a 	mov	sp,fp
   44438:	dfc00117 	ldw	ra,4(sp)
   4443c:	df000017 	ldw	fp,0(sp)
   44440:	dec00204 	addi	sp,sp,8
   44444:	f800283a 	ret

00044448 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44448:	defff304 	addi	sp,sp,-52
   4444c:	dfc00c15 	stw	ra,48(sp)
   44450:	df000b15 	stw	fp,44(sp)
   44454:	df000b04 	addi	fp,sp,44
   44458:	e13ffc15 	stw	r4,-16(fp)
   4445c:	e17ffd15 	stw	r5,-12(fp)
   44460:	e1bffe15 	stw	r6,-8(fp)
   44464:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   44468:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4446c:	e0bffd17 	ldw	r2,-12(fp)
   44470:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44474:	00003706 	br	44554 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   44478:	e0bffc17 	ldw	r2,-16(fp)
   4447c:	10800c17 	ldw	r2,48(r2)
   44480:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   44484:	e0bffc17 	ldw	r2,-16(fp)
   44488:	10800d17 	ldw	r2,52(r2)
   4448c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   44490:	e0fff917 	ldw	r3,-28(fp)
   44494:	e0bff517 	ldw	r2,-44(fp)
   44498:	1880062e 	bgeu	r3,r2,444b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4449c:	e0fff517 	ldw	r3,-44(fp)
   444a0:	e0bff917 	ldw	r2,-28(fp)
   444a4:	1885c83a 	sub	r2,r3,r2
   444a8:	10bfffc4 	addi	r2,r2,-1
   444ac:	e0bff615 	stw	r2,-40(fp)
   444b0:	00000b06 	br	444e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   444b4:	e0bff517 	ldw	r2,-44(fp)
   444b8:	10000526 	beq	r2,zero,444d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   444bc:	00c20004 	movi	r3,2048
   444c0:	e0bff917 	ldw	r2,-28(fp)
   444c4:	1885c83a 	sub	r2,r3,r2
   444c8:	e0bff615 	stw	r2,-40(fp)
   444cc:	00000406 	br	444e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   444d0:	00c1ffc4 	movi	r3,2047
   444d4:	e0bff917 	ldw	r2,-28(fp)
   444d8:	1885c83a 	sub	r2,r3,r2
   444dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   444e0:	e0bff617 	ldw	r2,-40(fp)
   444e4:	10001e26 	beq	r2,zero,44560 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   444e8:	e0fffe17 	ldw	r3,-8(fp)
   444ec:	e0bff617 	ldw	r2,-40(fp)
   444f0:	1880022e 	bgeu	r3,r2,444fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   444f4:	e0bffe17 	ldw	r2,-8(fp)
   444f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   444fc:	e0bffc17 	ldw	r2,-16(fp)
   44500:	10c20e04 	addi	r3,r2,2104
   44504:	e0bff917 	ldw	r2,-28(fp)
   44508:	1885883a 	add	r2,r3,r2
   4450c:	e1bff617 	ldw	r6,-40(fp)
   44510:	e17ffd17 	ldw	r5,-12(fp)
   44514:	1009883a 	mov	r4,r2
   44518:	00417dc0 	call	417dc <memcpy>
      ptr   += n;
   4451c:	e0fffd17 	ldw	r3,-12(fp)
   44520:	e0bff617 	ldw	r2,-40(fp)
   44524:	1885883a 	add	r2,r3,r2
   44528:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4452c:	e0fffe17 	ldw	r3,-8(fp)
   44530:	e0bff617 	ldw	r2,-40(fp)
   44534:	1885c83a 	sub	r2,r3,r2
   44538:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4453c:	e0fff917 	ldw	r3,-28(fp)
   44540:	e0bff617 	ldw	r2,-40(fp)
   44544:	1885883a 	add	r2,r3,r2
   44548:	10c1ffcc 	andi	r3,r2,2047
   4454c:	e0bffc17 	ldw	r2,-16(fp)
   44550:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   44554:	e0bffe17 	ldw	r2,-8(fp)
   44558:	00bfc716 	blt	zero,r2,44478 <altera_avalon_jtag_uart_write+0x30>
   4455c:	00000106 	br	44564 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   44560:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44564:	0005303a 	rdctl	r2,status
   44568:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4456c:	e0fffb17 	ldw	r3,-20(fp)
   44570:	00bfff84 	movi	r2,-2
   44574:	1884703a 	and	r2,r3,r2
   44578:	1001703a 	wrctl	status,r2
  
  return context;
   4457c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   44580:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   44584:	e0bffc17 	ldw	r2,-16(fp)
   44588:	10800817 	ldw	r2,32(r2)
   4458c:	10c00094 	ori	r3,r2,2
   44590:	e0bffc17 	ldw	r2,-16(fp)
   44594:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44598:	e0bffc17 	ldw	r2,-16(fp)
   4459c:	10800017 	ldw	r2,0(r2)
   445a0:	10800104 	addi	r2,r2,4
   445a4:	1007883a 	mov	r3,r2
   445a8:	e0bffc17 	ldw	r2,-16(fp)
   445ac:	10800817 	ldw	r2,32(r2)
   445b0:	18800035 	stwio	r2,0(r3)
   445b4:	e0bffa17 	ldw	r2,-24(fp)
   445b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   445bc:	e0bff817 	ldw	r2,-32(fp)
   445c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   445c4:	e0bffe17 	ldw	r2,-8(fp)
   445c8:	0080100e 	bge	zero,r2,4460c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   445cc:	e0bfff17 	ldw	r2,-4(fp)
   445d0:	1090000c 	andi	r2,r2,16384
   445d4:	1000101e 	bne	r2,zero,44618 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   445d8:	0001883a 	nop
   445dc:	e0bffc17 	ldw	r2,-16(fp)
   445e0:	10c00d17 	ldw	r3,52(r2)
   445e4:	e0bff517 	ldw	r2,-44(fp)
   445e8:	1880051e 	bne	r3,r2,44600 <altera_avalon_jtag_uart_write+0x1b8>
   445ec:	e0bffc17 	ldw	r2,-16(fp)
   445f0:	10c00917 	ldw	r3,36(r2)
   445f4:	e0bffc17 	ldw	r2,-16(fp)
   445f8:	10800117 	ldw	r2,4(r2)
   445fc:	18bff736 	bltu	r3,r2,445dc <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44600:	e0bffc17 	ldw	r2,-16(fp)
   44604:	10800917 	ldw	r2,36(r2)
   44608:	1000051e 	bne	r2,zero,44620 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4460c:	e0bffe17 	ldw	r2,-8(fp)
   44610:	00bfd016 	blt	zero,r2,44554 <altera_avalon_jtag_uart_write+0x10c>
   44614:	00000306 	br	44624 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   44618:	0001883a 	nop
   4461c:	00000106 	br	44624 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   44620:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44624:	e0fffd17 	ldw	r3,-12(fp)
   44628:	e0bff717 	ldw	r2,-36(fp)
   4462c:	18800426 	beq	r3,r2,44640 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   44630:	e0fffd17 	ldw	r3,-12(fp)
   44634:	e0bff717 	ldw	r2,-36(fp)
   44638:	1885c83a 	sub	r2,r3,r2
   4463c:	00000606 	br	44658 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   44640:	e0bfff17 	ldw	r2,-4(fp)
   44644:	1090000c 	andi	r2,r2,16384
   44648:	10000226 	beq	r2,zero,44654 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4464c:	00bffd44 	movi	r2,-11
   44650:	00000106 	br	44658 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   44654:	00bffec4 	movi	r2,-5
}
   44658:	e037883a 	mov	sp,fp
   4465c:	dfc00117 	ldw	ra,4(sp)
   44660:	df000017 	ldw	fp,0(sp)
   44664:	dec00204 	addi	sp,sp,8
   44668:	f800283a 	ret

0004466c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4466c:	defff504 	addi	sp,sp,-44
   44670:	df000a15 	stw	fp,40(sp)
   44674:	df000a04 	addi	fp,sp,40
   44678:	e13ffc15 	stw	r4,-16(fp)
   4467c:	e17ffd15 	stw	r5,-12(fp)
   44680:	e1bffe15 	stw	r6,-8(fp)
   44684:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   44688:	e03ff615 	stw	zero,-40(fp)
   4468c:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   44690:	10003c26 	beq	r2,zero,44784 <alt_alarm_start+0x118>
  {
    if (alarm)
   44694:	e0bffc17 	ldw	r2,-16(fp)
   44698:	10003826 	beq	r2,zero,4477c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   4469c:	e0bffc17 	ldw	r2,-16(fp)
   446a0:	e0fffe17 	ldw	r3,-8(fp)
   446a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   446a8:	e0bffc17 	ldw	r2,-16(fp)
   446ac:	e0ffff17 	ldw	r3,-4(fp)
   446b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   446b4:	0005303a 	rdctl	r2,status
   446b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   446bc:	e0fff917 	ldw	r3,-28(fp)
   446c0:	00bfff84 	movi	r2,-2
   446c4:	1884703a 	and	r2,r3,r2
   446c8:	1001703a 	wrctl	status,r2
  
  return context;
   446cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   446d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   446d4:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
   446d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   446dc:	e0fffd17 	ldw	r3,-12(fp)
   446e0:	e0bff617 	ldw	r2,-40(fp)
   446e4:	1885883a 	add	r2,r3,r2
   446e8:	10c00044 	addi	r3,r2,1
   446ec:	e0bffc17 	ldw	r2,-16(fp)
   446f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   446f4:	e0bffc17 	ldw	r2,-16(fp)
   446f8:	10c00217 	ldw	r3,8(r2)
   446fc:	e0bff617 	ldw	r2,-40(fp)
   44700:	1880042e 	bgeu	r3,r2,44714 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   44704:	e0bffc17 	ldw	r2,-16(fp)
   44708:	00c00044 	movi	r3,1
   4470c:	10c00405 	stb	r3,16(r2)
   44710:	00000206 	br	4471c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   44714:	e0bffc17 	ldw	r2,-16(fp)
   44718:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4471c:	e0bffc17 	ldw	r2,-16(fp)
   44720:	d0e00c04 	addi	r3,gp,-32720
   44724:	e0fffa15 	stw	r3,-24(fp)
   44728:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4472c:	e0bffb17 	ldw	r2,-20(fp)
   44730:	e0fffa17 	ldw	r3,-24(fp)
   44734:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44738:	e0bffa17 	ldw	r2,-24(fp)
   4473c:	10c00017 	ldw	r3,0(r2)
   44740:	e0bffb17 	ldw	r2,-20(fp)
   44744:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44748:	e0bffa17 	ldw	r2,-24(fp)
   4474c:	10800017 	ldw	r2,0(r2)
   44750:	e0fffb17 	ldw	r3,-20(fp)
   44754:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44758:	e0bffa17 	ldw	r2,-24(fp)
   4475c:	e0fffb17 	ldw	r3,-20(fp)
   44760:	10c00015 	stw	r3,0(r2)
   44764:	e0bff817 	ldw	r2,-32(fp)
   44768:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4476c:	e0bff717 	ldw	r2,-36(fp)
   44770:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   44774:	0005883a 	mov	r2,zero
   44778:	00000306 	br	44788 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   4477c:	00bffa84 	movi	r2,-22
   44780:	00000106 	br	44788 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   44784:	00bfde84 	movi	r2,-134
  }
}
   44788:	e037883a 	mov	sp,fp
   4478c:	df000017 	ldw	fp,0(sp)
   44790:	dec00104 	addi	sp,sp,4
   44794:	f800283a 	ret

00044798 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   44798:	defffa04 	addi	sp,sp,-24
   4479c:	dfc00515 	stw	ra,20(sp)
   447a0:	df000415 	stw	fp,16(sp)
   447a4:	df000404 	addi	fp,sp,16
   447a8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   447ac:	00800244 	movi	r2,9
   447b0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   447b4:	014003f4 	movhi	r5,15
   447b8:	29509004 	addi	r5,r5,16960
   447bc:	e13ffd17 	ldw	r4,-12(fp)
   447c0:	00431640 	call	43164 <__mulsi3>
   447c4:	100b883a 	mov	r5,r2
   447c8:	0100bef4 	movhi	r4,763
   447cc:	213c2004 	addi	r4,r4,-3968
   447d0:	00430a80 	call	430a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   447d4:	100b883a 	mov	r5,r2
   447d8:	01200034 	movhi	r4,32768
   447dc:	213fffc4 	addi	r4,r4,-1
   447e0:	00430a80 	call	430a8 <__udivsi3>
   447e4:	100b883a 	mov	r5,r2
   447e8:	e13fff17 	ldw	r4,-4(fp)
   447ec:	00430a80 	call	430a8 <__udivsi3>
   447f0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   447f4:	e0bffe17 	ldw	r2,-8(fp)
   447f8:	10002a26 	beq	r2,zero,448a4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   447fc:	e03ffc15 	stw	zero,-16(fp)
   44800:	00001706 	br	44860 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   44804:	00a00034 	movhi	r2,32768
   44808:	10bfffc4 	addi	r2,r2,-1
   4480c:	10bfffc4 	addi	r2,r2,-1
   44810:	103ffe1e 	bne	r2,zero,4480c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   44814:	014003f4 	movhi	r5,15
   44818:	29509004 	addi	r5,r5,16960
   4481c:	e13ffd17 	ldw	r4,-12(fp)
   44820:	00431640 	call	43164 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   44824:	100b883a 	mov	r5,r2
   44828:	0100bef4 	movhi	r4,763
   4482c:	213c2004 	addi	r4,r4,-3968
   44830:	00430a80 	call	430a8 <__udivsi3>
   44834:	100b883a 	mov	r5,r2
   44838:	01200034 	movhi	r4,32768
   4483c:	213fffc4 	addi	r4,r4,-1
   44840:	00430a80 	call	430a8 <__udivsi3>
   44844:	1007883a 	mov	r3,r2
   44848:	e0bfff17 	ldw	r2,-4(fp)
   4484c:	10c5c83a 	sub	r2,r2,r3
   44850:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   44854:	e0bffc17 	ldw	r2,-16(fp)
   44858:	10800044 	addi	r2,r2,1
   4485c:	e0bffc15 	stw	r2,-16(fp)
   44860:	e0fffc17 	ldw	r3,-16(fp)
   44864:	e0bffe17 	ldw	r2,-8(fp)
   44868:	18bfe616 	blt	r3,r2,44804 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4486c:	014003f4 	movhi	r5,15
   44870:	29509004 	addi	r5,r5,16960
   44874:	e13ffd17 	ldw	r4,-12(fp)
   44878:	00431640 	call	43164 <__mulsi3>
   4487c:	100b883a 	mov	r5,r2
   44880:	0100bef4 	movhi	r4,763
   44884:	213c2004 	addi	r4,r4,-3968
   44888:	00430a80 	call	430a8 <__udivsi3>
   4488c:	e17fff17 	ldw	r5,-4(fp)
   44890:	1009883a 	mov	r4,r2
   44894:	00431640 	call	43164 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   44898:	10bfffc4 	addi	r2,r2,-1
   4489c:	103ffe1e 	bne	r2,zero,44898 <alt_busy_sleep+0x100>
   448a0:	00000d06 	br	448d8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   448a4:	014003f4 	movhi	r5,15
   448a8:	29509004 	addi	r5,r5,16960
   448ac:	e13ffd17 	ldw	r4,-12(fp)
   448b0:	00431640 	call	43164 <__mulsi3>
   448b4:	100b883a 	mov	r5,r2
   448b8:	0100bef4 	movhi	r4,763
   448bc:	213c2004 	addi	r4,r4,-3968
   448c0:	00430a80 	call	430a8 <__udivsi3>
   448c4:	e17fff17 	ldw	r5,-4(fp)
   448c8:	1009883a 	mov	r4,r2
   448cc:	00431640 	call	43164 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   448d0:	10bfffc4 	addi	r2,r2,-1
   448d4:	00bffe16 	blt	zero,r2,448d0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   448d8:	0005883a 	mov	r2,zero
}
   448dc:	e037883a 	mov	sp,fp
   448e0:	dfc00117 	ldw	ra,4(sp)
   448e4:	df000017 	ldw	fp,0(sp)
   448e8:	dec00204 	addi	sp,sp,8
   448ec:	f800283a 	ret

000448f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   448f0:	deffff04 	addi	sp,sp,-4
   448f4:	df000015 	stw	fp,0(sp)
   448f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   448fc:	0001883a 	nop
   44900:	e037883a 	mov	sp,fp
   44904:	df000017 	ldw	fp,0(sp)
   44908:	dec00104 	addi	sp,sp,4
   4490c:	f800283a 	ret

00044910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44910:	defffe04 	addi	sp,sp,-8
   44914:	dfc00115 	stw	ra,4(sp)
   44918:	df000015 	stw	fp,0(sp)
   4491c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44920:	d0a00917 	ldw	r2,-32732(gp)
   44924:	10000326 	beq	r2,zero,44934 <alt_get_errno+0x24>
   44928:	d0a00917 	ldw	r2,-32732(gp)
   4492c:	103ee83a 	callr	r2
   44930:	00000106 	br	44938 <alt_get_errno+0x28>
   44934:	d0a6ac04 	addi	r2,gp,-25936
}
   44938:	e037883a 	mov	sp,fp
   4493c:	dfc00117 	ldw	ra,4(sp)
   44940:	df000017 	ldw	fp,0(sp)
   44944:	dec00204 	addi	sp,sp,8
   44948:	f800283a 	ret

0004494c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4494c:	defffa04 	addi	sp,sp,-24
   44950:	dfc00515 	stw	ra,20(sp)
   44954:	df000415 	stw	fp,16(sp)
   44958:	df000404 	addi	fp,sp,16
   4495c:	e13ffe15 	stw	r4,-8(fp)
   44960:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44964:	e0bffe17 	ldw	r2,-8(fp)
   44968:	10000326 	beq	r2,zero,44978 <alt_dev_llist_insert+0x2c>
   4496c:	e0bffe17 	ldw	r2,-8(fp)
   44970:	10800217 	ldw	r2,8(r2)
   44974:	1000061e 	bne	r2,zero,44990 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44978:	00449100 	call	44910 <alt_get_errno>
   4497c:	1007883a 	mov	r3,r2
   44980:	00800584 	movi	r2,22
   44984:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44988:	00bffa84 	movi	r2,-22
   4498c:	00001306 	br	449dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44990:	e0bffe17 	ldw	r2,-8(fp)
   44994:	e0ffff17 	ldw	r3,-4(fp)
   44998:	e0fffc15 	stw	r3,-16(fp)
   4499c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   449a0:	e0bffd17 	ldw	r2,-12(fp)
   449a4:	e0fffc17 	ldw	r3,-16(fp)
   449a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   449ac:	e0bffc17 	ldw	r2,-16(fp)
   449b0:	10c00017 	ldw	r3,0(r2)
   449b4:	e0bffd17 	ldw	r2,-12(fp)
   449b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   449bc:	e0bffc17 	ldw	r2,-16(fp)
   449c0:	10800017 	ldw	r2,0(r2)
   449c4:	e0fffd17 	ldw	r3,-12(fp)
   449c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   449cc:	e0bffc17 	ldw	r2,-16(fp)
   449d0:	e0fffd17 	ldw	r3,-12(fp)
   449d4:	10c00015 	stw	r3,0(r2)

  return 0;  
   449d8:	0005883a 	mov	r2,zero
}
   449dc:	e037883a 	mov	sp,fp
   449e0:	dfc00117 	ldw	ra,4(sp)
   449e4:	df000017 	ldw	fp,0(sp)
   449e8:	dec00204 	addi	sp,sp,8
   449ec:	f800283a 	ret

000449f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   449f0:	defffd04 	addi	sp,sp,-12
   449f4:	dfc00215 	stw	ra,8(sp)
   449f8:	df000115 	stw	fp,4(sp)
   449fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44a00:	00800134 	movhi	r2,4
   44a04:	10966904 	addi	r2,r2,22948
   44a08:	e0bfff15 	stw	r2,-4(fp)
   44a0c:	00000606 	br	44a28 <_do_ctors+0x38>
        (*ctor) (); 
   44a10:	e0bfff17 	ldw	r2,-4(fp)
   44a14:	10800017 	ldw	r2,0(r2)
   44a18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44a1c:	e0bfff17 	ldw	r2,-4(fp)
   44a20:	10bfff04 	addi	r2,r2,-4
   44a24:	e0bfff15 	stw	r2,-4(fp)
   44a28:	e0ffff17 	ldw	r3,-4(fp)
   44a2c:	00800134 	movhi	r2,4
   44a30:	10966a04 	addi	r2,r2,22952
   44a34:	18bff62e 	bgeu	r3,r2,44a10 <_do_ctors+0x20>
        (*ctor) (); 
}
   44a38:	0001883a 	nop
   44a3c:	e037883a 	mov	sp,fp
   44a40:	dfc00117 	ldw	ra,4(sp)
   44a44:	df000017 	ldw	fp,0(sp)
   44a48:	dec00204 	addi	sp,sp,8
   44a4c:	f800283a 	ret

00044a50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   44a50:	defffd04 	addi	sp,sp,-12
   44a54:	dfc00215 	stw	ra,8(sp)
   44a58:	df000115 	stw	fp,4(sp)
   44a5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44a60:	00800134 	movhi	r2,4
   44a64:	10966904 	addi	r2,r2,22948
   44a68:	e0bfff15 	stw	r2,-4(fp)
   44a6c:	00000606 	br	44a88 <_do_dtors+0x38>
        (*dtor) (); 
   44a70:	e0bfff17 	ldw	r2,-4(fp)
   44a74:	10800017 	ldw	r2,0(r2)
   44a78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44a7c:	e0bfff17 	ldw	r2,-4(fp)
   44a80:	10bfff04 	addi	r2,r2,-4
   44a84:	e0bfff15 	stw	r2,-4(fp)
   44a88:	e0ffff17 	ldw	r3,-4(fp)
   44a8c:	00800134 	movhi	r2,4
   44a90:	10966a04 	addi	r2,r2,22952
   44a94:	18bff62e 	bgeu	r3,r2,44a70 <_do_dtors+0x20>
        (*dtor) (); 
}
   44a98:	0001883a 	nop
   44a9c:	e037883a 	mov	sp,fp
   44aa0:	dfc00117 	ldw	ra,4(sp)
   44aa4:	df000017 	ldw	fp,0(sp)
   44aa8:	dec00204 	addi	sp,sp,8
   44aac:	f800283a 	ret

00044ab0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44ab0:	deffff04 	addi	sp,sp,-4
   44ab4:	df000015 	stw	fp,0(sp)
   44ab8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   44abc:	0001883a 	nop
   44ac0:	e037883a 	mov	sp,fp
   44ac4:	df000017 	ldw	fp,0(sp)
   44ac8:	dec00104 	addi	sp,sp,4
   44acc:	f800283a 	ret

00044ad0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44ad0:	defff904 	addi	sp,sp,-28
   44ad4:	dfc00615 	stw	ra,24(sp)
   44ad8:	df000515 	stw	fp,20(sp)
   44adc:	df000504 	addi	fp,sp,20
   44ae0:	e13ffc15 	stw	r4,-16(fp)
   44ae4:	e17ffd15 	stw	r5,-12(fp)
   44ae8:	e1bffe15 	stw	r6,-8(fp)
   44aec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44af0:	e0800217 	ldw	r2,8(fp)
   44af4:	d8800015 	stw	r2,0(sp)
   44af8:	e1ffff17 	ldw	r7,-4(fp)
   44afc:	e1bffe17 	ldw	r6,-8(fp)
   44b00:	e17ffd17 	ldw	r5,-12(fp)
   44b04:	e13ffc17 	ldw	r4,-16(fp)
   44b08:	0044c800 	call	44c80 <alt_iic_isr_register>
}  
   44b0c:	e037883a 	mov	sp,fp
   44b10:	dfc00117 	ldw	ra,4(sp)
   44b14:	df000017 	ldw	fp,0(sp)
   44b18:	dec00204 	addi	sp,sp,8
   44b1c:	f800283a 	ret

00044b20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   44b20:	defff904 	addi	sp,sp,-28
   44b24:	df000615 	stw	fp,24(sp)
   44b28:	df000604 	addi	fp,sp,24
   44b2c:	e13ffe15 	stw	r4,-8(fp)
   44b30:	e17fff15 	stw	r5,-4(fp)
   44b34:	e0bfff17 	ldw	r2,-4(fp)
   44b38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44b3c:	0005303a 	rdctl	r2,status
   44b40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44b44:	e0fffb17 	ldw	r3,-20(fp)
   44b48:	00bfff84 	movi	r2,-2
   44b4c:	1884703a 	and	r2,r3,r2
   44b50:	1001703a 	wrctl	status,r2
  
  return context;
   44b54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44b58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44b5c:	00c00044 	movi	r3,1
   44b60:	e0bffa17 	ldw	r2,-24(fp)
   44b64:	1884983a 	sll	r2,r3,r2
   44b68:	1007883a 	mov	r3,r2
   44b6c:	d0a6b017 	ldw	r2,-25920(gp)
   44b70:	1884b03a 	or	r2,r3,r2
   44b74:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44b78:	d0a6b017 	ldw	r2,-25920(gp)
   44b7c:	100170fa 	wrctl	ienable,r2
   44b80:	e0bffc17 	ldw	r2,-16(fp)
   44b84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44b88:	e0bffd17 	ldw	r2,-12(fp)
   44b8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44b90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44b94:	0001883a 	nop
}
   44b98:	e037883a 	mov	sp,fp
   44b9c:	df000017 	ldw	fp,0(sp)
   44ba0:	dec00104 	addi	sp,sp,4
   44ba4:	f800283a 	ret

00044ba8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44ba8:	defff904 	addi	sp,sp,-28
   44bac:	df000615 	stw	fp,24(sp)
   44bb0:	df000604 	addi	fp,sp,24
   44bb4:	e13ffe15 	stw	r4,-8(fp)
   44bb8:	e17fff15 	stw	r5,-4(fp)
   44bbc:	e0bfff17 	ldw	r2,-4(fp)
   44bc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44bc4:	0005303a 	rdctl	r2,status
   44bc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44bcc:	e0fffb17 	ldw	r3,-20(fp)
   44bd0:	00bfff84 	movi	r2,-2
   44bd4:	1884703a 	and	r2,r3,r2
   44bd8:	1001703a 	wrctl	status,r2
  
  return context;
   44bdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44be0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   44be4:	00c00044 	movi	r3,1
   44be8:	e0bffa17 	ldw	r2,-24(fp)
   44bec:	1884983a 	sll	r2,r3,r2
   44bf0:	0084303a 	nor	r2,zero,r2
   44bf4:	1007883a 	mov	r3,r2
   44bf8:	d0a6b017 	ldw	r2,-25920(gp)
   44bfc:	1884703a 	and	r2,r3,r2
   44c00:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44c04:	d0a6b017 	ldw	r2,-25920(gp)
   44c08:	100170fa 	wrctl	ienable,r2
   44c0c:	e0bffc17 	ldw	r2,-16(fp)
   44c10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44c14:	e0bffd17 	ldw	r2,-12(fp)
   44c18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44c1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   44c20:	0001883a 	nop
}
   44c24:	e037883a 	mov	sp,fp
   44c28:	df000017 	ldw	fp,0(sp)
   44c2c:	dec00104 	addi	sp,sp,4
   44c30:	f800283a 	ret

00044c34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   44c34:	defffc04 	addi	sp,sp,-16
   44c38:	df000315 	stw	fp,12(sp)
   44c3c:	df000304 	addi	fp,sp,12
   44c40:	e13ffe15 	stw	r4,-8(fp)
   44c44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   44c48:	000530fa 	rdctl	r2,ienable
   44c4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44c50:	00c00044 	movi	r3,1
   44c54:	e0bfff17 	ldw	r2,-4(fp)
   44c58:	1884983a 	sll	r2,r3,r2
   44c5c:	1007883a 	mov	r3,r2
   44c60:	e0bffd17 	ldw	r2,-12(fp)
   44c64:	1884703a 	and	r2,r3,r2
   44c68:	1004c03a 	cmpne	r2,r2,zero
   44c6c:	10803fcc 	andi	r2,r2,255
}
   44c70:	e037883a 	mov	sp,fp
   44c74:	df000017 	ldw	fp,0(sp)
   44c78:	dec00104 	addi	sp,sp,4
   44c7c:	f800283a 	ret

00044c80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44c80:	defff504 	addi	sp,sp,-44
   44c84:	dfc00a15 	stw	ra,40(sp)
   44c88:	df000915 	stw	fp,36(sp)
   44c8c:	df000904 	addi	fp,sp,36
   44c90:	e13ffc15 	stw	r4,-16(fp)
   44c94:	e17ffd15 	stw	r5,-12(fp)
   44c98:	e1bffe15 	stw	r6,-8(fp)
   44c9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44ca0:	00bffa84 	movi	r2,-22
   44ca4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44ca8:	e0bffd17 	ldw	r2,-12(fp)
   44cac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44cb0:	e0bff817 	ldw	r2,-32(fp)
   44cb4:	10800808 	cmpgei	r2,r2,32
   44cb8:	1000271e 	bne	r2,zero,44d58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44cbc:	0005303a 	rdctl	r2,status
   44cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44cc4:	e0fffb17 	ldw	r3,-20(fp)
   44cc8:	00bfff84 	movi	r2,-2
   44ccc:	1884703a 	and	r2,r3,r2
   44cd0:	1001703a 	wrctl	status,r2
  
  return context;
   44cd4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44cd8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   44cdc:	00800174 	movhi	r2,5
   44ce0:	10a3c804 	addi	r2,r2,-28896
   44ce4:	e0fff817 	ldw	r3,-32(fp)
   44ce8:	180690fa 	slli	r3,r3,3
   44cec:	10c5883a 	add	r2,r2,r3
   44cf0:	e0fffe17 	ldw	r3,-8(fp)
   44cf4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   44cf8:	00800174 	movhi	r2,5
   44cfc:	10a3c804 	addi	r2,r2,-28896
   44d00:	e0fff817 	ldw	r3,-32(fp)
   44d04:	180690fa 	slli	r3,r3,3
   44d08:	10c5883a 	add	r2,r2,r3
   44d0c:	10800104 	addi	r2,r2,4
   44d10:	e0ffff17 	ldw	r3,-4(fp)
   44d14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44d18:	e0bffe17 	ldw	r2,-8(fp)
   44d1c:	10000526 	beq	r2,zero,44d34 <alt_iic_isr_register+0xb4>
   44d20:	e0bff817 	ldw	r2,-32(fp)
   44d24:	100b883a 	mov	r5,r2
   44d28:	e13ffc17 	ldw	r4,-16(fp)
   44d2c:	0044b200 	call	44b20 <alt_ic_irq_enable>
   44d30:	00000406 	br	44d44 <alt_iic_isr_register+0xc4>
   44d34:	e0bff817 	ldw	r2,-32(fp)
   44d38:	100b883a 	mov	r5,r2
   44d3c:	e13ffc17 	ldw	r4,-16(fp)
   44d40:	0044ba80 	call	44ba8 <alt_ic_irq_disable>
   44d44:	e0bff715 	stw	r2,-36(fp)
   44d48:	e0bffa17 	ldw	r2,-24(fp)
   44d4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44d50:	e0bff917 	ldw	r2,-28(fp)
   44d54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   44d58:	e0bff717 	ldw	r2,-36(fp)
}
   44d5c:	e037883a 	mov	sp,fp
   44d60:	dfc00117 	ldw	ra,4(sp)
   44d64:	df000017 	ldw	fp,0(sp)
   44d68:	dec00204 	addi	sp,sp,8
   44d6c:	f800283a 	ret

00044d70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44d70:	defff804 	addi	sp,sp,-32
   44d74:	dfc00715 	stw	ra,28(sp)
   44d78:	df000615 	stw	fp,24(sp)
   44d7c:	dc000515 	stw	r16,20(sp)
   44d80:	df000604 	addi	fp,sp,24
   44d84:	e13ffb15 	stw	r4,-20(fp)
   44d88:	e17ffc15 	stw	r5,-16(fp)
   44d8c:	e1bffd15 	stw	r6,-12(fp)
   44d90:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   44d94:	e1bffe17 	ldw	r6,-8(fp)
   44d98:	e17ffd17 	ldw	r5,-12(fp)
   44d9c:	e13ffc17 	ldw	r4,-16(fp)
   44da0:	0044ff80 	call	44ff8 <open>
   44da4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   44da8:	e0bffa17 	ldw	r2,-24(fp)
   44dac:	10002216 	blt	r2,zero,44e38 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   44db0:	04000134 	movhi	r16,4
   44db4:	84189204 	addi	r16,r16,25160
   44db8:	e0bffa17 	ldw	r2,-24(fp)
   44dbc:	01400304 	movi	r5,12
   44dc0:	1009883a 	mov	r4,r2
   44dc4:	00431640 	call	43164 <__mulsi3>
   44dc8:	8085883a 	add	r2,r16,r2
   44dcc:	10c00017 	ldw	r3,0(r2)
   44dd0:	e0bffb17 	ldw	r2,-20(fp)
   44dd4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44dd8:	04000134 	movhi	r16,4
   44ddc:	84189204 	addi	r16,r16,25160
   44de0:	e0bffa17 	ldw	r2,-24(fp)
   44de4:	01400304 	movi	r5,12
   44de8:	1009883a 	mov	r4,r2
   44dec:	00431640 	call	43164 <__mulsi3>
   44df0:	8085883a 	add	r2,r16,r2
   44df4:	10800104 	addi	r2,r2,4
   44df8:	10c00017 	ldw	r3,0(r2)
   44dfc:	e0bffb17 	ldw	r2,-20(fp)
   44e00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44e04:	04000134 	movhi	r16,4
   44e08:	84189204 	addi	r16,r16,25160
   44e0c:	e0bffa17 	ldw	r2,-24(fp)
   44e10:	01400304 	movi	r5,12
   44e14:	1009883a 	mov	r4,r2
   44e18:	00431640 	call	43164 <__mulsi3>
   44e1c:	8085883a 	add	r2,r16,r2
   44e20:	10800204 	addi	r2,r2,8
   44e24:	10c00017 	ldw	r3,0(r2)
   44e28:	e0bffb17 	ldw	r2,-20(fp)
   44e2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44e30:	e13ffa17 	ldw	r4,-24(fp)
   44e34:	00438b00 	call	438b0 <alt_release_fd>
  }
} 
   44e38:	0001883a 	nop
   44e3c:	e6ffff04 	addi	sp,fp,-4
   44e40:	dfc00217 	ldw	ra,8(sp)
   44e44:	df000117 	ldw	fp,4(sp)
   44e48:	dc000017 	ldw	r16,0(sp)
   44e4c:	dec00304 	addi	sp,sp,12
   44e50:	f800283a 	ret

00044e54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44e54:	defffb04 	addi	sp,sp,-20
   44e58:	dfc00415 	stw	ra,16(sp)
   44e5c:	df000315 	stw	fp,12(sp)
   44e60:	df000304 	addi	fp,sp,12
   44e64:	e13ffd15 	stw	r4,-12(fp)
   44e68:	e17ffe15 	stw	r5,-8(fp)
   44e6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44e70:	01c07fc4 	movi	r7,511
   44e74:	01800044 	movi	r6,1
   44e78:	e17ffd17 	ldw	r5,-12(fp)
   44e7c:	01000134 	movhi	r4,4
   44e80:	21189504 	addi	r4,r4,25172
   44e84:	0044d700 	call	44d70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44e88:	01c07fc4 	movi	r7,511
   44e8c:	000d883a 	mov	r6,zero
   44e90:	e17ffe17 	ldw	r5,-8(fp)
   44e94:	01000134 	movhi	r4,4
   44e98:	21189204 	addi	r4,r4,25160
   44e9c:	0044d700 	call	44d70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44ea0:	01c07fc4 	movi	r7,511
   44ea4:	01800044 	movi	r6,1
   44ea8:	e17fff17 	ldw	r5,-4(fp)
   44eac:	01000134 	movhi	r4,4
   44eb0:	21189804 	addi	r4,r4,25184
   44eb4:	0044d700 	call	44d70 <alt_open_fd>
}  
   44eb8:	0001883a 	nop
   44ebc:	e037883a 	mov	sp,fp
   44ec0:	dfc00117 	ldw	ra,4(sp)
   44ec4:	df000017 	ldw	fp,0(sp)
   44ec8:	dec00204 	addi	sp,sp,8
   44ecc:	f800283a 	ret

00044ed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44ed0:	defffe04 	addi	sp,sp,-8
   44ed4:	dfc00115 	stw	ra,4(sp)
   44ed8:	df000015 	stw	fp,0(sp)
   44edc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44ee0:	d0a00917 	ldw	r2,-32732(gp)
   44ee4:	10000326 	beq	r2,zero,44ef4 <alt_get_errno+0x24>
   44ee8:	d0a00917 	ldw	r2,-32732(gp)
   44eec:	103ee83a 	callr	r2
   44ef0:	00000106 	br	44ef8 <alt_get_errno+0x28>
   44ef4:	d0a6ac04 	addi	r2,gp,-25936
}
   44ef8:	e037883a 	mov	sp,fp
   44efc:	dfc00117 	ldw	ra,4(sp)
   44f00:	df000017 	ldw	fp,0(sp)
   44f04:	dec00204 	addi	sp,sp,8
   44f08:	f800283a 	ret

00044f0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44f0c:	defffb04 	addi	sp,sp,-20
   44f10:	dfc00415 	stw	ra,16(sp)
   44f14:	df000315 	stw	fp,12(sp)
   44f18:	dc000215 	stw	r16,8(sp)
   44f1c:	df000304 	addi	fp,sp,12
   44f20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44f24:	e0bffe17 	ldw	r2,-8(fp)
   44f28:	10800217 	ldw	r2,8(r2)
   44f2c:	10d00034 	orhi	r3,r2,16384
   44f30:	e0bffe17 	ldw	r2,-8(fp)
   44f34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44f38:	e03ffd15 	stw	zero,-12(fp)
   44f3c:	00002306 	br	44fcc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44f40:	04000134 	movhi	r16,4
   44f44:	84189204 	addi	r16,r16,25160
   44f48:	e0bffd17 	ldw	r2,-12(fp)
   44f4c:	01400304 	movi	r5,12
   44f50:	1009883a 	mov	r4,r2
   44f54:	00431640 	call	43164 <__mulsi3>
   44f58:	8085883a 	add	r2,r16,r2
   44f5c:	10c00017 	ldw	r3,0(r2)
   44f60:	e0bffe17 	ldw	r2,-8(fp)
   44f64:	10800017 	ldw	r2,0(r2)
   44f68:	1880151e 	bne	r3,r2,44fc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44f6c:	04000134 	movhi	r16,4
   44f70:	84189204 	addi	r16,r16,25160
   44f74:	e0bffd17 	ldw	r2,-12(fp)
   44f78:	01400304 	movi	r5,12
   44f7c:	1009883a 	mov	r4,r2
   44f80:	00431640 	call	43164 <__mulsi3>
   44f84:	8085883a 	add	r2,r16,r2
   44f88:	10800204 	addi	r2,r2,8
   44f8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44f90:	10000b0e 	bge	r2,zero,44fc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44f94:	01400304 	movi	r5,12
   44f98:	e13ffd17 	ldw	r4,-12(fp)
   44f9c:	00431640 	call	43164 <__mulsi3>
   44fa0:	1007883a 	mov	r3,r2
   44fa4:	00800134 	movhi	r2,4
   44fa8:	10989204 	addi	r2,r2,25160
   44fac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44fb0:	e0bffe17 	ldw	r2,-8(fp)
   44fb4:	18800226 	beq	r3,r2,44fc0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44fb8:	00bffcc4 	movi	r2,-13
   44fbc:	00000806 	br	44fe0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44fc0:	e0bffd17 	ldw	r2,-12(fp)
   44fc4:	10800044 	addi	r2,r2,1
   44fc8:	e0bffd15 	stw	r2,-12(fp)
   44fcc:	d0a00817 	ldw	r2,-32736(gp)
   44fd0:	1007883a 	mov	r3,r2
   44fd4:	e0bffd17 	ldw	r2,-12(fp)
   44fd8:	18bfd92e 	bgeu	r3,r2,44f40 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44fdc:	0005883a 	mov	r2,zero
}
   44fe0:	e6ffff04 	addi	sp,fp,-4
   44fe4:	dfc00217 	ldw	ra,8(sp)
   44fe8:	df000117 	ldw	fp,4(sp)
   44fec:	dc000017 	ldw	r16,0(sp)
   44ff0:	dec00304 	addi	sp,sp,12
   44ff4:	f800283a 	ret

00044ff8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44ff8:	defff604 	addi	sp,sp,-40
   44ffc:	dfc00915 	stw	ra,36(sp)
   45000:	df000815 	stw	fp,32(sp)
   45004:	df000804 	addi	fp,sp,32
   45008:	e13ffd15 	stw	r4,-12(fp)
   4500c:	e17ffe15 	stw	r5,-8(fp)
   45010:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45014:	00bfffc4 	movi	r2,-1
   45018:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4501c:	00bffb44 	movi	r2,-19
   45020:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45024:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   45028:	d1600604 	addi	r5,gp,-32744
   4502c:	e13ffd17 	ldw	r4,-12(fp)
   45030:	004531c0 	call	4531c <alt_find_dev>
   45034:	e0bff815 	stw	r2,-32(fp)
   45038:	e0bff817 	ldw	r2,-32(fp)
   4503c:	1000051e 	bne	r2,zero,45054 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45040:	e13ffd17 	ldw	r4,-12(fp)
   45044:	00453ac0 	call	453ac <alt_find_file>
   45048:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4504c:	00800044 	movi	r2,1
   45050:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45054:	e0bff817 	ldw	r2,-32(fp)
   45058:	10002b26 	beq	r2,zero,45108 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4505c:	e13ff817 	ldw	r4,-32(fp)
   45060:	00454b40 	call	454b4 <alt_get_fd>
   45064:	e0bff915 	stw	r2,-28(fp)
   45068:	e0bff917 	ldw	r2,-28(fp)
   4506c:	1000030e 	bge	r2,zero,4507c <open+0x84>
    {
      status = index;
   45070:	e0bff917 	ldw	r2,-28(fp)
   45074:	e0bffa15 	stw	r2,-24(fp)
   45078:	00002506 	br	45110 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   4507c:	01400304 	movi	r5,12
   45080:	e13ff917 	ldw	r4,-28(fp)
   45084:	00431640 	call	43164 <__mulsi3>
   45088:	1007883a 	mov	r3,r2
   4508c:	00800134 	movhi	r2,4
   45090:	10989204 	addi	r2,r2,25160
   45094:	1885883a 	add	r2,r3,r2
   45098:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4509c:	e0fffe17 	ldw	r3,-8(fp)
   450a0:	00900034 	movhi	r2,16384
   450a4:	10bfffc4 	addi	r2,r2,-1
   450a8:	1886703a 	and	r3,r3,r2
   450ac:	e0bffc17 	ldw	r2,-16(fp)
   450b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   450b4:	e0bffb17 	ldw	r2,-20(fp)
   450b8:	1000051e 	bne	r2,zero,450d0 <open+0xd8>
   450bc:	e13ffc17 	ldw	r4,-16(fp)
   450c0:	0044f0c0 	call	44f0c <alt_file_locked>
   450c4:	e0bffa15 	stw	r2,-24(fp)
   450c8:	e0bffa17 	ldw	r2,-24(fp)
   450cc:	10001016 	blt	r2,zero,45110 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   450d0:	e0bff817 	ldw	r2,-32(fp)
   450d4:	10800317 	ldw	r2,12(r2)
   450d8:	10000826 	beq	r2,zero,450fc <open+0x104>
   450dc:	e0bff817 	ldw	r2,-32(fp)
   450e0:	10800317 	ldw	r2,12(r2)
   450e4:	e1ffff17 	ldw	r7,-4(fp)
   450e8:	e1bffe17 	ldw	r6,-8(fp)
   450ec:	e17ffd17 	ldw	r5,-12(fp)
   450f0:	e13ffc17 	ldw	r4,-16(fp)
   450f4:	103ee83a 	callr	r2
   450f8:	00000106 	br	45100 <open+0x108>
   450fc:	0005883a 	mov	r2,zero
   45100:	e0bffa15 	stw	r2,-24(fp)
   45104:	00000206 	br	45110 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   45108:	00bffb44 	movi	r2,-19
   4510c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   45110:	e0bffa17 	ldw	r2,-24(fp)
   45114:	1000090e 	bge	r2,zero,4513c <open+0x144>
  {
    alt_release_fd (index);  
   45118:	e13ff917 	ldw	r4,-28(fp)
   4511c:	00438b00 	call	438b0 <alt_release_fd>
    ALT_ERRNO = -status;
   45120:	0044ed00 	call	44ed0 <alt_get_errno>
   45124:	1007883a 	mov	r3,r2
   45128:	e0bffa17 	ldw	r2,-24(fp)
   4512c:	0085c83a 	sub	r2,zero,r2
   45130:	18800015 	stw	r2,0(r3)
    return -1;
   45134:	00bfffc4 	movi	r2,-1
   45138:	00000106 	br	45140 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   4513c:	e0bff917 	ldw	r2,-28(fp)
}
   45140:	e037883a 	mov	sp,fp
   45144:	dfc00117 	ldw	ra,4(sp)
   45148:	df000017 	ldw	fp,0(sp)
   4514c:	dec00204 	addi	sp,sp,8
   45150:	f800283a 	ret

00045154 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   45154:	defffa04 	addi	sp,sp,-24
   45158:	df000515 	stw	fp,20(sp)
   4515c:	df000504 	addi	fp,sp,20
   45160:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   45164:	0005303a 	rdctl	r2,status
   45168:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4516c:	e0fffc17 	ldw	r3,-16(fp)
   45170:	00bfff84 	movi	r2,-2
   45174:	1884703a 	and	r2,r3,r2
   45178:	1001703a 	wrctl	status,r2
  
  return context;
   4517c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   45180:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   45184:	e0bfff17 	ldw	r2,-4(fp)
   45188:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4518c:	e0bffd17 	ldw	r2,-12(fp)
   45190:	10800017 	ldw	r2,0(r2)
   45194:	e0fffd17 	ldw	r3,-12(fp)
   45198:	18c00117 	ldw	r3,4(r3)
   4519c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   451a0:	e0bffd17 	ldw	r2,-12(fp)
   451a4:	10800117 	ldw	r2,4(r2)
   451a8:	e0fffd17 	ldw	r3,-12(fp)
   451ac:	18c00017 	ldw	r3,0(r3)
   451b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   451b4:	e0bffd17 	ldw	r2,-12(fp)
   451b8:	e0fffd17 	ldw	r3,-12(fp)
   451bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   451c0:	e0bffd17 	ldw	r2,-12(fp)
   451c4:	e0fffd17 	ldw	r3,-12(fp)
   451c8:	10c00015 	stw	r3,0(r2)
   451cc:	e0bffb17 	ldw	r2,-20(fp)
   451d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   451d4:	e0bffe17 	ldw	r2,-8(fp)
   451d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   451dc:	0001883a 	nop
   451e0:	e037883a 	mov	sp,fp
   451e4:	df000017 	ldw	fp,0(sp)
   451e8:	dec00104 	addi	sp,sp,4
   451ec:	f800283a 	ret

000451f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   451f0:	defffb04 	addi	sp,sp,-20
   451f4:	dfc00415 	stw	ra,16(sp)
   451f8:	df000315 	stw	fp,12(sp)
   451fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   45200:	d0a00c17 	ldw	r2,-32720(gp)
   45204:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   45208:	d0a6b217 	ldw	r2,-25912(gp)
   4520c:	10800044 	addi	r2,r2,1
   45210:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   45214:	00002e06 	br	452d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   45218:	e0bffd17 	ldw	r2,-12(fp)
   4521c:	10800017 	ldw	r2,0(r2)
   45220:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   45224:	e0bffd17 	ldw	r2,-12(fp)
   45228:	10800403 	ldbu	r2,16(r2)
   4522c:	10803fcc 	andi	r2,r2,255
   45230:	10000426 	beq	r2,zero,45244 <alt_tick+0x54>
   45234:	d0a6b217 	ldw	r2,-25912(gp)
   45238:	1000021e 	bne	r2,zero,45244 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4523c:	e0bffd17 	ldw	r2,-12(fp)
   45240:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   45244:	e0bffd17 	ldw	r2,-12(fp)
   45248:	10800217 	ldw	r2,8(r2)
   4524c:	d0e6b217 	ldw	r3,-25912(gp)
   45250:	18801d36 	bltu	r3,r2,452c8 <alt_tick+0xd8>
   45254:	e0bffd17 	ldw	r2,-12(fp)
   45258:	10800403 	ldbu	r2,16(r2)
   4525c:	10803fcc 	andi	r2,r2,255
   45260:	1000191e 	bne	r2,zero,452c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   45264:	e0bffd17 	ldw	r2,-12(fp)
   45268:	10800317 	ldw	r2,12(r2)
   4526c:	e0fffd17 	ldw	r3,-12(fp)
   45270:	18c00517 	ldw	r3,20(r3)
   45274:	1809883a 	mov	r4,r3
   45278:	103ee83a 	callr	r2
   4527c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   45280:	e0bfff17 	ldw	r2,-4(fp)
   45284:	1000031e 	bne	r2,zero,45294 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   45288:	e13ffd17 	ldw	r4,-12(fp)
   4528c:	00451540 	call	45154 <alt_alarm_stop>
   45290:	00000d06 	br	452c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   45294:	e0bffd17 	ldw	r2,-12(fp)
   45298:	10c00217 	ldw	r3,8(r2)
   4529c:	e0bfff17 	ldw	r2,-4(fp)
   452a0:	1887883a 	add	r3,r3,r2
   452a4:	e0bffd17 	ldw	r2,-12(fp)
   452a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   452ac:	e0bffd17 	ldw	r2,-12(fp)
   452b0:	10c00217 	ldw	r3,8(r2)
   452b4:	d0a6b217 	ldw	r2,-25912(gp)
   452b8:	1880032e 	bgeu	r3,r2,452c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   452bc:	e0bffd17 	ldw	r2,-12(fp)
   452c0:	00c00044 	movi	r3,1
   452c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   452c8:	e0bffe17 	ldw	r2,-8(fp)
   452cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   452d0:	e0fffd17 	ldw	r3,-12(fp)
   452d4:	d0a00c04 	addi	r2,gp,-32720
   452d8:	18bfcf1e 	bne	r3,r2,45218 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   452dc:	0001883a 	nop
}
   452e0:	0001883a 	nop
   452e4:	e037883a 	mov	sp,fp
   452e8:	dfc00117 	ldw	ra,4(sp)
   452ec:	df000017 	ldw	fp,0(sp)
   452f0:	dec00204 	addi	sp,sp,8
   452f4:	f800283a 	ret

000452f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   452f8:	deffff04 	addi	sp,sp,-4
   452fc:	df000015 	stw	fp,0(sp)
   45300:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45304:	000170fa 	wrctl	ienable,zero
}
   45308:	0001883a 	nop
   4530c:	e037883a 	mov	sp,fp
   45310:	df000017 	ldw	fp,0(sp)
   45314:	dec00104 	addi	sp,sp,4
   45318:	f800283a 	ret

0004531c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4531c:	defffa04 	addi	sp,sp,-24
   45320:	dfc00515 	stw	ra,20(sp)
   45324:	df000415 	stw	fp,16(sp)
   45328:	df000404 	addi	fp,sp,16
   4532c:	e13ffe15 	stw	r4,-8(fp)
   45330:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45334:	e0bfff17 	ldw	r2,-4(fp)
   45338:	10800017 	ldw	r2,0(r2)
   4533c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45340:	e13ffe17 	ldw	r4,-8(fp)
   45344:	00404540 	call	40454 <strlen>
   45348:	10800044 	addi	r2,r2,1
   4534c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45350:	00000d06 	br	45388 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45354:	e0bffc17 	ldw	r2,-16(fp)
   45358:	10800217 	ldw	r2,8(r2)
   4535c:	e0fffd17 	ldw	r3,-12(fp)
   45360:	180d883a 	mov	r6,r3
   45364:	e17ffe17 	ldw	r5,-8(fp)
   45368:	1009883a 	mov	r4,r2
   4536c:	00456600 	call	45660 <memcmp>
   45370:	1000021e 	bne	r2,zero,4537c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45374:	e0bffc17 	ldw	r2,-16(fp)
   45378:	00000706 	br	45398 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4537c:	e0bffc17 	ldw	r2,-16(fp)
   45380:	10800017 	ldw	r2,0(r2)
   45384:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45388:	e0fffc17 	ldw	r3,-16(fp)
   4538c:	e0bfff17 	ldw	r2,-4(fp)
   45390:	18bff01e 	bne	r3,r2,45354 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45394:	0005883a 	mov	r2,zero
}
   45398:	e037883a 	mov	sp,fp
   4539c:	dfc00117 	ldw	ra,4(sp)
   453a0:	df000017 	ldw	fp,0(sp)
   453a4:	dec00204 	addi	sp,sp,8
   453a8:	f800283a 	ret

000453ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   453ac:	defffb04 	addi	sp,sp,-20
   453b0:	dfc00415 	stw	ra,16(sp)
   453b4:	df000315 	stw	fp,12(sp)
   453b8:	df000304 	addi	fp,sp,12
   453bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   453c0:	d0a00417 	ldw	r2,-32752(gp)
   453c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   453c8:	00003106 	br	45490 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   453cc:	e0bffd17 	ldw	r2,-12(fp)
   453d0:	10800217 	ldw	r2,8(r2)
   453d4:	1009883a 	mov	r4,r2
   453d8:	00404540 	call	40454 <strlen>
   453dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   453e0:	e0bffd17 	ldw	r2,-12(fp)
   453e4:	10c00217 	ldw	r3,8(r2)
   453e8:	e0bffe17 	ldw	r2,-8(fp)
   453ec:	10bfffc4 	addi	r2,r2,-1
   453f0:	1885883a 	add	r2,r3,r2
   453f4:	10800003 	ldbu	r2,0(r2)
   453f8:	10803fcc 	andi	r2,r2,255
   453fc:	1080201c 	xori	r2,r2,128
   45400:	10bfe004 	addi	r2,r2,-128
   45404:	10800bd8 	cmpnei	r2,r2,47
   45408:	1000031e 	bne	r2,zero,45418 <alt_find_file+0x6c>
    {
      len -= 1;
   4540c:	e0bffe17 	ldw	r2,-8(fp)
   45410:	10bfffc4 	addi	r2,r2,-1
   45414:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45418:	e0bffe17 	ldw	r2,-8(fp)
   4541c:	e0ffff17 	ldw	r3,-4(fp)
   45420:	1885883a 	add	r2,r3,r2
   45424:	10800003 	ldbu	r2,0(r2)
   45428:	10803fcc 	andi	r2,r2,255
   4542c:	1080201c 	xori	r2,r2,128
   45430:	10bfe004 	addi	r2,r2,-128
   45434:	10800be0 	cmpeqi	r2,r2,47
   45438:	1000081e 	bne	r2,zero,4545c <alt_find_file+0xb0>
   4543c:	e0bffe17 	ldw	r2,-8(fp)
   45440:	e0ffff17 	ldw	r3,-4(fp)
   45444:	1885883a 	add	r2,r3,r2
   45448:	10800003 	ldbu	r2,0(r2)
   4544c:	10803fcc 	andi	r2,r2,255
   45450:	1080201c 	xori	r2,r2,128
   45454:	10bfe004 	addi	r2,r2,-128
   45458:	10000a1e 	bne	r2,zero,45484 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4545c:	e0bffd17 	ldw	r2,-12(fp)
   45460:	10800217 	ldw	r2,8(r2)
   45464:	e0fffe17 	ldw	r3,-8(fp)
   45468:	180d883a 	mov	r6,r3
   4546c:	e17fff17 	ldw	r5,-4(fp)
   45470:	1009883a 	mov	r4,r2
   45474:	00456600 	call	45660 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45478:	1000021e 	bne	r2,zero,45484 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4547c:	e0bffd17 	ldw	r2,-12(fp)
   45480:	00000706 	br	454a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45484:	e0bffd17 	ldw	r2,-12(fp)
   45488:	10800017 	ldw	r2,0(r2)
   4548c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45490:	e0fffd17 	ldw	r3,-12(fp)
   45494:	d0a00404 	addi	r2,gp,-32752
   45498:	18bfcc1e 	bne	r3,r2,453cc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4549c:	0005883a 	mov	r2,zero
}
   454a0:	e037883a 	mov	sp,fp
   454a4:	dfc00117 	ldw	ra,4(sp)
   454a8:	df000017 	ldw	fp,0(sp)
   454ac:	dec00204 	addi	sp,sp,8
   454b0:	f800283a 	ret

000454b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   454b4:	defffa04 	addi	sp,sp,-24
   454b8:	dfc00515 	stw	ra,20(sp)
   454bc:	df000415 	stw	fp,16(sp)
   454c0:	dc000315 	stw	r16,12(sp)
   454c4:	df000404 	addi	fp,sp,16
   454c8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   454cc:	00bffa04 	movi	r2,-24
   454d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   454d4:	e03ffc15 	stw	zero,-16(fp)
   454d8:	00001d06 	br	45550 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   454dc:	04000134 	movhi	r16,4
   454e0:	84189204 	addi	r16,r16,25160
   454e4:	e0bffc17 	ldw	r2,-16(fp)
   454e8:	01400304 	movi	r5,12
   454ec:	1009883a 	mov	r4,r2
   454f0:	00431640 	call	43164 <__mulsi3>
   454f4:	8085883a 	add	r2,r16,r2
   454f8:	10800017 	ldw	r2,0(r2)
   454fc:	1000111e 	bne	r2,zero,45544 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   45500:	04000134 	movhi	r16,4
   45504:	84189204 	addi	r16,r16,25160
   45508:	e0bffc17 	ldw	r2,-16(fp)
   4550c:	01400304 	movi	r5,12
   45510:	1009883a 	mov	r4,r2
   45514:	00431640 	call	43164 <__mulsi3>
   45518:	8085883a 	add	r2,r16,r2
   4551c:	e0fffe17 	ldw	r3,-8(fp)
   45520:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   45524:	d0e00817 	ldw	r3,-32736(gp)
   45528:	e0bffc17 	ldw	r2,-16(fp)
   4552c:	1880020e 	bge	r3,r2,45538 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   45530:	e0bffc17 	ldw	r2,-16(fp)
   45534:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   45538:	e0bffc17 	ldw	r2,-16(fp)
   4553c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   45540:	00000606 	br	4555c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45544:	e0bffc17 	ldw	r2,-16(fp)
   45548:	10800044 	addi	r2,r2,1
   4554c:	e0bffc15 	stw	r2,-16(fp)
   45550:	e0bffc17 	ldw	r2,-16(fp)
   45554:	10800810 	cmplti	r2,r2,32
   45558:	103fe01e 	bne	r2,zero,454dc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4555c:	e0bffd17 	ldw	r2,-12(fp)
}
   45560:	e6ffff04 	addi	sp,fp,-4
   45564:	dfc00217 	ldw	ra,8(sp)
   45568:	df000117 	ldw	fp,4(sp)
   4556c:	dc000017 	ldw	r16,0(sp)
   45570:	dec00304 	addi	sp,sp,12
   45574:	f800283a 	ret

00045578 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45578:	defffe04 	addi	sp,sp,-8
   4557c:	df000115 	stw	fp,4(sp)
   45580:	df000104 	addi	fp,sp,4
   45584:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   45588:	e0bfff17 	ldw	r2,-4(fp)
   4558c:	10bffe84 	addi	r2,r2,-6
   45590:	10c00428 	cmpgeui	r3,r2,16
   45594:	18001a1e 	bne	r3,zero,45600 <alt_exception_cause_generated_bad_addr+0x88>
   45598:	100690ba 	slli	r3,r2,2
   4559c:	00800134 	movhi	r2,4
   455a0:	10956c04 	addi	r2,r2,21936
   455a4:	1885883a 	add	r2,r3,r2
   455a8:	10800017 	ldw	r2,0(r2)
   455ac:	1000683a 	jmp	r2
   455b0:	000455f0 	cmpltui	zero,zero,4439
   455b4:	000455f0 	cmpltui	zero,zero,4439
   455b8:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455bc:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455c0:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455c4:	000455f0 	cmpltui	zero,zero,4439
   455c8:	000455f8 	rdprs	zero,zero,4439
   455cc:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455d0:	000455f0 	cmpltui	zero,zero,4439
   455d4:	000455f0 	cmpltui	zero,zero,4439
   455d8:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455dc:	000455f0 	cmpltui	zero,zero,4439
   455e0:	000455f8 	rdprs	zero,zero,4439
   455e4:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455e8:	00045600 	call	4560 <__alt_mem_onchip_memory2_0-0x3baa0>
   455ec:	000455f0 	cmpltui	zero,zero,4439
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   455f0:	00800044 	movi	r2,1
   455f4:	00000306 	br	45604 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   455f8:	0005883a 	mov	r2,zero
   455fc:	00000106 	br	45604 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   45600:	0005883a 	mov	r2,zero
  }
}
   45604:	e037883a 	mov	sp,fp
   45608:	df000017 	ldw	fp,0(sp)
   4560c:	dec00104 	addi	sp,sp,4
   45610:	f800283a 	ret

00045614 <atexit>:
   45614:	200b883a 	mov	r5,r4
   45618:	000f883a 	mov	r7,zero
   4561c:	000d883a 	mov	r6,zero
   45620:	0009883a 	mov	r4,zero
   45624:	00456dc1 	jmpi	456dc <__register_exitproc>

00045628 <exit>:
   45628:	defffe04 	addi	sp,sp,-8
   4562c:	000b883a 	mov	r5,zero
   45630:	dc000015 	stw	r16,0(sp)
   45634:	dfc00115 	stw	ra,4(sp)
   45638:	2021883a 	mov	r16,r4
   4563c:	00457f40 	call	457f4 <__call_exitprocs>
   45640:	00800134 	movhi	r2,4
   45644:	109d0a04 	addi	r2,r2,29736
   45648:	11000017 	ldw	r4,0(r2)
   4564c:	20800f17 	ldw	r2,60(r4)
   45650:	10000126 	beq	r2,zero,45658 <exit+0x30>
   45654:	103ee83a 	callr	r2
   45658:	8009883a 	mov	r4,r16
   4565c:	00459740 	call	45974 <_exit>

00045660 <memcmp>:
   45660:	01c000c4 	movi	r7,3
   45664:	3980192e 	bgeu	r7,r6,456cc <memcmp+0x6c>
   45668:	2144b03a 	or	r2,r4,r5
   4566c:	11c4703a 	and	r2,r2,r7
   45670:	10000f26 	beq	r2,zero,456b0 <memcmp+0x50>
   45674:	20800003 	ldbu	r2,0(r4)
   45678:	28c00003 	ldbu	r3,0(r5)
   4567c:	10c0151e 	bne	r2,r3,456d4 <memcmp+0x74>
   45680:	31bfff84 	addi	r6,r6,-2
   45684:	01ffffc4 	movi	r7,-1
   45688:	00000406 	br	4569c <memcmp+0x3c>
   4568c:	20800003 	ldbu	r2,0(r4)
   45690:	28c00003 	ldbu	r3,0(r5)
   45694:	31bfffc4 	addi	r6,r6,-1
   45698:	10c00e1e 	bne	r2,r3,456d4 <memcmp+0x74>
   4569c:	21000044 	addi	r4,r4,1
   456a0:	29400044 	addi	r5,r5,1
   456a4:	31fff91e 	bne	r6,r7,4568c <memcmp+0x2c>
   456a8:	0005883a 	mov	r2,zero
   456ac:	f800283a 	ret
   456b0:	20c00017 	ldw	r3,0(r4)
   456b4:	28800017 	ldw	r2,0(r5)
   456b8:	18bfee1e 	bne	r3,r2,45674 <memcmp+0x14>
   456bc:	31bfff04 	addi	r6,r6,-4
   456c0:	21000104 	addi	r4,r4,4
   456c4:	29400104 	addi	r5,r5,4
   456c8:	39bff936 	bltu	r7,r6,456b0 <memcmp+0x50>
   456cc:	303fe91e 	bne	r6,zero,45674 <memcmp+0x14>
   456d0:	003ff506 	br	456a8 <memcmp+0x48>
   456d4:	10c5c83a 	sub	r2,r2,r3
   456d8:	f800283a 	ret

000456dc <__register_exitproc>:
   456dc:	defffa04 	addi	sp,sp,-24
   456e0:	dc000315 	stw	r16,12(sp)
   456e4:	04000134 	movhi	r16,4
   456e8:	841d0a04 	addi	r16,r16,29736
   456ec:	80c00017 	ldw	r3,0(r16)
   456f0:	dc400415 	stw	r17,16(sp)
   456f4:	dfc00515 	stw	ra,20(sp)
   456f8:	18805217 	ldw	r2,328(r3)
   456fc:	2023883a 	mov	r17,r4
   45700:	10003726 	beq	r2,zero,457e0 <__register_exitproc+0x104>
   45704:	10c00117 	ldw	r3,4(r2)
   45708:	010007c4 	movi	r4,31
   4570c:	20c00e16 	blt	r4,r3,45748 <__register_exitproc+0x6c>
   45710:	1a000044 	addi	r8,r3,1
   45714:	8800221e 	bne	r17,zero,457a0 <__register_exitproc+0xc4>
   45718:	18c00084 	addi	r3,r3,2
   4571c:	18c7883a 	add	r3,r3,r3
   45720:	18c7883a 	add	r3,r3,r3
   45724:	12000115 	stw	r8,4(r2)
   45728:	10c7883a 	add	r3,r2,r3
   4572c:	19400015 	stw	r5,0(r3)
   45730:	0005883a 	mov	r2,zero
   45734:	dfc00517 	ldw	ra,20(sp)
   45738:	dc400417 	ldw	r17,16(sp)
   4573c:	dc000317 	ldw	r16,12(sp)
   45740:	dec00604 	addi	sp,sp,24
   45744:	f800283a 	ret
   45748:	00800034 	movhi	r2,0
   4574c:	10800004 	addi	r2,r2,0
   45750:	10002626 	beq	r2,zero,457ec <__register_exitproc+0x110>
   45754:	01006404 	movi	r4,400
   45758:	d9400015 	stw	r5,0(sp)
   4575c:	d9800115 	stw	r6,4(sp)
   45760:	d9c00215 	stw	r7,8(sp)
   45764:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45768:	d9400017 	ldw	r5,0(sp)
   4576c:	d9800117 	ldw	r6,4(sp)
   45770:	d9c00217 	ldw	r7,8(sp)
   45774:	10001d26 	beq	r2,zero,457ec <__register_exitproc+0x110>
   45778:	81000017 	ldw	r4,0(r16)
   4577c:	10000115 	stw	zero,4(r2)
   45780:	02000044 	movi	r8,1
   45784:	22405217 	ldw	r9,328(r4)
   45788:	0007883a 	mov	r3,zero
   4578c:	12400015 	stw	r9,0(r2)
   45790:	20805215 	stw	r2,328(r4)
   45794:	10006215 	stw	zero,392(r2)
   45798:	10006315 	stw	zero,396(r2)
   4579c:	883fde26 	beq	r17,zero,45718 <__register_exitproc+0x3c>
   457a0:	18c9883a 	add	r4,r3,r3
   457a4:	2109883a 	add	r4,r4,r4
   457a8:	1109883a 	add	r4,r2,r4
   457ac:	21802215 	stw	r6,136(r4)
   457b0:	01800044 	movi	r6,1
   457b4:	12406217 	ldw	r9,392(r2)
   457b8:	30cc983a 	sll	r6,r6,r3
   457bc:	4992b03a 	or	r9,r9,r6
   457c0:	12406215 	stw	r9,392(r2)
   457c4:	21c04215 	stw	r7,264(r4)
   457c8:	01000084 	movi	r4,2
   457cc:	893fd21e 	bne	r17,r4,45718 <__register_exitproc+0x3c>
   457d0:	11006317 	ldw	r4,396(r2)
   457d4:	218cb03a 	or	r6,r4,r6
   457d8:	11806315 	stw	r6,396(r2)
   457dc:	003fce06 	br	45718 <__register_exitproc+0x3c>
   457e0:	18805304 	addi	r2,r3,332
   457e4:	18805215 	stw	r2,328(r3)
   457e8:	003fc606 	br	45704 <__register_exitproc+0x28>
   457ec:	00bfffc4 	movi	r2,-1
   457f0:	003fd006 	br	45734 <__register_exitproc+0x58>

000457f4 <__call_exitprocs>:
   457f4:	defff504 	addi	sp,sp,-44
   457f8:	df000915 	stw	fp,36(sp)
   457fc:	dd400615 	stw	r21,24(sp)
   45800:	dc800315 	stw	r18,12(sp)
   45804:	dfc00a15 	stw	ra,40(sp)
   45808:	ddc00815 	stw	r23,32(sp)
   4580c:	dd800715 	stw	r22,28(sp)
   45810:	dd000515 	stw	r20,20(sp)
   45814:	dcc00415 	stw	r19,16(sp)
   45818:	dc400215 	stw	r17,8(sp)
   4581c:	dc000115 	stw	r16,4(sp)
   45820:	d9000015 	stw	r4,0(sp)
   45824:	2839883a 	mov	fp,r5
   45828:	04800044 	movi	r18,1
   4582c:	057fffc4 	movi	r21,-1
   45830:	00800134 	movhi	r2,4
   45834:	109d0a04 	addi	r2,r2,29736
   45838:	12000017 	ldw	r8,0(r2)
   4583c:	45005217 	ldw	r20,328(r8)
   45840:	44c05204 	addi	r19,r8,328
   45844:	a0001c26 	beq	r20,zero,458b8 <__call_exitprocs+0xc4>
   45848:	a0800117 	ldw	r2,4(r20)
   4584c:	15ffffc4 	addi	r23,r2,-1
   45850:	b8000d16 	blt	r23,zero,45888 <__call_exitprocs+0x94>
   45854:	14000044 	addi	r16,r2,1
   45858:	8421883a 	add	r16,r16,r16
   4585c:	8421883a 	add	r16,r16,r16
   45860:	84402004 	addi	r17,r16,128
   45864:	a463883a 	add	r17,r20,r17
   45868:	a421883a 	add	r16,r20,r16
   4586c:	e0001e26 	beq	fp,zero,458e8 <__call_exitprocs+0xf4>
   45870:	80804017 	ldw	r2,256(r16)
   45874:	e0801c26 	beq	fp,r2,458e8 <__call_exitprocs+0xf4>
   45878:	bdffffc4 	addi	r23,r23,-1
   4587c:	843fff04 	addi	r16,r16,-4
   45880:	8c7fff04 	addi	r17,r17,-4
   45884:	bd7ff91e 	bne	r23,r21,4586c <__call_exitprocs+0x78>
   45888:	00800034 	movhi	r2,0
   4588c:	10800004 	addi	r2,r2,0
   45890:	10000926 	beq	r2,zero,458b8 <__call_exitprocs+0xc4>
   45894:	a0800117 	ldw	r2,4(r20)
   45898:	1000301e 	bne	r2,zero,4595c <__call_exitprocs+0x168>
   4589c:	a0800017 	ldw	r2,0(r20)
   458a0:	10003226 	beq	r2,zero,4596c <__call_exitprocs+0x178>
   458a4:	a009883a 	mov	r4,r20
   458a8:	98800015 	stw	r2,0(r19)
   458ac:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   458b0:	9d000017 	ldw	r20,0(r19)
   458b4:	a03fe41e 	bne	r20,zero,45848 <__call_exitprocs+0x54>
   458b8:	dfc00a17 	ldw	ra,40(sp)
   458bc:	df000917 	ldw	fp,36(sp)
   458c0:	ddc00817 	ldw	r23,32(sp)
   458c4:	dd800717 	ldw	r22,28(sp)
   458c8:	dd400617 	ldw	r21,24(sp)
   458cc:	dd000517 	ldw	r20,20(sp)
   458d0:	dcc00417 	ldw	r19,16(sp)
   458d4:	dc800317 	ldw	r18,12(sp)
   458d8:	dc400217 	ldw	r17,8(sp)
   458dc:	dc000117 	ldw	r16,4(sp)
   458e0:	dec00b04 	addi	sp,sp,44
   458e4:	f800283a 	ret
   458e8:	a0800117 	ldw	r2,4(r20)
   458ec:	80c00017 	ldw	r3,0(r16)
   458f0:	10bfffc4 	addi	r2,r2,-1
   458f4:	15c01426 	beq	r2,r23,45948 <__call_exitprocs+0x154>
   458f8:	80000015 	stw	zero,0(r16)
   458fc:	183fde26 	beq	r3,zero,45878 <__call_exitprocs+0x84>
   45900:	95c8983a 	sll	r4,r18,r23
   45904:	a0806217 	ldw	r2,392(r20)
   45908:	a5800117 	ldw	r22,4(r20)
   4590c:	2084703a 	and	r2,r4,r2
   45910:	10000b26 	beq	r2,zero,45940 <__call_exitprocs+0x14c>
   45914:	a0806317 	ldw	r2,396(r20)
   45918:	2088703a 	and	r4,r4,r2
   4591c:	20000c1e 	bne	r4,zero,45950 <__call_exitprocs+0x15c>
   45920:	89400017 	ldw	r5,0(r17)
   45924:	d9000017 	ldw	r4,0(sp)
   45928:	183ee83a 	callr	r3
   4592c:	a0800117 	ldw	r2,4(r20)
   45930:	15bfbf1e 	bne	r2,r22,45830 <__call_exitprocs+0x3c>
   45934:	98800017 	ldw	r2,0(r19)
   45938:	153fcf26 	beq	r2,r20,45878 <__call_exitprocs+0x84>
   4593c:	003fbc06 	br	45830 <__call_exitprocs+0x3c>
   45940:	183ee83a 	callr	r3
   45944:	003ff906 	br	4592c <__call_exitprocs+0x138>
   45948:	a5c00115 	stw	r23,4(r20)
   4594c:	003feb06 	br	458fc <__call_exitprocs+0x108>
   45950:	89000017 	ldw	r4,0(r17)
   45954:	183ee83a 	callr	r3
   45958:	003ff406 	br	4592c <__call_exitprocs+0x138>
   4595c:	a0800017 	ldw	r2,0(r20)
   45960:	a027883a 	mov	r19,r20
   45964:	1029883a 	mov	r20,r2
   45968:	003fb606 	br	45844 <__call_exitprocs+0x50>
   4596c:	0005883a 	mov	r2,zero
   45970:	003ffb06 	br	45960 <__call_exitprocs+0x16c>

00045974 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45974:	defffd04 	addi	sp,sp,-12
   45978:	df000215 	stw	fp,8(sp)
   4597c:	df000204 	addi	fp,sp,8
   45980:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45984:	0001883a 	nop
   45988:	e0bfff17 	ldw	r2,-4(fp)
   4598c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45990:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45994:	10000226 	beq	r2,zero,459a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   45998:	002af070 	cmpltui	zero,zero,43969
   4599c:	00000106 	br	459a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   459a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   459a4:	003fff06 	br	459a4 <_exit+0x30>
